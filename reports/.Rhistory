log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
si_I_log10.ppso <- optimParallel(
par =c(0.8026691,   7.5016711, -12.4452724 ,  7.9655673),
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
log_cue = "log10",
cue_range = I_range,
solver = "vode")
stopCluster(cl)
si_I_log_loc.ppso <- par_to_df(c(7.59787, -1.37371, -26.0138, 17.4015), cue_range = I_range)
si_I_log_ppso.rn <- par_to_df(c(7.59787, -1.37371, -26.0138, 17.4015), cue_range = I_range)
# very little difference lol
ggplot() +
geom_line(data= si_I_log_ga.rn, aes(x = cue_range, y = cr, color = "GA Hybrid")) +
geom_line(data= si_I_log_ppso.rn, aes(x = cue_range, y = cr, color = "GA Hybrid")) +
geom_line(data= si_I_log_loc.rn, aes(x = cue_range, y = cr, color = "LBFGS")) +
theme_bw()
# very little difference lol
ggplot() +
geom_line(data= si_I_log_ga.rn, aes(x = cue_range, y = cr, color = "GA Hybrid")) +
geom_line(data= si_I_log_ppso.rn, aes(x = cue_range, y = cr, color = "PPSO hybrid")) +
geom_line(data= si_I_log_loc.rn, aes(x = cue_range, y = cr, color = "LBFGS")) +
theme_bw()
library(ggplot2)
library(dplyr)
library(here)
library(doParallel)
library(doRNG)
library(GA)
library(ppso)
source(here("functions/chabaudi_si_sto.R"))
source(here("functions/chabaudi_si_clean.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
I_range <- seq(0, log10(10^8), by = log10(10^8)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
chabudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
number_of_particles = 70, # increase to 500. Which is on the higher end of the optimal range,. according to https://doi.org/10.1016/j.swevo.2020.100718
max_number_of_iterations = 100,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
optim_pso(
objective_function = function(X)
chabudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
number_of_particles = 70, # increase to 500. Which is on the higher end of the optimal range,. according to https://doi.org/10.1016/j.swevo.2020.100718
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
source(here("functions/chabaudi_si_clean.R"))
optim_pso(
objective_function = function(X)
chabudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
source(here("functions/chabaudi_si_clean.R"))
optim_pso(
objective_function = function(X)
chabaudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
optim_pso(
objective_function = function(X)
chabaudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
number_of_particles = 70, # increase to 500. Which is on the higher end of the optimal range,. according to https://doi.org/10.1016/j.swevo.2020.100718
max_number_of_iterations = 100,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
I_range
parameters_tsukushi
10^7/2
10^7-10^6
R_range <- seq(10^6, 10^7, by = (9*(10^6))/5000)
R_range
R_range1 <- seq(10^6, 10^7, by = (9*(10^6))/5000)
R_range1 <- seq(10^6, 10^7, by = (9*(10^6))/5000)
# no l og
optim_pso(
objective_function = function(X)
chabaudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
number_of_particles = 30, # increase to 500. Which is on the higher end of the optimal range,. according to https://doi.org/10.1016/j.swevo.2020.100718
max_number_of_iterations = 100,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
chabaudi_si_clean(
parameters_cr = c( 0.8026691n   7.5016711n -12.4452724,   7.9655673),
chabaudi_si_clean(
parameters_cr = c( 0.8026691,   7.5016711, -12.4452724,   7.9655673),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE)
chabaudi_si_clean(
parameters_cr = c(0.437887089,	15.76466793,	-6.235967372,	20.38320097),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE)
chabaudi_si_clean(
parameters_cr = c(0.802669112,	7.501671126,	-12.44527236,	7.965567346),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE)
chabaudi_si_clean(
parameters_cr = c(0.802669112,	7.501671126,	-12.44527236,	7.965567346),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE)
chabaudi_si_clean(
parameters_cr = c(0.802669112,	7.501671126,	-12.44527236,	7.965567346),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range1,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE)
chabaudi_si_clean(
parameters_cr = c(0.568146767,	8.094822817,	-12.91969474,	6.214949127),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range1,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE)
# no log
optim_pso(
objective_function = function(X)
chabaudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
number_of_particles = 50, # increase to 500. Which is on the higher end of the optimal range,. according to https://doi.org/10.1016/j.swevo.2020.100718
max_number_of_iterations = 5,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
# no log
optim_pso(
objective_function = function(X)
chabaudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
number_of_particles = 50, # increase to 500. Which is on the higher end of the optimal range,. according to https://doi.org/10.1016/j.swevo.2020.100718
max_number_of_iterations = 5,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
chabaudi_si_clean(
parameters_cr = c(1.888940609,	8.70099966,	-201.1396722,	151.9611149),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range1,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE)
chabaudi_si_clean(
parameters_cr = c(-0.132004226,	-48.22755103,	12.34318544,	394.7057029),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
cue_range = R_range1,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE)
G_range1 <- seq(0, 10^5, by = (10^5)/5000)
G_range1 <- seq(0, 10^5, by = (10^5)/5000)
optim_pso(
objective_function = function(X)
chabaudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_range1,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
number_of_particles = 50, # increase to 500. Which is on the higher end of the optimal range,. according to https://doi.org/10.1016/j.swevo.2020.100718
max_number_of_iterations = 5,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
source(here("functions/par_to_df.R"))
G_rn_1 <- par_to_df(par = c(0.1941519,  -29.2703889,  296.3940933, -206.6236651), cue_range = G_range1)
plot(G_rn_1$cue_range, G_rn_1$cr)
lines(G_rn_1$cue_range, G_rn_1$cr)
plotlines(G_rn_1$cue_range, G_rn_1$cr)
line(G_rn_1$cue_range, G_rn_1$cr)
lines(G_rn_1$cue_range, G_rn_1$cr)
plot(G_rn_1$cue_range, G_rn_1$cr, type = "lines")
#
G_dyn_1 <- chabaudi_si_clean(
parameters_cr = c(0.1941519,  -29.2703889,  296.3940933, -206.6236651),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_range1,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE,
dyn = TRUE)
ggplot() +
geom_line(data = G_dyn_1, aes(x = time, y = value)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
# complex shape. Need to check dynamics
plot(G_rn_1$cue_range, G_rn_1$cr, type = "lines")
G_range1 <- seq(0, 5*10^4, by = (10^5)/5000)
optim_pso(
objective_function = function(X)
chabaudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_range2,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
number_of_particles = 50, # increase to 500. Which is on the higher end of the optimal range,. according to https://doi.org/10.1016/j.swevo.2020.100718
max_number_of_iterations = 5,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
G_range2 <- seq(0, 5*10^4, by = (10^5)/5000)
optim_pso(
objective_function = function(X)
chabaudi_si_clean(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_range2,
log_cue = "none",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
number_of_particles = 50, # increase to 500. Which is on the higher end of the optimal range,. according to https://doi.org/10.1016/j.swevo.2020.100718
max_number_of_iterations = 5,
parameter_bounds = parameter_bounds,
tryCall = TRUE
)
source(here("functions/ga_verbose.R"))
library(ggplot2)
library(dplyr)
library(here)
library(doParallel)
library(doRNG)
library(GA)
source(here("functions/chabaudi_si_sto.R"))
source(here("functions/chabaudi_si_clean.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
I_range <- seq(0, log10(10^8), by = log10(10^8)/5000)
source(here("functions/ga_verbose.R"))
test <- ga_verbose(type = "real-valued",
function(x)
chabaudi_si_lag_clean(
parameters_cr = c(x[1], x[2], x[3], x[4]),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode"),
lower = c(-5, -100, -500, -500), # range determined that would alter shape of spline
upper = c(5, 100, 500, 500),
popSize = 5,
maxiter = 2, # change to 10 for testing purpose
run = 5,
pmutation = 0.3,
keepBest = TRUE,
seed = 137,
monitor = TRUE,
id = "test")
test <- ga_verbose(type = "real-valued",
function(x)
chabaudi_si_clean(
parameters_cr = c(x[1], x[2], x[3], x[4]),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode"),
lower = c(-5, -100, -500, -500), # range determined that would alter shape of spline
upper = c(5, 100, 500, 500),
popSize = 5,
maxiter = 2, # change to 10 for testing purpose
run = 5,
pmutation = 0.3,
keepBest = TRUE,
seed = 137,
monitor = TRUE,
id = "test")
test <- ga_verbose(type = "real-valued",
function(x)
chabaudi_si_clean(
parameters_cr = c(x[1], x[2], x[3], x[4]),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "none",
immunity = "tsukushi",
solver = "vode"),
lower = c(-5, -100, -500, -500), # range determined that would alter shape of spline
upper = c(5, 100, 500, 500),
popSize = 5,
maxiter = 2, # change to 10 for testing purpose
run = 5,
pmutation = 0.3,
keepBest = TRUE,
seed = 137,
monitor = TRUE,
id = "test")
library(ggplot2)
library(dplyr)
library(here)
library(doParallel)
library(doRNG)
library(GA)
source(here("functions/chabaudi_si_sto.R"))
source(here("functions/chabaudi_si_clean.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
I_log_range <- seq(0, log10(10^8), by = log10(10^8)/5000)
install.packages("Rmpi")
