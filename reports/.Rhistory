par = c(5.463558,   2.383948, -17.757281,   4.571835),
cue = "I",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# I
I.diff <- dev_cr(mc_I.dyn,
par = c(0.1135384,  -39.0585154, 1941.9082813,  119.8228980),
cue = "I",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# Ig log
Ig_log.diff <- dev_cr(mc_Ig_log.dyn,
par = c(1.74633, -1.78582, -5.52834, 1.57344 ),
cue = "Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# Ig
Ig.diff <- dev_cr(mc_Ig.dyn,
par = c(0.05234791,  -46.03368629, 1897.61313455,   70.57689145),
cue = "Ig",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# I+Ig log
I_Ig_log.diff <- dev_cr(mc_I_Ig_log.dyn,
par = c(3.594042,   4.157744, -13.530672,   2.599905),
cue = "I+Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
fig1
# I+Ig log
I_Ig_log.diff <- dev_cr(mc_I_Ig_log.dyn,
par = c(3.594042,   4.157744, -13.530672,   2.599905),
cue = "I+Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
source(here("functions/chabaudi_si_clean"))
source(here("functions/chabaudi_si_clean.R"))
# I+Ig log
I_Ig_log.diff <- dev_cr(mc_I_Ig_log.dyn,
par = c(3.594042,   4.157744, -13.530672,   2.599905),
cue = "I+Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# G log
G_log.diff <- dev_cr(mc_G_log.dyn,
par = c(1.211521, -3.936778,-1.312944, -1.285713),
cue = "G",
cue_range = seq(0, log10(6*(10^4)), (log10(6*(10^4)))/5000),
log= "log10")
# G
G.diff <- dev_cr(mc_G.dyn,
par = c(0.04061288,   -9.31445958,   74.13015506, -431.59843638),
cue = "G",
cue_range = seq(0, 6*(10^4), (6*(10^4))/5000),
log= "none")
# R log
R_log.diff <- dev_cr(mc_R_log.dyn,
par = c(48.70772, 105.18882, -81.80625, -44.60051),
cue = "R",
cue_range = seq(log10(10^6), log10(10^7), by = (log10(10^7)-log10(10^6))/5000),
log= "log10")
# R
R.diff <- dev_cr(mc_R.dyn,
par = c(7.0976026,  30.1295151, -28.0565613,  -0.2788713),
cue = "R",
cue_range = seq((10^6), (10^7), by = ((10^7)-(10^6))/5000),
log= "none")
# I log
I_log.diff <- dev_cr(mc_I_log.dyn,
par = c(5.463558,   2.383948, -17.757281,   4.571835),
cue = "I",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# I
I.diff <- dev_cr(mc_I.dyn,
par = c(0.1135384,  -39.0585154, 1941.9082813,  119.8228980),
cue = "I",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# Ig log
Ig_log.diff <- dev_cr(mc_Ig_log.dyn,
par = c(1.74633, -1.78582, -5.52834, 1.57344 ),
cue = "Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# Ig
Ig.diff <- dev_cr(mc_Ig.dyn,
par = c(0.05234791,  -46.03368629, 1897.61313455,   70.57689145),
cue = "Ig",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# I+Ig log
I_Ig_log.diff <- dev_cr(mc_I_Ig_log.dyn,
par = c(3.594042,   4.157744, -13.530672,   2.599905),
cue = "I+Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# I+Ig
I_Ig.diff <- dev_cr(mc_I_Ig.dyn,
par = c(0.3159297,  -46.1104558, 1250.7529081,   -6.1982093),
cue = "I+Ig",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# cr time series
## concatenate data
reference.df <- rbind(
cbind(G_log.diff[[1]], cue = "Gametocyte log10"),
cbind(G.diff[[1]], cue = "Gametocyte"),
cbind(R_log.diff[[1]], cue = "RBC log10"),
cbind(R.diff[[1]], cue = "RBC"),
cbind(I_log.diff[[1]], cue = "Asexual iRBC log10"),
cbind(I.diff[[1]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[1]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[1]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[1]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[1]], cue = "Total iRBC")
)
## different data contenate
diff.df <- rbind(
cbind(G_log.diff[[2]], cue = "Gametocyte log10"),
cbind(G.diff[[2]], cue = "Gametocyte"),
cbind(R_log.diff[[2]], cue = "RBC log10"),
cbind(R.diff[[2]], cue = "RBC"),
cbind(I_log.diff[[2]], cue = "Asexual iRBC log10"),
cbind(I.diff[[2]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[2]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[2]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[2]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[2]], cue = "Total iRBC")
)
# plot conversion time series
fig2c <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Conversion rate") +
theme_bw()
# plot fitness timeseries. When if tiness lost? At the latter part
fig2d <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = tau)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Transmission potential") +
theme_bw()
fig2a
fig2b
fig2c
fig2d
fig1ab <- ggarrange(fig1, fig2b)
ggarrange(fig1, fig2b)
ggarrange(fig2b, fig1)
ggarrange(fig2b, fig1, labels = c("A", "B"))
fig1b <- ggarrange(fig1a, fig1b, ncol = 1, labels = c("A", "B"))
ggarrange(fig2b, fig1b, labels = c("A", "B"))
fig1b <- ggarrange(fig1a, fig1b, ncol = 1)
ggarrange(fig2b, fig1b, labels = c("A", "B"))
fig1cd <- ggarrange(fig2c, fig2d, labels = c("C", "D"))
fig1 <- ggarrange(fig1ab, fig1cd, ncol = 1)
fig1
ggsave(here("figures/report16/MC_final.png"), height = 8, width = 8)
fig1b
fig1ab <- ggarrange(fig2b,fig1b, labels = c("A", "B"))
fig1ab
fig1ab
fig1b <- ggplot() +
geom_tile(data = ref_fit.df2 , aes(x = cue, y = `rand_var.x`, fill = p_mean)) +
facet_wrap(~log) +
theme_bw() +
viridis::scale_fill_viridis() +
labs(x = "Cue", y = "Variable randomized", fill = expression(frac(Mean("all var randomized"), Mean("1 var randomized")))) +
theme(legend.position="top")
mc_partition <- ggarrange(fig1a, fig1b, ncol = 1)
fig1a <- ggplot() +
geom_tile(data = ref_fit.df2 , aes(x = cue, y = `rand_var.x`, fill = p_sd)) +
facet_wrap(~log) +
theme_bw() +
viridis::scale_fill_viridis() +
labs(x = "Cue", y = "Variable randomized", fill = expression(frac(sd("1 var randomized"), sd("all var randomized")))) +
theme(legend.position="top")
# mean fitness
fig1b <- ggplot() +
geom_tile(data = ref_fit.df2 , aes(x = cue, y = `rand_var.x`, fill = p_mean)) +
facet_wrap(~log) +
theme_bw() +
viridis::scale_fill_viridis() +
labs(x = "Cue", y = "Variable randomized", fill = expression(frac(Mean("all var randomized"), Mean("1 var randomized")))) +
theme(legend.position="top")
mc_partition <- ggarrange(fig1a, fig1b, ncol = 1)
fig1ab <- ggarrange(fig2b,mc_partition, labels = c("A", "B"))
fig1ab
ggsave(here("figures/report16/MC_final.png"), height = 8, width = 8)
fig1 <- ggarrange(fig1ab, fig1cd, ncol = 1, height = c(1.5,1))
ggsave(here("figures/report16/MC_final.png"), height = 8, width = 8)
fig1 <- ggarrange(fig1ab, fig1cd, ncol = 1, heights = c(1.5,1))
ggsave(here("figures/report16/MC_final.png"), height = 8, width = 8)
ggsave(here("figures/report16/MC_final.png"), height = 10, width = 10)
fig2b <- ggplot() +
geom_violin(data = fitness.df, aes(y = id, x = max_fitness), alpha = 0.5) +
geom_point(data = fitness_var.df, aes(y = id, x = mean), color = "red") +
geom_point(data = det.df, aes(y = id, x = fitness)) +
labs(x = "Fitness", y = "Cue") +
theme_bw()
fig1ab <- ggarrange(fig2b,mc_partition, labels = c("A", "B"))
fig1cd <- ggarrange(fig2c, fig2d, labels = c("C", "D"))
fig1 <- ggarrange(fig1ab, fig1cd, ncol = 1, heights = c(1.5,1))
ggsave(here("figures/report16/MC_final.png"), height = 10, width = 10)
fig2b <- ggplot() +
geom_violin(data = fitness.df, aes(y = id, x = max_fitness), alpha = 0.5) +
geom_point(data = fitness_var.df, aes(y = id, x = mean), color = "red") +
geom_point(data = det.df, aes(y = id, x = fitness), shape = 17) +
labs(x = "Fitness", y = "Cue") +
theme_bw()
fig2b
fig1ab <- ggarrange(fig2b,mc_partition, labels = c("A", "B"))
fig1cd <- ggarrange(fig2c, fig2d, labels = c("C", "D"))
fig1 <- ggarrange(fig1ab, fig1cd, ncol = 1, heights = c(1.5,1))
ggsave(here("figures/report16/MC_final.png"), height = 10, width = 10)
library(dplyr)
library(here)
library(stringr)
library(ggplot2)
library(ggpubr)
library(parallel)
library(arrow)
# import back
orf.df <- read_parquet(here("lp_comparative_genomics/orf_mcl.parquet"))
library(dplyr)
library(ggplot2)
library(here)
library(deSolve)
library(crone)
library(optimParallel)
library(doParallel)
library(doRNG)
library(arrow)
library(stringr)
library(parallel)
library(ggpubr)
source(here("functions/chabaudi_si_clean.R"))
source(here("functions/chabaudi_ci_clean.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
ci_invade.df <- read.csv(here("data/ci_invasion_final.csv"))
ci_invade.mat <- ci_invade.df %>%
group_by(V1 = pmin(mut_id, res_id), V2 = pmax(mut_id, res_id)) %>% # group by cue competition, irregardless of order
mutate(id_alt = paste0(V1, V2),
invade = case_when(
fitness_final > 0 ~ "invade",
fitness_final < 0 ~ "not invade"
)) %>%
group_by(id_alt) %>%
mutate(
mut_is_V1 = case_when(
mut_id == V1 ~ "V1_invade",
mut_id != V1 ~ "V1_invaded")) %>%
arrange(id_alt) %>%
select(mut_label, res_label, fitness_final, V1, V2, id_alt, invade, mut_is_V1) %>%
tidyr::pivot_wider(names_from = mut_is_V1, values_from = fitness_final) %>%
group_by(id_alt) %>%
mutate(V1_invade2 = gsub("NA", "", paste0(V1_invade, collapse = "")),
V1_invaded2 = gsub("NA", "", paste0(V1_invaded, collapse = ""))) %>%
distinct(id_alt, .keep_all = T) %>%
mutate(
category = case_when(
V1_invade2 > 0 & V1_invaded2 > 0 ~ "Mutual invasion",
V1_invade2 > 0 & V1_invaded2 < 0 ~ "Only strain 1 invasion",
V1_invade2 < 0 & V1_invaded2 > 0 ~ "Only strain 2 invasion",
V1_invade2 < 0 & V1_invaded2 < 0 ~ "Mutual non-invasion"
)) %>%
select(V1, V2, invasion = category)
# for plotting, need to get all same cue vs same cue, which we will set to NA
ci_invade.NA <- cbind.data.frame(`V1` = unique(ci_invade.mat$V1),
`V2` = unique(ci_invade.mat$V1),
invasion = NA)
ci_invade.mat2 <- rbind(ci_invade.mat, ci_invade.NA)
# get label
ci_invade.mat3 <- ci_invade.mat2 %>%
left_join(select(ci_invade.final, mut_id, V1_label = mut_label), by = c("V1" = "mut_id")) %>%
left_join(select(ci_invade.final, res_id, V2_label = res_label), by = c("V2" = "res_id")) %>%
distinct(`V1`, `V2`, .keep_all = T) %>%
select(V1_label, V2_label, invasion)
# get label
ci_invade.mat3 <- ci_invade.mat2 %>%
left_join(select(ci_invade.df, mut_id, V1_label = mut_label), by = c("V1" = "mut_id")) %>%
left_join(select(ci_invade.df, res_id, V2_label = res_label), by = c("V2" = "res_id")) %>%
distinct(`V1`, `V2`, .keep_all = T) %>%
select(V1_label, V2_label, invasion)
ci_invade.mat3
# reorder so that ggplot do not mess up
library(gtools)
levels <- mixedsort(unique(c(ci_invade.mat3$V1_label, ci_invade.mat3$V2_label)))
ci_invade.mat4 <- rbind(ci_invade.mat3,
ci_invade.mat3 %>%
rename(V2_label = V1_label, V1_label = V2_label) %>%
select(V1_label, V2_label, invasion)) %>%
mutate(across(ends_with("label"),
~factor(.x, levels = levels))) %>%
filter(as.integer(V1_label) < as.integer(V2_label)) %>%
mutate(V2_label = forcats::fct_rev(V2_label))
# plot
invasion_mat.pl <- ggplot(data = ci_invade.mat4, aes(x = V2_label, y = V1_label, fill = invasion)) +
geom_tile(color = "black") +
theme_minimal() +
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(size = 15),
axis.ticks = element_blank(),
plot.margin=margin(r = 0)) +
labs(fill = "Invasion", x = "Strain 2 cue", y = "Strain 1 cue") +
#scale_x_discrete(limits = rev) +
scale_y_discrete(limits = rev) +
scale_fill_manual(values = c("Only strain 1 invasion" = "#4575b4",
"Only strain 2 invasion" = "#fc8d59",
"Mutual invasion" = "#fee090",
"Mutual non-invasion" = "#91bfdb")) +
theme(legend.position = "none")
ggplot(data = ci_invade.mat4, aes(x = V2_label, y = V1_label, fill = invasion)) +
geom_tile(color = "black") +
theme_minimal() +
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(size = 15),
axis.ticks = element_blank(),
plot.margin=margin(r = 0)) +
labs(fill = "Invasion", x = "Strain 2 cue", y = "Strain 1 cue") +
#scale_x_discrete(limits = rev) +
scale_y_discrete(limits = rev) +
scale_fill_manual(values = c("Only strain 1 invasion" = "#4575b4",
"Only strain 2 invasion" = "#fc8d59",
"Mutual invasion" = "#fee090",
"Mutual non-invasion" = "#91bfdb")) +
theme(legend.position = "none")
# create a stacked barchart for summary
## filter out na
ci_invade.matalt <- ci_invade.mat3 %>% na.exclude()
ci_invade.matalt %>% group_by(V1_label, invasion) %>%
summarize(frequency_1 = n())
.
# get frquency from both sides. Note when grouping for V2, from the perspective of cue 2, scenarrio when strain 2 invade = strain 1 invade
ci_invade.matalt1 <- ci_invade.matalt %>% group_by(V1_label, invasion) %>%
summarize(frequency_1 = n())
ci_invade.matalt2 <- ci_invade.matalt %>%
mutate(invasion_alt = case_when(
invasion == "Only strain 1 invasion" ~ "Only strain 2 invasion",
invasion == "Only strain 2 invasion" ~ "Only strain 1 invasion",
invasion == "Mutual invasion" ~ "Mutual invasion",
invasion == "Mutual non-invasion" ~ "Mutual non-invasion"
)) %>%
group_by(V2_label, invasion_alt) %>%
summarize(frequency_2 = n())
# full join and sum. has confirmed all of them add up to 14
ci_invade.matalt3 <- full_join(ci_invade.matalt1, ci_invade.matalt2, by = c("V1_label" = "V2_label", "invasion" = "invasion_alt"))
ci_invade.matalt3[is.na(ci_invade.matalt3)] <- 0
ci_invade.matalt4 <- ci_invade.matalt3 %>%
mutate(freq = frequency_1 + frequency_2) %>%
mutate(temp = case_when(
invasion == "Only strain 1 invasion" ~ freq
)) %>%
group_by(V1_label) %>%
mutate(invade_1_freq = max(temp, na.rm = T))
ggplot() +
geom_bar(data = ci_invade.matalt4, aes(x = freq, y = reorder(V1_label, invade_1_freq), fill = forcats::fct_rev(factor(invasion, levels = c("Only strain 1 invasion", "Only strain 2 invasion", "Mutual invasion", "Mutual non-invasion")))), stat = "identity") +
labs(x = "Frequency", fill = "Invasion", y = "Strain 1 cue") +
theme_bw()  +
scale_fill_manual(values = c("Only strain 1 invasion" = "#4575b4",
"Only strain 2 invasion" = "#fc8d59",
"Mutual invasion" = "#fee090",
"Mutual non-invasion" = "#91bfdb")) +
theme(text = element_text(size = 15))
chabaudi_ci_clean(parameters_cr_1 = c(0.9999999,	-9.1650326,	-71.7214007,	4998.79439),
parameters_cr_2 = c(2.189146,	-5.450051,	4.543525,	-9.356682),
immunity = "tsukushi",
parameters = parameters_tsukushi,
cue_1 = "I1+I2",
cue_2 = "Ig2",
cue_range_1 = seq(0, 6*10^6, (6*10^6)/5000),
cue_range_2 = seq(0, log10(6*10^6), log10((6*10^6)/5000)),
log_cue_1 = "none",
log_cue_2 = "log10",
solver = "vode",
time_range = seq(0, 20, by = 1e-3),
dyn = F)
chabaudi_ci_clean(parameters_cr_1 = c(2.189146,	-5.450051,	4.543525,	-9.356682),
parameters_cr_2 = c(0.9999999,	-9.1650326,	-71.7214007,	4998.79439),
immunity = "tsukushi",
parameters = parameters_tsukushi,
cue_1 = "Ig1",
cue_2 = "I1+I2",
cue_range_1 = seq(0, log10(6*10^6), log10((6*10^6)/5000)),
cue_range_2 = seq(0, 6*10^6, (6*10^6)/5000),
log_cue_1 = "log10",
log_cue_2 = "none",
solver = "vode",
time_range = seq(0, 20, by = 1e-3),
dyn = F)
source(here("functions/chabaudi_ci_clean.R"))
# -4.270119
chabaudi_ci_clean(parameters_cr_1 = c(2.189146,	-5.450051,	4.543525,	-9.356682),
parameters_cr_2 = c(0.9999999,	-9.1650326,	-71.7214007,	4998.79439),
immunity = "tsukushi",
parameters = parameters_tsukushi,
cue_1 = "Ig1",
cue_2 = "I1+I2",
cue_range_1 = seq(0, log10(6*10^6), log10((6*10^6)/5000)),
cue_range_2 = seq(0, 6*10^6, (6*10^6)/5000),
log_cue_1 = "log10",
log_cue_2 = "none",
solver = "vode",
time_range = seq(0, 20, by = 1e-3),
dyn = F)
# -4.270119
chabaudi_ci_clean(parameters_cr_1 = c(2.189146,	-5.450051,	4.543525,	-9.356682),
parameters_cr_2 = c(0.9999999,	-9.1650326,	-71.7214007,	4998.79439),
immunity = "tsukushi",
parameters = parameters_tsukushi,
cue_1 = "Ig1",
cue_2 = "I1+I2",
cue_range_1 = seq(0, log10(6*(10^6)), log10((6*(10^6))/5000)),
cue_range_2 = seq(0, 6*(10^6), (6*(10^6))/5000),
log_cue_1 = "log10",
log_cue_2 = "none",
solver = "vode",
time_range = seq(0, 20, by = 1e-3),
dyn = F)
# -4.270119
chabaudi_ci_clean(parameters_cr_1 = c(2.189146,	-5.450051,	4.543525,	-9.356682),
parameters_cr_2 = c(0.9999999,	-9.1650326,	-71.7214007,	4998.79439),
immunity = "tsukushi",
parameters = parameters_tsukushi,
cue_1 = "Ig1",
cue_2 = "I1+I2",
cue_range_1 = seq(0, log10(6*(10^6)), log10((6*(10^6))/5000)),
cue_range_2 = seq(0, 6*(10^6), (6*(10^6))/5000),
log_cue_1 = "log10",
log_cue_2 = "none",
solver = "vode",
time_range = seq(0, 30, by = 1e-3),
dyn = F)
# -4.270119
chabaudi_ci_clean(parameters_cr_1 = c(2.189146,	-5.450051,	4.543525,	-9.356682),
parameters_cr_2 = c(0.9999999,	-9.1650326,	-71.7214007,	4998.79439),
immunity = "tsukushi",
parameters = parameters_tsukushi,
cue_1 = "Ig1",
cue_2 = "I1+I2",
cue_range_1 = seq(0, Log10(6*(10^6)), Log10((6*(10^6))/5000)),
cue_range_2 = seq(0, 6*(10^6), (6*(10^6))/5000),
log_cue_1 = "log10",
log_cue_2 = "none",
solver = "vode",
time_range = seq(0, 30, by = 1e-3),
dyn = F)
6*10^6
seq(0, 6*10^6, by = 1200)
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
# -4.270119
chabaudi_ci_clean(parameters_cr_1 = c(2.189146,	-5.450051,	4.543525,	-9.356682),
parameters_cr_2 = c(0.9999999,	-9.1650326,	-71.7214007,	4998.79439),
immunity = "tsukushi",
parameters = parameters_tsukushi,
cue_1 = "Ig1",
cue_2 = "I1+I2",
cue_range_1 = seq(0, log10(6*(10^6)), log10((6*(10^6))/5000)),
cue_range_2 = seq(0, 6*(10^6), (6*(10^6))/5000),
log_cue_1 = "log10",
log_cue_2 = "none",
solver = "vode",
time_range = seq(0, 20, by = 1e-3),
dyn = F)
