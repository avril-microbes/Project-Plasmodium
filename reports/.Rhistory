par3 = par_rand[[3]],
par4 = par_rand[[4]],
par5 = par_rand[[5]])
)
}
start.df <- do.call(rbind, start)
# get starting poiint that give us highest fitness
max_start.df <- start.df %>% filter(fitness == max(start.df$fitness))
# start optimization LFBGS with inital value of 0.5x5
res <- optimParallel(
par = c(max_start.df$par1, max_start.df$par2, max_start.df$par3, max_start.df$par4, max_start.df$par5),
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, 0.01),
cue = cue,
cue_b = cue_b,
cue_range = cue_range,
cue_range_b = cue_range_b,
log_cue = log,
log_cue_b = log_b,
solver = "vode")
# close cluster
stopCluster(cl)
# get model output
fitness <- res$value ## fitness difference between mutant and residence
par <- res$par ## optimized parameters of mutant
# produce output
output <- cbind.data.frame(id = df$Var1, id_b = df$Var2,
label = df$label, label_b = df$label_b,
fitness = fitness,
par1 = par[1], par2 = par[2], par3 = par[3], par4 = par[4], par5 = par[5])
write.csv(output, here(paste0("data/dual_cue_opt2/", df$Var1, "_", df$Var2, ".csv")))
detectCores()
dual_cue_opt2 <- function(df, n = 100){
# process cues
cue <- df$cue
cue_b <- df$cue_b
# process log
log <- ifelse(str_detect("log", df$log), "log10", "none")
log_b <- ifelse(str_detect("log", df$log_b), "log10", "none")
# process cue_range. cannot use by to ensure that both cue ranges are of the same length
cue_range <- seq(df$low, df$high, length.out = 500)
cue_range_b <- seq(df$low_b, df$high_b, length.out = 500)
# optimization
## initiate cluster
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
## generate random starting points and pick the starting point that has the highest fitness
start <- foreach(i= 1:n, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr", "crone", "here")) %dorng% {
# source function
source(here("functions/chabaudi_si_clean.R"))
# parameters
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
# generate random par, bounds for parameters based on previous determined bounds
par1 <- runif(1, -1, 1)
par2 <- runif(1, -500, 500)
par3 <- runif(1, -500, 500)
par4 <- runif(1, -500, 500)
par5 <- runif(1, -500, 500)
par_rand <- c(par1, par2, par3, par4, par5)
fitness <- chabaudi_si_clean(
parameters_cr = par_rand,
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, 0.01),
cue = cue,
cue_b = cue_b,
cue_range = cue_range,
cue_range_b = cue_range_b,
log_cue = log,
log_cue_b = log_b,
solver = "lsoda")
return(data.frame(fitness = fitness,
par1 = par_rand[[1]],
par2 = par_rand[[2]],
par3 = par_rand[[3]],
par4 = par_rand[[4]],
par5 = par_rand[[5]])
)
}
start.df <- do.call(rbind, start)
# get starting poiint that give us highest fitness
max_start.df <- start.df %>% filter(fitness == max(start.df$fitness))
# start optimization LFBGS with inital value of 0.5x5
res <- optimParallel(
par = c(max_start.df$par1, max_start.df$par2, max_start.df$par3, max_start.df$par4, max_start.df$par5),
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, 0.01),
cue = cue,
cue_b = cue_b,
cue_range = cue_range,
cue_range_b = cue_range_b,
log_cue = log,
log_cue_b = log_b,
solver = "vode")
# close cluster
stopCluster(cl)
# get model output
fitness <- res$value ## fitness difference between mutant and residence
par <- res$par ## optimized parameters of mutant
# produce output
output <- cbind.data.frame(id = df$Var1, id_b = df$Var2,
label = df$label, label_b = df$label_b,
fitness = fitness,
par1 = par[1], par2 = par[2], par3 = par[3], par4 = par[4], par5 = par[5])
write.csv(output, here(paste0("data/dual_cue_opt2/", df$Var1, "_", df$Var2, ".csv")))
return(output)
}
lapply(dual_cue.ls, dual_cue_opt2)
dual_cue_opt2 <- function(df, n = 100){
# process cues
cue <- df$cue
cue_b <- df$cue_b
# process log
log <- ifelse(str_detect("log", df$log), "log10", "none")
log_b <- ifelse(str_detect("log", df$log_b), "log10", "none")
# process cue_range. cannot use by to ensure that both cue ranges are of the same length
cue_range <- seq(df$low, df$high, length.out = 500)
cue_range_b <- seq(df$low_b, df$high_b, length.out = 500)
# optimization
## initiate cluster
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
## generate random starting points and pick the starting point that has the highest fitness
start <- foreach(i= 1:n, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr", "crone", "here")) %dorng% {
# source function
source(here("functions/chabaudi_si_clean.R"))
# parameters
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
# generate random par, bounds for parameters based on previous determined bounds
par1 <- runif(1, -1, 1)
par2 <- runif(1, -500, 500)
par3 <- runif(1, -500, 500)
par4 <- runif(1, -500, 500)
par5 <- runif(1, -500, 500)
par_rand <- c(par1, par2, par3, par4, par5)
fitness <- chabaudi_si_clean(
parameters_cr = par_rand,
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, 0.01),
cue = cue,
cue_b = cue_b,
cue_range = cue_range,
cue_range_b = cue_range_b,
log_cue = log,
log_cue_b = log_b,
solver = "vode")
return(data.frame(fitness = fitness,
par1 = par_rand[[1]],
par2 = par_rand[[2]],
par3 = par_rand[[3]],
par4 = par_rand[[4]],
par5 = par_rand[[5]])
)
}
start.df <- do.call(rbind, start)
# get starting poiint that give us highest fitness
max_start.df <- start.df %>% filter(fitness == max(start.df$fitness))
# start optimization LFBGS with inital value of 0.5x5
res <- optimParallel(
par = c(max_start.df$par1, max_start.df$par2, max_start.df$par3, max_start.df$par4, max_start.df$par5),
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, 0.01),
cue = cue,
cue_b = cue_b,
cue_range = cue_range,
cue_range_b = cue_range_b,
log_cue = log,
log_cue_b = log_b,
solver = "vode")
# close cluster
stopCluster(cl)
# get model output
fitness <- res$value ## fitness difference between mutant and residence
par <- res$par ## optimized parameters of mutant
# produce output
output <- cbind.data.frame(id = df$Var1, id_b = df$Var2,
label = df$label, label_b = df$label_b,
fitness = fitness,
par1 = par[1], par2 = par[2], par3 = par[3], par4 = par[4], par5 = par[5])
write.csv(output, here(paste0("data/dual_cue_opt2/", df$Var1, "_", df$Var2, ".csv")))
return(output)
}
lapply(dual_cue.ls, dual_cue_opt2)
library(dplyr)
library(ggplot2)
library(here)
library(deSolve)
library(crone)
library(optimParallel)
library(doParallel)
library(doRNG)
library(arrow)
library(stringr)
library(parallel)
library(ggpubr)
library(ppso)
library(Rmpi)
library(ggrepel)
source(here("functions/chabaudi_si_clean.R"))
# importing in test function that contains full main effect interation
source(here("functions/test.R"))
## perfect dynamic when parasite can sense time
## 20 days
time_20.cr <- optimParallel(
par = rep(0.5,4), # start at 0.5x4
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode")
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
time_20.cr <- optimParallel(
par = rep(0.5,4), # start at 0.5x4
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode")
stopCluster(cl)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
time_30.cr <- optimParallel(
par = rep(0.5,4), # start at 0.5x4
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 30, by = 1e-3),
cue_range =  seq(0, 30, by = 1e-3),
cue = "t",
solver = "vode")
stopCluster(cl)
time_30.cr
# plot
ggplot() +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (30 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept =  13.663812) â‰ 
# plot
ggplot() +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (30 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept =  13.663812) +
theme_bw()
# left join with si
dual_si.fitness <- dual_fitness.df2 %>%
left_join(select(si_fitness, id, si_fitness = value), by = "id") %>%
left_join(select(si_fitness, id_b = id, si_fitness_b = value), by = "id_b") %>%
mutate(si_fitness_max = ifelse(si_fitness > si_fitness_b, si_fitness, si_fitness_b),
dual_label = paste(label, "+", label_b))
# filter out low values
dual_fitness.df2 <- dual_fitness.df %>% filter(value > 2)
# get single infection best fitness
si_dyn <- read_parquet(here("data/si_dyn/si_dyn_30.parquet"))
si_fitness <- si_dyn %>%
filter(time == 30 & variable == "tau_cum")
#write.csv(dual_fitness.df, here("data/dual_cue_opt4/dual_cue_fitness.csv"))
#write.csv(dual_fitness_20.df, here("data/dual_cue_opt4/dual_cue_fitness_20.csv"))
dual_fitness.df <- read.csv(here("data/dual_cue_opt4/dual_cue_fitness.csv"))
# filter out low values
dual_fitness.df2 <- dual_fitness.df %>% filter(value > 2)
# left join with si
dual_si.fitness <- dual_fitness.df2 %>%
left_join(select(si_fitness, id, si_fitness = value), by = "id") %>%
left_join(select(si_fitness, id_b = id, si_fitness_b = value), by = "id_b") %>%
mutate(si_fitness_max = ifelse(si_fitness > si_fitness_b, si_fitness, si_fitness_b),
dual_label = paste(label, "+", label_b))
# get single infection best fitness
si_dyn <- read_parquet(here("data/si_dyn/si_dyn_30.parquet"))
si_fitness <- si_dyn %>%
filter(time == 30 & variable == "tau_cum")
si_fitness <- si_dyn %>%
filter(time == 30 & variable == "tau_cum")
si_fitness_20 <- si_dyn %>%
filter(time == 20 & variable == "tau_cum")
# left join with si
dual_si.fitness <- dual_fitness.df2 %>%
left_join(select(si_fitness, id, si_fitness = value), by = "id") %>%
left_join(select(si_fitness, id_b = id, si_fitness_b = value), by = "id_b") %>%
mutate(si_fitness_max = ifelse(si_fitness > si_fitness_b, si_fitness, si_fitness_b),
dual_label = paste(label, "+", label_b))
# plot
ggplot() +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (30 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept =  13.663812) +
theme_bw()
# plot
ggplot() +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (30 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept =  9.787899) +
theme_bw()
# plot
ggplot() +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (30 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept =  13.663812) +
theme_bw()
# filter out low values
dual_fitness_20.df2 <- dual_fitness_20.df %>% filter(value > 2)
# filter out low values
dual_fitness_20.df2 <- dual_fitness_20.df %>% filter(value > 2)
dual.fitness_20 <- lapply(dual_dyn.ls2, function(x){
# rename column
names(x) <- c("id", "id_b", "label", "label_b", "cue", "cue_b", "time","variable", "value")
df <- x %>% filter(time == 20 & variable == "tau_cum")
return(df)
})
dual_fitness_20.df <- read.csv(here("data/dual_cue_opt4/dual_cue_fitness_20.csv"))
# filter out low values
dual_fitness_20.df2 <- dual_fitness_20.df %>% filter(value > 2)
# left join with si
dual_si_20.fitness <- dual_fitness_20.df2 %>%
left_join(select(si_fitness_20, id, si_fitness = value), by = "id") %>%
left_join(select(si_fitness_20, id_b = id, si_fitness_b = value), by = "id_b") %>%
mutate(si_fitness_max = ifelse(si_fitness > si_fitness_b, si_fitness, si_fitness_b),
max_si_id = ifelse(si_fitness > si_fitness_b, id, id_b),
max_si_label = ifelse(si_fitness > si_fitness_b, label, label_b),
dual_label =  paste(label, "+", label_b))
# plot
dual_20_fitness.pl <- ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899, color = "Maximum fitness") +
theme_bw()
# plot
dual_20_fitness.pl <- ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899, color = "Maximum fitness") +
theme_bw()
ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899, color = "Maximum fitness") +
theme_bw()
# plot
dual_20_fitness.pl <- ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899) +
theme_bw()
ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899) +
theme_bw()
time_20.cr
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
time_20.cr <- optimParallel(
par = rep(2,4), # start at 0.5x4
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode")
stopCluster(cl)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = model,
control = list(trace = 1, parallelType = 1),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
stopCluster(cl)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
control = list(trace = 1, parallelType = 1),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
stopCluster(cl)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
initialpop = c( 0.985053,   -3.018158,   -0.134980,   -1.782350),
control = list(trace = 1, parallelType = 1),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
control = list(trace = 1, parallelType = 1,
initialpop = c(0.985053,   -3.018158,   -0.134980,   -1.782350)),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
matrix(c(0.985053,   -3.018158,   -0.134980,   -1.782350))
as.matrix(c(0.985053,   -3.018158,   -0.134980,   -1.782350))
matrix(0.985053,   -3.018158,   -0.134980,   -1.782350)
matrix(c(0.985053,   -3.018158,   -0.134980,   -1.782350), nrow = 1)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
control = list(trace = 1, parallelType = 1,
initialpop = matrix(c(0.985053,   -3.018158,   -0.134980,   -1.782350), nrow = 1)),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
control = list(trace = 1, parallelType = 1, itermax = 1000),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
