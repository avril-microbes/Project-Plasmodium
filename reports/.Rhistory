mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.01) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free")
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.01) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
theme_bw()
abs(-0.1)
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.1) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.001) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
theme_bw()
spline_par <- function(
par_seq, # range of parameters we want to test
cue_range,
mode = "place") # cue_range optimized over
{
get_spline <- function(par, cue_range){
# create dummy model
dummy_y.vals <- rep(0, length(cue_range))
dummy_cr.data <- as.data.frame(cbind(cue_range, dummy_y.vals))
# fit basic cubic spline with no internal knots.
dummy_cr.mod <- lm(dummy_y.vals ~ splines2::bSpline(x = cue_range, degree = 3))
dummy_cr.mod$data <- dummy_cr.data
# assign coefficient to be optimized to the dummy conversion rate function
dummy_cr.mod$coefficients <- par
# trying heaviside transformation
cr_pred <- predict(dummy_cr.mod, newdata = data.frame(cue_range))
if(mode == "exp"){cr_trans <- exp(-exp(predict(dummy_cr.mod, newdata = data.frame(cue_range))))}
# fit spline function to predicted conversion rate. This increases processing speed
cr_fun <- splinefun(cbind(cue_range, cr_trans))
return(cr_fun)
}
# get dataframe of all permutation of parameter values and their position
par.df <- expand.grid(n = c(1,2,3,4), par = par_seq)
## paste0 to get id
par.df$id <- paste0(par.df$n, "_", par.df$par)
# substitute each value within the 4 parameters with par_seq (generate all iterations)
changed_par <- mapply(function(x, y){
## define original parameter
par_trans <- rep(0.5,4)
## change according to df
par_trans[[x]] <- y
return(par_trans)
}, x = par.df$n, y = par.df$par)
# convert matrix (each column) into a list of parameters
par.ls <- lapply(seq_len(ncol(changed_par)), function(i) changed_par[,i])
#get a list of splines form the transformed parameter lists
spline.ls <- lapply(par.ls, function(x){
get_spline(par = x, cue_range = cue_range)
})
# convert spline to dataframe
spline_int.ls <- mapply(function(x, y){
data.frame(cue = cue_range, cr = x(cue_range), group = y)},
x = spline.ls, y = par.df$id)
# convert to df.ls
df.ls <- lapply(seq_len(ncol(spline_int.ls)), function(i){
df <- spline_int.ls[,i]
df_cat <- data.frame(cbind(
cue = as.numeric(df$cue),
cr = as.numeric(df$cr),
group = df$group))
return(df_cat)
} )
res <- do.call(rbind, df.ls)
return(res)
}
spline_par <- function(
par_seq, # range of parameters we want to test
cue_range,
mode = "place") # cue_range optimized over
{
get_spline <- function(par, cue_range){
# create dummy model
dummy_y.vals <- rep(0, length(cue_range))
dummy_cr.data <- as.data.frame(cbind(cue_range, dummy_y.vals))
# fit basic cubic spline with no internal knots.
dummy_cr.mod <- lm(dummy_y.vals ~ splines2::bSpline(x = cue_range, degree = 3))
dummy_cr.mod$data <- dummy_cr.data
# assign coefficient to be optimized to the dummy conversion rate function
dummy_cr.mod$coefficients <- par
# trying heaviside transformation
cr_pred <- predict(dummy_cr.mod, newdata = data.frame(cue_range))
if(mode == "exp"){cr_trans <- exp(-exp(predict(dummy_cr.mod, newdata = data.frame(cue_range))))}
# fit spline function to predicted conversion rate. This increases processing speed
cr_fun <- splinefun(cbind(cue_range, cr_trans))
return(cr_fun)
}
# get dataframe of all permutation of parameter values and their position
par.df <- expand.grid(n = c(1,2,3,4), par = par_seq)
## paste0 to get id
par.df$id <- paste0(par.df$n, "_", par.df$par)
# substitute each value within the 4 parameters with par_seq (generate all iterations)
changed_par <- mapply(function(x, y){
## define original parameter
par_trans <- rep(0.5,4)
## change according to df
par_trans[[x]] <- y
return(par_trans)
}, x = par.df$n, y = par.df$par)
# convert matrix (each column) into a list of parameters
par.ls <- lapply(seq_len(ncol(changed_par)), function(i) changed_par[,i])
#get a list of splines form the transformed parameter lists
spline.ls <- lapply(par.ls, function(x){
get_spline(par = x, cue_range = cue_range)
})
# convert spline to dataframe
spline_int.ls <- mapply(function(x, y){
data.frame(cue = cue_range, cr = x(cue_range), group = y)},
x = spline.ls, y = par.df$id)
# convert to df.ls
df.ls <- lapply(seq_len(ncol(spline_int.ls)), function(i){
df <- spline_int.ls[,i]
df_cat <- data.frame(cbind(
cue = as.numeric(df$cue),
cr = as.numeric(df$cr),
group = df$group))
return(df_cat)
} )
res <- do.call(rbind, df.ls)
return(res)
}
exp_spline <- spline_par(par_seq = c(seq(-1,1,0.1), seq(-10,10,1), seq(-100,100,10),seq(-10000,10000,100)), cue_range = seq(0, 100, by = 1),
mode = "exp")
# process data. add coefficient name and get parameter values
exp_spline2 <- exp_spline %>%
mutate(n = paste("Coefficient", gsub("_.*", "", group)),
par = gsub("*._", "", group)) %>%
distinct(n, par, cue, .keep_all = T)
exp_spline2$par <- as.numeric(exp_spline2$par)
exp_spline2$cue <- as.numeric(exp_spline2$cue)
exp_spline2$cr <- as.numeric(exp_spline2$cr)
# get reference point at which difference is calculated. Here, for a given parameter alteration and cue value, we set the cr when parameter=0.5 as an arbitrary starting point.
exp_spline.ref <- exp_spline2 %>%
filter(par == 0.5) %>%
distinct(n, par, cue, cr) %>%
select(n, cue, cr_ref = cr)
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.001) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
#filter(abs(change_cr)> 0.001) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.001) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.001) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.01) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.01) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
lab(x = "Coefficient value", y = "Average conversion rate difference")
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.01) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.0-5) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.05) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.005) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.005) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.005) %>%
ggplot(aes(x = par, y = change_cr)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.005) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
exp(-exp(0.5))
-log(log(0.5))
log(0.5)
log(-log(0.5))
exp(-exp(-0.3665129))
spline_par <- function(
par_seq, # range of parameters we want to test
cue_range,
mode = "place") # cue_range optimized over
{
get_spline <- function(par, cue_range){
# create dummy model
dummy_y.vals <- rep(0, length(cue_range))
dummy_cr.data <- as.data.frame(cbind(cue_range, dummy_y.vals))
# fit basic cubic spline with no internal knots.
dummy_cr.mod <- lm(dummy_y.vals ~ splines2::bSpline(x = cue_range, degree = 3))
dummy_cr.mod$data <- dummy_cr.data
# assign coefficient to be optimized to the dummy conversion rate function
dummy_cr.mod$coefficients <- par
# trying heaviside transformation
cr_pred <- predict(dummy_cr.mod, newdata = data.frame(cue_range))
if(mode == "exp"){cr_trans <- exp(-exp(predict(dummy_cr.mod, newdata = data.frame(cue_range))))}
# fit spline function to predicted conversion rate. This increases processing speed
cr_fun <- splinefun(cbind(cue_range, cr_trans))
return(cr_fun)
}
# get dataframe of all permutation of parameter values and their position
par.df <- expand.grid(n = c(1,2,3,4), par = par_seq)
## paste0 to get id
par.df$id <- paste0(par.df$n, "_", par.df$par)
# substitute each value within the 4 parameters with par_seq (generate all iterations)
changed_par <- mapply(function(x, y){
## define original parameter
par_trans <- rep(-0.3665129,4) # number needed to start cr = 0.5 at cue range = 0
## change according to df
par_trans[[x]] <- y
return(par_trans)
}, x = par.df$n, y = par.df$par)
# convert matrix (each column) into a list of parameters
par.ls <- lapply(seq_len(ncol(changed_par)), function(i) changed_par[,i])
#get a list of splines form the transformed parameter lists
spline.ls <- lapply(par.ls, function(x){
get_spline(par = x, cue_range = cue_range)
})
# convert spline to dataframe
spline_int.ls <- mapply(function(x, y){
data.frame(cue = cue_range, cr = x(cue_range), group = y)},
x = spline.ls, y = par.df$id)
# convert to df.ls
df.ls <- lapply(seq_len(ncol(spline_int.ls)), function(i){
df <- spline_int.ls[,i]
df_cat <- data.frame(cbind(
cue = as.numeric(df$cue),
cr = as.numeric(df$cr),
group = df$group))
return(df_cat)
} )
res <- do.call(rbind, df.ls)
return(res)
}
exp_spline <- spline_par(par_seq = c(seq(-1,1,0.1), seq(-10,10,1), seq(-100,100,10),seq(-10000,10000,100)), cue_range = seq(0, 100, by = 1),
mode = "exp")
# process data. add coefficient name and get parameter values
exp_spline2 <- exp_spline %>%
mutate(n = paste("Coefficient", gsub("_.*", "", group)),
par = gsub("*._", "", group)) %>%
distinct(n, par, cue, .keep_all = T)
exp_spline2$par <- as.numeric(exp_spline2$par)
exp_spline2$cue <- as.numeric(exp_spline2$cue)
exp_spline2$cr <- as.numeric(exp_spline2$cr)
# get reference point at which difference is calculated. Here, for a given parameter alteration and cue value, we set the cr when parameter=0.5 as an arbitrary starting point.
exp_spline.ref <- exp_spline2 %>%
filter(par == 0) %>%
distinct(n, par, cue, cr) %>%
select(n, cue, cr_ref = cr)
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.005) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
# get reference point at which difference is calculated. Here, for a given parameter alteration and cue value, we set the cr when parameter=0 as an arbitrary starting point.
exp_spline.ref <- exp_spline2 %>%
filter(par == 0.5) %>%
distinct(n, par, cue, cr) %>%
select(n, cue, cr_ref = cr)
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.005) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
ggsave(here("figures/plos-bio/spline_space.tiff"), units = "px", width = 1500, height = 100, dpi=300, bg = "white")
ggsave(here("figures/plos-bio/spline_space.tiff"), units = "px", width = 1500, height = 1000, dpi=300, bg = "white")
exp_spline <- spline_par(par_seq = c(-0.3665129, seq(-1,1,0.1), seq(-10,10,1), seq(-100,100,10),seq(-10000,10000,100)), cue_range = seq(0, 100, by = 1),
mode = "exp")
# process data. add coefficient name and get parameter values
exp_spline2 <- exp_spline %>%
mutate(n = paste("Coefficient", gsub("_.*", "", group)),
par = gsub("*._", "", group)) %>%
distinct(n, par, cue, .keep_all = T)
exp_spline2$par <- as.numeric(exp_spline2$par)
exp_spline2$cue <- as.numeric(exp_spline2$cue)
exp_spline2$cr <- as.numeric(exp_spline2$cr)
# get reference point at which difference is calculated. Here, for a given parameter alteration and cue value, we set the cr when parameter=0 as an arbitrary starting point.
exp_spline.ref <- exp_spline2 %>%
filter(par ==-0.3665129) %>%
distinct(n, par, cue, cr) %>%
select(n, cue, cr_ref = cr)
exp_spline2 %>%
left_join(exp_spline.ref, by = c("n", "cue")) %>%
mutate(cr_diff = sqrt((cr-cr_ref)^2)) %>%
group_by(n, par) %>%
mutate(cr_diff_avg = sum(cr_diff)/100) %>%
distinct(n, par, .keep_all = T) %>%
group_by(n) %>%
arrange(par, .by_group = T) %>%
mutate(change_cr = cr_diff_avg - lag(cr_diff_avg)) %>% # calculate the rate of change in sd. if sd does not change, means increasing spline coefficient space does not change line
filter(abs(change_cr)> 0.005) %>%
ggplot(aes(x = par, y = cr_diff_avg)) +
geom_line() +
facet_wrap(~n, scales = "free") +
labs(x = "Coefficient value", y = "Average conversion rate difference") +
theme_bw()
ggsave(here("figures/plos-bio/spline_space.tiff"), units = "px", width = 1500, height = 1000, dpi=300, bg = "white")
ln(0.2627156)
log(0.2627156)
load("output.rda")
library("rstan")
library("lattice")
library("gridExtra")
load("output.rda")
