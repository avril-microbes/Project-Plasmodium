geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (30 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept =  13.663812) +
theme_bw()
# plot
ggplot() +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (30 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept =  9.787899) +
theme_bw()
# plot
ggplot() +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (30 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept =  13.663812) +
theme_bw()
# filter out low values
dual_fitness_20.df2 <- dual_fitness_20.df %>% filter(value > 2)
# filter out low values
dual_fitness_20.df2 <- dual_fitness_20.df %>% filter(value > 2)
dual.fitness_20 <- lapply(dual_dyn.ls2, function(x){
# rename column
names(x) <- c("id", "id_b", "label", "label_b", "cue", "cue_b", "time","variable", "value")
df <- x %>% filter(time == 20 & variable == "tau_cum")
return(df)
})
dual_fitness_20.df <- read.csv(here("data/dual_cue_opt4/dual_cue_fitness_20.csv"))
# filter out low values
dual_fitness_20.df2 <- dual_fitness_20.df %>% filter(value > 2)
# left join with si
dual_si_20.fitness <- dual_fitness_20.df2 %>%
left_join(select(si_fitness_20, id, si_fitness = value), by = "id") %>%
left_join(select(si_fitness_20, id_b = id, si_fitness_b = value), by = "id_b") %>%
mutate(si_fitness_max = ifelse(si_fitness > si_fitness_b, si_fitness, si_fitness_b),
max_si_id = ifelse(si_fitness > si_fitness_b, id, id_b),
max_si_label = ifelse(si_fitness > si_fitness_b, label, label_b),
dual_label =  paste(label, "+", label_b))
# plot
dual_20_fitness.pl <- ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899, color = "Maximum fitness") +
theme_bw()
# plot
dual_20_fitness.pl <- ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899, color = "Maximum fitness") +
theme_bw()
ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899, color = "Maximum fitness") +
theme_bw()
# plot
dual_20_fitness.pl <- ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899) +
theme_bw()
ggplot() +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = value, color = "Dual cue"), size = 2.5, alpha = 0.7) +
geom_point(data = dual_si_20.fitness, aes(y = forcats::fct_reorder(dual_label, value), x = si_fitness_max, color= "Best single cue"), size = 2.5, alpha = 0.7) +
labs(x = "Fitness (20 days)", y = "Dual cue", color = "Cue") +
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
geom_vline(xintercept = 9.787899) +
theme_bw()
time_20.cr
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
time_20.cr <- optimParallel(
par = rep(2,4), # start at 0.5x4
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode")
stopCluster(cl)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = model,
control = list(trace = 1, parallelType = 1),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
stopCluster(cl)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
control = list(trace = 1, parallelType = 1),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
stopCluster(cl)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
initialpop = c( 0.985053,   -3.018158,   -0.134980,   -1.782350),
control = list(trace = 1, parallelType = 1),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
control = list(trace = 1, parallelType = 1,
initialpop = c(0.985053,   -3.018158,   -0.134980,   -1.782350)),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
matrix(c(0.985053,   -3.018158,   -0.134980,   -1.782350))
as.matrix(c(0.985053,   -3.018158,   -0.134980,   -1.782350))
matrix(0.985053,   -3.018158,   -0.134980,   -1.782350)
matrix(c(0.985053,   -3.018158,   -0.134980,   -1.782350), nrow = 1)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
control = list(trace = 1, parallelType = 1,
initialpop = matrix(c(0.985053,   -3.018158,   -0.134980,   -1.782350), nrow = 1)),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
control = list(trace = 1, parallelType = 1, itermax = 1000),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
library(dplyr)
library(ggplot2)
library(here)
library(deSolve)
library(crone)
library(optimParallel)
library(doParallel)
library(doRNG)
library(arrow)
library(stringr)
library(parallel)
library(ggpubr)
library(ppso)
library(Rmpi)
library(ggrepel)
source(here("functions/chabaudi_si_clean.R"))
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
max_20.fitness <- DEoptim::DEoptim(fn = chabaudi_si_clean,
control = list(trace = 1, parallelType = 1, itermax = 1000),
lower = c(-1, -100, -1000, -5000),
upper = c(1, 100, 1000, 5000),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
neg = T)
stopCluster(cl)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
time_20.cr <- optimParallel(
par = c(1.000000,   -3.086723,    0.113628 ,  -2.228891), # start at 0.5x4
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode")
stopCluster(cl)
library(dplyr)
library(ggplot2)
library(here)
library(deSolve)
library(crone)
library(optimParallel)
library(doParallel)
library(doRNG)
library(arrow)
library(stringr)
library(parallel)
library(ggpubr)
library(ppso)
library(Rmpi)
library(dplyr)
library(ggplot2)
library(here)
library(deSolve)
library(crone)
library(optimParallel)
library(doParallel)
library(doRNG)
library(arrow)
library(stringr)
library(parallel)
library(ggpubr)
library(ppso)
library(Rmpi)
parameters_tsukushi <- c(R1 = 8.89*(10^6), # slightly higher
lambda = 3.7*(10^5),
mu = 0.025,
p = 8*(10^-6), # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
I_range_none <- seq(0, 6*(10^6), by = (6*(10^6))/500)
I_range_log <- seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/500)
G_range_none <- seq(0, 6*(10^4), by = (6*(10^4))/500)
G_range_log <- seq(0, log10(6*(10^4)), by = (log10(6*(10^4)))/500)
R_range_log <- seq(log10(10^6), log10(10^7), by = (log10(10^7)-log10(10^6))/5000)
partition_si <- function(df){
# source all functions
source(here("functions/chabaudi_si_clean.R"))
source(here("functions/chabaudi_si_clean_R.R"))
source(here("functions/chabaudi_si_clean_N.R"))
source(here("functions/chabaudi_si_clean_W.R"))
# get parameters
parameters_tsukushi <- c(R1 = 8.89*(10^6), # slightly higher
lambda = 3.7*(10^5),
mu = 0.025,
p = 8*(10^-6), # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
# get all characteristics
cue <- df$cue
log <- ifelse(df$log == "log", "log10", "none")
cue_range <- seq(df$low, df$high, by = df$by)
id <- df$id
# run optimization with static RBC
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
static_R <- optimParallel(
par = rep(0.5,4), # start at 0.5x4
fn = chabaudi_si_clean_R,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  cue_range,
cue = cue,
log_cue = log,
solver = "vode")
# run optimization with no indiscriminant immunity
no_N <- optimParallel(
par = rep(0.5,4), # start at 0.5x4
fn = chabaudi_si_clean_N,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  cue_range,
cue = cue,
log_cue = log,
solver = "vode")
# run simulation with no targeted immunity (W)
no_W <- optimParallel(
par = rep(0.5,4), # start at 0.5x4
fn = chabaudi_si_clean_W,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  cue_range,
cue = cue,
log_cue = log,
solver = "vode")
stopCluster(cl)
# join together all data
res <- cbind(id = id,
cue = cue,
log = log,
fitness_R = static_R$value,
fitness_N = no_N$value,
fitness_W = no_W$value,
var_R1 = static_R$par[[1]],
var_R2 = static_R$par[[2]],
var_R3 = static_R$par[[3]],
var_R4 = static_R$par[[4]],
var_N1 = no_N$par[[1]],
var_N2 = no_N$par[[2]],
var_N3 = no_N$par[[3]],
var_N4 = no_N$par[[4]],
var_W1 = no_W$par[[1]],
var_W2 = no_W$par[[2]],
var_W3 = no_W$par[[3]],
var_W4 = no_W$par[[4]])
write.csv(res, paste0(here("data/partition/si/"), id, "_partition.csv"))
}
partition_si <- function(df){
# source all functions
source(here("functions/chabaudi_si_clean.R"))
source(here("functions/chabaudi_si_clean_R.R"))
source(here("functions/chabaudi_si_clean_N.R"))
source(here("functions/chabaudi_si_clean_W.R"))
# get parameters
parameters_tsukushi <- c(R1 = 8.89*(10^6), # slightly higher
lambda = 3.7*(10^5),
mu = 0.025,
p = 8*(10^-6), # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
# get all characteristics
cue <- df$cue
log <- ifelse(df$log == "log", "log10", "none")
cue_range <- seq(df$low, df$high, by = df$by)
id <- df$id
# run optimization with static RBC
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
static_R <- optimParallel(
par = rep(0.5,4), # start at 0.5x4
fn = chabaudi_si_clean_R,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  cue_range,
cue = cue,
log_cue = log,
solver = "vode")
# run optimization with no indiscriminant immunity
no_N <- optimParallel(
par = rep(0.5,4), # start at 0.5x4
fn = chabaudi_si_clean_N,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  cue_range,
cue = cue,
log_cue = log,
solver = "vode")
# run simulation with no targeted immunity (W)
no_W <- optimParallel(
par = rep(0.5,4), # start at 0.5x4
fn = chabaudi_si_clean_W,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  cue_range,
cue = cue,
log_cue = log,
solver = "vode")
stopCluster(cl)
# join together all data
res <- cbind(id = id,
cue = cue,
log = log,
fitness_R = static_R$value,
fitness_N = no_N$value,
fitness_W = no_W$value,
var_R1 = static_R$par[[1]],
var_R2 = static_R$par[[2]],
var_R3 = static_R$par[[3]],
var_R4 = static_R$par[[4]],
var_N1 = no_N$par[[1]],
var_N2 = no_N$par[[2]],
var_N3 = no_N$par[[3]],
var_N4 = no_N$par[[4]],
var_W1 = no_W$par[[1]],
var_W2 = no_W$par[[2]],
var_W3 = no_W$par[[3]],
var_W4 = no_W$par[[4]])
write.csv(res, paste0(here("data/partition/si/"), id, "_partition.csv"))
}
# import in optimized df
si_opt.df <- read.csv(here("data/si_opt.csv"))
# join with cue_range
cue_range_si.df <- read.csv(here("data/cue_range_si.csv"))
si_opt.df <- si_opt.df %>% left_join(select(cue_range_si.df, low, high, by, id), "id")
# lapply loop
si_opt.ls <- split(si_opt.df, seq(nrow(si_opt.df)))
lapply(si_opt.ls, partition_si)
partition_ci <- function(df){
# get info
limit <- 0.01
time_range <- seq(0, 20, 1e-3)
cue_1 <- df$cue_1
cue_2 <- df$cue_2
log <- ifelse(df$log == "log", "log10", "none")
cue_range <- seq(df$low, df$high, by = df$by)
# perform optimization
## no R
res_R <- co_infection_opt_alt(parameters_cr = rep(0.5, 4),
limit = limit,
model = chabaudi_ci_clean_R,
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
cue_1 = cue_1,
cue_2 = cue_2,
cue_range_1 = cue_range,
cue_range_2 = cue_range,
solver = "vode",
log_cue_1 = log,
log_cue_2 = log)
return(res_R)
## no N
res_N <- co_infection_opt_alt(parameters_cr = rep(0.5, 4),
limit = limit,
model = chabaudi_ci_clean_N,
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
cue_1 = cue_1,
cue_2 = cue_2,
cue_range_1 = cue_range,
cue_range_2 = cue_range,
solver = "vode",
log_cue_1 = log,
log_cue_2 = log)
## no W
res_W <- co_infection_opt_alt(parameters_cr = rep(0.5, 4),
limit = limit,
model = chabaudi_ci_clean_W,
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
cue_1 = cue_1,
cue_2 = cue_2,
cue_range_1 = cue_range,
cue_range_2 = cue_range,
solver = "vode",
log_cue_1 = log,
log_cue_2 = log)
return(list(res_R, res_N, res_W))
}
