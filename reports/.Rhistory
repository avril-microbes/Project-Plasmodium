fitness_difference > 0 ~ total2,
fitness_difference< 0 ~ total1
)) %>%
filter(abs(fitness_difference) > 0.5)
static_dc.pl <- ggplot() +
geom_path(data = static_dc.df3, aes(x= total_winner, y = R, group = id_alt, color = "Winner"), alpha = 0.5, arrow = arrow(type = "closed", angle = 10, length = unit(0.2, "inches"))) +
geom_path(data = static_dc.df3, aes(x= total_loser, y = R, group = id_alt, color = "Loser"),
alpha = 0.5,arrow = arrow(type = "closed", angle = 10, length = unit(0.2, "inches"))) +
labs(color = "Status", x = "Asexual & sexual iRBC", y = "RBC") +
scale_color_manual(values=c("Winner" = "#4575b4","Loser"= "#fc8d59"))  +
theme_bw() +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE, accuracy = 0.1))
# import in invasion dynamics
invasion_dyn.ls <- list.files(path = here("data/ci_invasion_dyn"), pattern = "*.parquet", full.names = T)
invasion_dyn.ls <- lapply(invasion_dyn.ls, read_parquet)
invasion_dc.df <- read_parquet(here("data/disease_curve/invasion_dc.parquet"))
# get winners and losers
invasion_fitness.df <- read.csv(here("data/ci_invasion.csv"))
invasion_dc.df2 <- invasion_dc.df %>%
left_join(invasion_fitness.df, by = c("mut_id", "res_id")) %>%
mutate(
total_winner = case_when(
fitness> 0 ~ total1,
fitness< 0 ~ total2
),
total_loser = case_when(
fitness > 0 ~ total2,
fitness < 0 ~ total1
)) %>%
filter(abs(fitness) > 0.5)
invasion_dc.pl <- ggplot() +
geom_path(data = invasion_dc.df2, aes(x= total_winner, y = R, group = id_alt, color = "Winner"), alpha = 0.5, arrow = arrow(type = "closed", angle = 10, length = unit(0.2, "inches"))) +
geom_path(data = invasion_dc.df2, aes(x= total_loser, y = R, group = id_alt, color = "Loser"),
alpha = 0.5,arrow = arrow(type = "closed", angle = 10, length = unit(0.2, "inches"))) +
labs(color = "Status", x = "Asexual & sexual iRBC", y = "RBC") +
scale_color_manual(values=c("Winner" = "#4575b4","Loser"= "#fc8d59"))  +
theme_bw() +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE, accuracy = 0.1))
static_invasion_area.pl <- ggarrange(static_area.pl, invasion_area.pl, align = "h", common.legend = T)
ggarrange(static_dc.pl, invasion_dc.pl, static_invasion_area.pl, ncol = 3, align = "h", labels = c("E", "F","G"), common.legend = T)
invasion_dc.pl <- ggplot() +
geom_path(data = invasion_dc.df2, aes(x= total_winner, y = R, group = id_alt, color = "Winner"), alpha = 0.5, arrow = arrow(type = "closed", angle = 10, length = unit(0.2, "inches"))) +
geom_path(data = invasion_dc.df2, aes(x= total_loser, y = R, group = id_alt, color = "Loser"),
alpha = 0.5,arrow = arrow(type = "closed", angle = 10, length = unit(0.2, "inches"))) +
labs(color = "Status", x = "Asexual & sexual iRBC", y = "RBC") +
scale_color_manual(values=c("Winner" = "#4575b4","Loser"= "#fc8d59"))  +
theme_bw() +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE, accuracy = 0.1)) %>%
theme(legend.position = "none")
ggarrange(static_dc.pl, invasion_dc.pl, static_invasion_area.pl, ncol = 3, align = "h", labels = c("E", "F","G"))
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 1100, scale = 1.4, dpi=300, compression = "lzw")
ggarrange(static_dc.pl, invasion_dc.pl, static_invasion_area.pl, ncol = 3, align = "h", labels = c("E", "F","G"), widths = c(1, 1.5))
ggarrange(static_dc.pl, invasion_dc.pl, static_invasion_area.pl, ncol = 3, align = "h", labels = c("E", "F","G"), widths = c(1, 1.5))
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 1100, scale = 1.4, dpi=300, compression = "lzw
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 1000, scale = 2.5, dpi=300, compression = "lzw")
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 1000, scale = 2.5, dpi=300, compression = "lzw")
ggarrange(static_dc.pl, invasion_dc.pl, static_invasion_area.pl, ncol = 3, align = "h", labels = c("E", "F","G"), widths = c(1, 1, 1.5))
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 1000, scale = 2.5, dpi=300, compression = "lzw")
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 800, scale = 2.5, dpi=300, compression = "lzw")
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 600, scale = 2.5, dpi=300, compression = "lzw")
static_invasion_dc.pl <- ggarrange(static_dc.pl, invasion_dc.pl,  ncol = 2, align = "h", labels = c("E", "F"), common.legend = T)
static_invasion_dc.pl <- ggarrange(static_dc.pl, invasion_dc.pl,  ncol = 2, align = "h", labels = c("E", "F"), common.legend = T)
ggarrange(static_dc.pl, invasion_dc.pl, static_invasion_area.pl, ncol = 3, align = "h", labels = c("E", "F","G"), widths
c(1, 1, 1.5))
ggarrange(static_invasion_dc.pl, static_invasion_area.pl, ncol = 3, align = "h", labels = c("","G"), widths = c(1, 1.5))
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 600, scale = 2.5, dpi=300, compression = "lzw")
ggarrange(static_invasion_dc.pl, static_invasion_area.pl, ncol = 2, align = "h", labels = c("","G"), widths = c(1, 1.5))
ggarrange(static_invasion_dc.pl, static_invasion_area.pl, ncol = 2, align = "h", labels = c("","G"), widths = c(1, 1.5))
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 600, scale = 2.5, dpi=300, compression = "lzw")
ggarrange(static_invasion_dc.pl, static_invasion_area.pl, ncol = 2, align = "h", labels = c("","G"), widths = c(1, 1.25))
ggarrange(static_invasion_dc.pl, static_invasion_area.pl, ncol = 2, align = "h", labels = c("","G"), widths = c(1, 1.25))
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 500, scale = 2.5, dpi=300, compression = "lzw")
ggarrange(static_invasion_dc.pl, static_invasion_area.pl, ncol = 2, align = "h", labels = c("","G"), widths = c(1, 1.3))
ggarrange(static_invasion_dc.pl, static_invasion_area.pl, ncol = 2, align = "h", labels = c("","G"), widths = c(1, 1.3))
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 550, scale = 2.5, dpi=300, compression = "lzw")
static_invasion_area.pl <- ggarrange(static_area.pl, invasion_area.pl, align = "h", common.legend = T, labels = c("G"))
ggarrange(static_invasion_dc.pl, static_invasion_area.pl, ncol = 2, align = "h", widths = c(1, 1.3))
ggsave(here("figures/plos-bio/disease_curve2.tiff"), units = "px", width = 2250, height = 550, scale = 2.5, dpi=300, compression = "lzw")
dc.pl1 <- ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, ncol = 3, align = "h", labels = c("A", "B", "C"), widths = c(1.1, 0.9, 1.1))
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc.pl1, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h")
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h")
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h", ncol = 4)
ggsave(here("figures/plos-bio/disease_curve1.tiff"), units = "px", width = 2250, height = 600, scale = 2.5, dpi=300, compression = "lzw")
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h", ncol = 4, widths = c(1, 0.9, 1, 1.2))
ggsave(here("figures/plos-bio/disease_curve1.tiff"), units = "px", width = 2250, height = 600, scale = 2.5, dpi=300, compression = "lzw")
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h", ncol = 4, widths = c(1, 0.9, 1, 1.3))
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h", ncol = 4, widths = c(1, 0.9, 1, 1.3))
ggsave(here("figures/plos-bio/disease_curve1.tiff"), units = "px", width = 2250, height = 600, scale = 2.5, dpi=300, compression = "lzw")
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h", ncol = 4, widths = c(1, 0.9, 1, 1.5))
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h", ncol = 4, widths = c(1, 0.9, 1, 1.5))
ggsave(here("figures/plos-bio/disease_curve1.tiff"), units = "px", width = 2250, height = 600, scale = 2.5, dpi=300, compression = "lzw")
dual_dc.pl <- dual_dc.pre +
geom_point(data = dual_dc.high %>% filter(row_number() %% 1000 ==0), aes(x = total, y = R, color = label_alt, shape = label_alt), size = 2) +
geom_path(data = dual_dc.high, aes(x= total, y = R, group = label_alt, color = label_alt), size = 1, arrow = arrow(type = "closed", angle = 10, length = unit(0.2, "inches"))) +
scale_color_manual(values=c( "#4575b4", "#fc8d59", "#fdcb44", "#91bfdb", "black"))  +
theme(legend.position = c(0.85, 0.8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)) +
guides(color = guide_legend(override.aes = list(size = 0.1)))
dual_dc.pre <- ggplot() +
geom_path(data = dual_dc.poor, aes(x= total, y = R, group = label_alt), color = "dark grey", arrow = arrow(type = "closed", angle = 10, length = unit(0.2, "inches"))) +
labs(color = "High-performing\ndual cues", x = "Asexual & sexual iRBC", y = "RBC") +
theme_bw()+ scale_y_continuous(labels = function(x) format(x, scientific = TRUE, accuracy = 0.1)) +
guides(shape = FALSE)
dual_dc.pl <- dual_dc.pre +
geom_point(data = dual_dc.high %>% filter(row_number() %% 1000 ==0), aes(x = total, y = R, color = label_alt, shape = label_alt), size = 2) +
geom_path(data = dual_dc.high, aes(x= total, y = R, group = label_alt, color = label_alt), size = 1, arrow = arrow(type = "closed", angle = 10, length = unit(0.2, "inches"))) +
scale_color_manual(values=c( "#4575b4", "#fc8d59", "#fdcb44", "#91bfdb", "black"))  +
theme(legend.position = c(0.85, 0.8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)) +
guides(color = guide_legend(override.aes = list(size = 0.1)))
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h", ncol = 4, widths = c(1, 0.9, 1, 1.5))
ggarrange(si_dc.pl, ci_dc.pl, dual_dc.pl, dc_area.pl1, labels = c("A", "B", "C", "D"), align = "h", ncol = 4, widths = c(1, 0.9, 1, 1.5))
ggsave(here("figures/plos-bio/disease_curve1.tiff"), units = "px", width = 2250, height = 600, scale = 2.5, dpi=300, compression = "lzw")
library(tidyverse)
library(here)
library(ggplot2)
library(ggpubr)
library(forcats)
library(ggrepel)
library(venn)
# import in list
file.ls <- list.files(here("project-silence_bioinformatics/cargo/cluster"), pattern = "*.txt", full.names = T)
# read
cluster.ls <- lapply(file.ls, read.delim)
# add associated query
cluster.ls[[1]] <- cluster.ls[[1]] %>% mutate(query = "H-NS")
# read
cluster.ls <- lapply(file.ls, read.delim)
# add associated query
cluster.ls[[1]] <- cluster.ls[[1]] %>% mutate(query = "H-NS")
cluster.ls[[2]] <- cluster.ls[[2]] %>% mutate(query = "H-NSx")
cluster.ls[[3]] <- cluster.ls[[3]] %>% mutate(query = "H-NSx and Sfh")
cluster.ls[[4]] <- cluster.ls[[4]] %>% mutate(query = "NAP")
cluster.ls[[5]] <- cluster.ls[[5]] %>% mutate(query = "Sfh")
cluster.ls[[6]] <- cluster.ls[[6]] %>% mutate(query = "StpA")
# bind together
cluster.df <- do.call(rbind, cluster.ls)
# filter by secondary. Pick based on highest predicted host range
cluster_2.df <- cluster.df %>%
group_by(query, secondary_cluster_id) %>%
arrange(match(predicted_host_range_overall_rank, c("multi-phylla", "phylum", "class", "order", "family", "genus", "-"))) %>%
slice_head(n = 1)
# import in list
file.ls <- list.files(here("project-silence_bioinformatics/cargo/cluster"), pattern = "*.txt", full.names = T)
# read
cluster.ls <- lapply(file.ls, read.delim)
cluster.ls
library(dplyr)
library(ggplot2)
library(forcats)
library(here)
library(deSolve)
library(crone)
library(optimParallel)
library(doParallel)
library(doRNG)
library(arrow)
library(stringr)
library(parallel)
library(ggpubr)
# single infection dynamics, reaction norms, and rugs
si_dyn.df <- read_parquet(here("data/si_dyn/si_dyn_30.parquet"))
si_rn.df <- read_parquet(here("data/si_dyn/si_rn.parquet"))
si_rug.df <- read_parquet(here("data/si_dyn/si_rug.parquet"))
# co-infection dynamics, reaction norms, and rugs
ci_dyn.df <- read_parquet(here("data/ci_dyn/ci_dyn.parquet"))
ci_rn.df <- read_parquet(here("data/ci_dyn/ci_rn.parquet"))
ci_rug.df <- read_parquet(here("data/ci_dyn/ci_rug.parquet"))
# import labelling scheme
ez_label <- read.csv(here("data/ez_label.csv"))
# get si_label with ci cue range
si_ci_rug.df <- ci_rug.df %>%
mutate(label_si = case_when(
label %in% c("I", "I1+I2") ~ "I",
label %in% c("I log","I1+I2 log") ~ "I log",
label %in% c("Ig", "Ig1+Ig2") ~ "Ig",
label %in% c("Ig log") ~ "Ig log",
label %in% c("sum", "I+Ig") ~ "I+Ig",
label %in% c("sum log", "I+Ig log") ~ "I+Ig log",
label == "R" ~ "R",
label == "R log" ~ "R log",
label %in% c("G", "G1+G2") ~ "G",
label == "G log" ~ "G log"
))
# get limit for si_rug
si_rug_lim.df <- si_rug.df %>%
filter(time <= 20) %>%
group_by(label)%>%
summarise(min = min(value, na.rm = T)*0.9,
max = max(value, na.rm = T)*1.1) %>%
select(label_si = label, min_si = min, max_si = max)
# filter to restriction conversion rate reaction norm range to cue ranges that appear in rug
## change to Inf/-inf to NA. Note that I am first joining with si rug lim to check which limit is larger, We will go with the cue range that has the largest span
ci_rug_lim.df <- si_ci_rug.df %>%
group_by(label) %>%
mutate(min = min(value, na.rm = T)*0.9,
max = max(value, na.rm = T)*1.1) %>%
distinct(label, .keep_all = T) %>%
select(label, label_si, min, max)
rug_lim.final <- ci_rug_lim.df %>% left_join(si_rug_lim.df, by = "label_si") %>%
mutate(final_min = min(min, min_si),
final_max = max(max, max_si))
# get second rug_lim.final for single infection
rug_lim.final2 <- rug_lim.final %>%
group_by(label_si) %>%
mutate(final_min = min(final_min, na.rm = T),
final_max = max(final_max, na.rm = T))
# filter ci_rn by limit
ci_rn.df2 <- ci_rn.df %>%
left_join(rug_lim.final, by  = "label") %>%
group_by(label) %>%
filter(cue_range <= final_max & cue_range >= final_min)
# get ci label to si rug and filter by limit
si_rn.df2 <- left_join(si_rn.df, select(ez_label, label_si, label_ci), by = c("label" = "label_si")) %>%
left_join(rug_lim.final, by  = c("label_ci" = "label")) %>%
group_by(label_ci) %>%
filter(cue_range <= final_max & cue_range >= final_min) %>%
select(cue_range, cr, label_ci, label_si)
# get ci label to si rug
si_rug.df2 <- select(si_rug.df, value, label_si = label)
# join with ezlabel
ci_rn.df3 <- ci_rn.df2 %>% left_join(ez_label, by = c("label" = "label_ci"))
si_rn.df3 <- si_rn.df2 %>% left_join(ez_label, by = "label_ci")
ci_rug.df3 <- ci_rug.df %>% left_join(ez_label, by = c("label" = "label_ci"))
si_rug.df3 <- si_rug.df2 %>% left_join(ez_label, by = "label_si")
# redo order of cues
ci_rn.df3$label <- factor(ci_rn.df3$label,
levels = c("I", "I log",
"I1+I2", "I1+I2 log",
"Ig", "Ig log",
"I+Ig", "I+Ig log",
"sum", "sum log",
"G", "G log",
"G1+G2", "Ig1+Ig2",
"R", "R log"))
si_rn.df3$label_ci <- factor(si_rn.df3$label_ci,
levels = c("I", "I log",
"I1+I2", "I1+I2 log",
"Ig", "Ig log",
"I+Ig", "I+Ig log",
"sum", "sum log",
"G", "G log",
"G1+G2", "Ig1+Ig2",
"R", "R log"))
ci_rug.df3$label <- factor(ci_rug.df3$label,
levels = c("I", "I log",
"I1+I2", "I1+I2 log",
"Ig", "Ig log",
"I+Ig", "I+Ig log",
"sum", "sum log",
"G", "G log",
"G1+G2", "Ig1+Ig2",
"R", "R log"))
si_rug.df3$label_ci <- factor(si_rug.df3$label_ci,
levels = c("I", "I log",
"I1+I2", "I1+I2 log",
"Ig", "Ig log",
"I+Ig", "I+Ig log",
"sum", "sum log",
"G", "G log",
"G1+G2", "Ig1+Ig2",
"R", "R log"))
# plot
opt_cue_pl.A <- ggplot() +
geom_line(data = ci_rn.df3, aes(x = cue_range, y = cr, color = "Co-infection")) +
geom_line(data = si_rn.df3, aes(x = cue_range, y = cr, color = "Single infection"), linetype = "dashed") +
geom_rug(data = ci_rug.df3, aes(x = value), color = "#4575b4", sides = "t") +
geom_rug(data = si_rug.df3, aes(x = value), color = "#fc8d59", sides = "b") +
facet_wrap(~ez_label, scales = "free_x", ncol = 2) +
theme_bw() +
labs(y = "Conversion rate", x = "Cue range", color = "Infection") +
scale_x_continuous(labels = function(x) format(x, scientific = T),
guide = guide_axis(check.overlap = TRUE)) +
theme(axis.text.x = element_text(size = 7))  +
scale_color_manual(values=c( "#4575b4", "#fc8d59"))
ggsave(here("figures/plos-bio/reaction_norm.png"), width = 7, height = 10)
# get fintess
si_cr.df <- si_dyn.df %>%
filter(time <= 20 & variable == "cr")
# good cue bad cue
si_cue.dv <- si_fitness.df %>%
mutate(classification = case_when(
value > 9.2 ~ "High-performing",
value <= 9.2 ~ "Poor-performing"
))
# get single infection maximum tau_cum for 20 days
si_fitness.df <- si_dyn.df %>%
filter(variable == "tau_cum" & time == 20)
# good cue bad cue
si_cue.dv <- si_fitness.df %>%
mutate(classification = case_when(
value > 9.2 ~ "High-performing",
value <= 9.2 ~ "Poor-performing"
))
# join with classificaiton
si_cr.df2 <- si_cr.df %>%
left_join(select(si_cue.dv, id, classification, fitness_si = value), by = "id") %>%
left_join(ez_label, by = c("id" = "id_si"))
# split into top erforming and poor-performing cues
si_cr.high <- si_cr.df2 %>% filter(classification == "High-performing")
si_cr.poor <- si_cr.df2 %>% filter(classification == "Poor-performing")
# plot poor performing
si_cr.pl1 <- ggplot() +
geom_tile(data = si_cr.poor, aes(x = time, y = forcats::fct_reorder(ez_label_si, fitness_si), fill = value)) +
labs(x = "Time (days)", y = "Low performing\nsingle infection cues", fill = "Conversion rate") +
scale_fill_viridis_c(limits = c(0, 1)) +
xlim(1, 20) +
theme_bw()
# plot high perfomring
si_cr.pl2 <- ggplot() +
geom_tile(data = si_cr.high, aes(x = time, y = forcats::fct_reorder(ez_label_si, fitness_si), fill = value)) +
labs(x = "", y = "High performing\nsingle infection cues", fill = "Conversion rate") +
scale_fill_viridis_c(limits = c(0, 1)) +
xlim(1, 20) +
theme_bw()
ggarrange(si_cr.pl2, si_cr.pl1, common.legend = T)
ggsave(here("poster/time_series_cv.tif"), width = 7, height = 4)
ggsave(here("poster/time_series_cv.png"), width = 7, height = 4)
ggsave(here("poster/time_series_cv.png"), width = 7, height = 3)
si_cr.poor
source(here("functions/chabaudi_si_clean_high.R"))
source(here("functions/chabaudi_si_clean.R"))
source(here("functions/par_to_hm_te.R"))
# dual cue fitness
dual_fitness.df <- read.csv(here("data/dual_cue_opt4/dual_cue_fitness_20.csv"))
## make label and filter out very low fitness
dual_fitness.df <- dual_fitness.df %>%
mutate(temp_label = gsub("log", "log10", label),
temp_label_b = gsub("log", "log10", label_b),
label_final = paste0(temp_label, "+", temp_label_b)) %>%
filter(value > 2)
# get single cue fitness
si_dyn.df <- read_parquet(here("data/si_dyn/si_dyn_30.parquet"))
si_fitness.df <- si_dyn.df %>%
filter(variable == "tau_cum" & time == 20)
# join si and dual cue
dual_si_fitness.df <- dual_fitness.df %>%
left_join(select(si_fitness.df, id, si_fitness = value), by = "id") %>%
left_join(select(si_fitness.df, id_b = id, si_fitness_b = value), by = "id_b") %>%
mutate(si_fitness_max = ifelse(si_fitness > si_fitness_b, si_fitness, si_fitness_b),
dual_label = gsub("log", "log10", paste(label, "+", label_b)))
# best dual cue combo
dual.cr <- chabaudi_si_clean(
parameters_cr = c(4.446192033,	10.97518275,	1.38762817,	23.3059254,	-3.452052371,	-18.0070692,	39.66614226,	-3.545193141,	18.78350799),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(6, 7, by = 1/500),
cue_range_b = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/500),
cue = "R",
cue_b = "I",
log_cue = "log10",
log_cue_b = "log10",
solver = "vode",
dyn = T
)
# when time is used as a cue (high parameter)
time.cr <- chabaudi_si_clean_high(
parameters_cr = c(9.154314,  -7.570829, -22.506638 ,  3.382405 ,-13.453519 ,-17.011485  , 3.678181, -12.851895 ,-26.115158),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, 20, by = 1e-3),
cue = "t",
solver = "vode",
dyn = T)
# when asexual iRBC is used as a cue (high flexibility)
I_high.cr <- chabaudi_si_clean_high(
parameters_cr = c(1.296675,  3.544034 , 4.907484,  2.174249, -3.238309 ,-5.181614 ,-1.645072 , 1.834302 , 1.581011),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
cue = "I",
log_cue = "log10",
solver = "vode",
dyn = T)
# when asexual iRBC is used as a cue (normal flexibility)
I.cr <- chabaudi_si_clean(
parameters_cr = c(5.463558,	2.383948,	-17.757281,	4.571835),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
cue = "I",
log_cue = "log10",
solver = "vode",
dyn = T)
# process
I_high.cr2 <- I_high.cr %>% filter(variable == "cr") %>% mutate(label_new = "I log10 flexible") %>% select(-variable)
I.cr2 <- I.cr %>% filter(variable == "cr") %>% mutate(label_new = "I log10") %>% select(-variable)
time_high.cr2 <- time.cr %>% filter(variable == "cr") %>% mutate(label_new = "Time flexible") %>% select(-variable)
dual.cr2 <- dual.cr %>% filter(variable == "cr") %>% mutate(label_new = "R log10 + I log10") %>% select(-variable)
# combine
dual_cr.df <- rbind(I_high.cr2, I.cr2, time_high.cr2, dual.cr2)
dual_cr.pl <- ggplot() +
geom_line(data = dual_cr.df, aes(color = label_new, x = time, y = value), size = 1) +
geom_point(data = dual_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 2) +
labs(x = "Time (days)", y = "Conversion rate", color = "Cue", shape = "Cue") +
xlim(0, 20) +
scale_color_manual(values = c("#4575b4", "#91bfdb","#fc8d59","#fdcb44")) +
theme_bw() +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 2, byrow = TRUE))
# make heatmap df
R_I.hm <- par_to_hm_te(par = c(4.446192033,	10.97518275,	1.38762817,	23.3059254,	-3.452052371,	-18.0070692,	39.66614226,	-3.545193141,	18.78350799),
cue_range = seq(6,	7, length.out = 500),
cue_range_b = seq(0,	6.77815125, length.out = 500))
# make heatmap df
R_I.hm <- par_to_hm_te(par = c(4.446192033,	10.97518275,	1.38762817,	23.3059254,	-3.452052371,	-18.0070692,	39.66614226,	-3.545193141,	18.78350799),
cue_range = seq(6,	7, length.out = 500),
cue_range_b = seq(0,	6.77815125, length.out = 500))
# process dynamics
R_I.dyn <- dual.cr %>%
tidyr::pivot_wider(names_from = variable, values_from = value) %>%
mutate(log_R = log10(R),
log_I = log10(I))
dual_rn.pl <- ggplot() +
geom_raster(data = R_I.hm, aes(x = cue_range_b, y = cue_range, fill = cr)) +
scale_fill_viridis_c() +
geom_path(data = R_I.dyn, aes(x = log_I, y = log_R), color = "white", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = R_I.dyn %>% filter(row_number() %% 1000 == 1 & time <= 20), aes(x = log_I, y = log_R), color = "white") +
xlim(0.99*min(hablar::s(R_I.dyn$log_I), na.rm = T), 1.01* max(hablar::s(R_I.dyn$log_I), na.rm = T)) +
ylim(0.99*min(hablar::s(R_I.dyn$log_R), na.rm = T),1.01* max(hablar::s(R_I.dyn$log_R), na.rm = T)) +
labs(y = "RBC log10", x = "Asexual iRBC log10", fill = "Conversion rate") +
theme_dark()
ggarrange(dual_cr.pl, dual_rn.pl)
ggarrange(dual_cr.pl, dual_rn.pl, align = "h")
ggarrange(dual_cr.pl, dual_rn.pl, align = "h", widths = c(1, 1.5))
ggsave(here("poster/dual_cue.png"), width = 7, height = 4)
ggsave(here("poster/dual_cue.png"), width = 7, height = 3)
ggarrange(si_cr.pl2, si_cr.pl1, common.legend = T, ncol = 1, nrow = 2)
ggsave(here("poster/time_series_cv.png"), width = 7, height = 4)
dual_cr.pl2 <- ggplot() +
geom_line(data = dual_cr.df, aes(color = label_new, x = time, y = value), size = 1) +
geom_point(data = dual_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 2) +
labs(x = "Time (days)", y = "Conversion rate", color = "Cue", shape = "Cue") +
xlim(0, 20) +
scale_color_manual(values = c("#4575b4", "#91bfdb","#fc8d59","#fdcb44")) +
theme_bw() +
guides(color = guide_legend(nrow = 2, byrow = TRUE))
ggarrange(dual_cr.pl2, dual_rn.pl, align = "h", widths = c(1, 1.5))
dual_cr.pl2 <- ggplot() +
geom_line(data = dual_cr.df, aes(color = label_new, x = time, y = value), size = 1) +
geom_point(data = dual_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 2) +
labs(x = "Time (days)", y = "Conversion rate", color = "Cue", shape = "Cue") +
xlim(0, 20) +
scale_color_manual(values = c("#4575b4", "#91bfdb","#fc8d59","#fdcb44")) +
theme_bw()
ggarrange(dual_cr.pl2, dual_rn.pl, align = "h", widths = c(1, 1.5))
ggsave(here("poster/dual_cue.png"), width = 7, height = 4)
dual_rn.pl2 <- ggplot() +
geom_raster(data = R_I.hm, aes(x = cue_range_b, y = cue_range, fill = cr)) +
scale_fill_viridis_c() +
geom_path(data = R_I.dyn, aes(x = log_I, y = log_R), color = "white", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = R_I.dyn %>% filter(row_number() %% 1000 == 1 & time <= 20), aes(x = log_I, y = log_R), color = "white") +
xlim(0.99*min(hablar::s(R_I.dyn$log_I), na.rm = T), 1.01* max(hablar::s(R_I.dyn$log_I), na.rm = T)) +
ylim(0.99*min(hablar::s(R_I.dyn$log_R), na.rm = T),1.01* max(hablar::s(R_I.dyn$log_R), na.rm = T)) +
labs(y = "RBC log10", x = "Asexual iRBC log10", fill = "Conversion rate") +
theme_dark() +
theme(legend.position = "none")
ggarrange(dual_cr.pl2, dual_rn.pl2, align = "h", widths = c(1, 1.5))
ggarrange(dual_cr.pl2, dual_rn.pl2, align = "h")
ggsave(here("poster/dual_cue.png"), width = 7, height = 4)
ggarrange(dual_cr.pl2, dual_rn.pl2, align = "h", widths = c(1.5, 1))
ggsave(here("poster/dual_cue.png"), width = 7, height = 4)
ggsave(here("poster/dual_cue.png"), width = 7, height = 3)
ggsave(here("poster/dual_cue.png"), width = 7, height = 3)
dual_rn.pl2 <- ggplot() +
geom_raster(data = R_I.hm, aes(x = cue_range_b, y = cue_range, fill = cr)) +
scale_fill_viridis_c() +
geom_path(data = R_I.dyn, aes(x = log_I, y = log_R), color = "white", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = R_I.dyn %>% filter(row_number() %% 1000 == 1 & time <= 20), aes(x = log_I, y = log_R), color = "white") +
xlim(0.99*min(hablar::s(R_I.dyn$log_I), na.rm = T), 1.01* max(hablar::s(R_I.dyn$log_I), na.rm = T)) +
ylim(0.99*min(hablar::s(R_I.dyn$log_R), na.rm = T),1.01* max(hablar::s(R_I.dyn$log_R), na.rm = T)) +
labs(y = "RBC log10", x = "Asexual iRBC log10", fill = "Conversion rate") +
theme_dark() +
+ theme(legend.position="top")
dual_rn.pl2 <- ggplot() +
geom_raster(data = R_I.hm, aes(x = cue_range_b, y = cue_range, fill = cr)) +
scale_fill_viridis_c() +
geom_path(data = R_I.dyn, aes(x = log_I, y = log_R), color = "white", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = R_I.dyn %>% filter(row_number() %% 1000 == 1 & time <= 20), aes(x = log_I, y = log_R), color = "white") +
xlim(0.99*min(hablar::s(R_I.dyn$log_I), na.rm = T), 1.01* max(hablar::s(R_I.dyn$log_I), na.rm = T)) +
ylim(0.99*min(hablar::s(R_I.dyn$log_R), na.rm = T),1.01* max(hablar::s(R_I.dyn$log_R), na.rm = T)) +
labs(y = "RBC log10", x = "Asexual iRBC log10", fill = "Conversion rate") +
theme_dark()
dual_rn.pl2 <- ggplot() +
geom_raster(data = R_I.hm, aes(x = cue_range_b, y = cue_range, fill = cr)) +
scale_fill_viridis_c() +
geom_path(data = R_I.dyn, aes(x = log_I, y = log_R), color = "white", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = R_I.dyn %>% filter(row_number() %% 1000 == 1 & time <= 20), aes(x = log_I, y = log_R), color = "white") +
xlim(0.99*min(hablar::s(R_I.dyn$log_I), na.rm = T), 1.01* max(hablar::s(R_I.dyn$log_I), na.rm = T)) +
ylim(0.99*min(hablar::s(R_I.dyn$log_R), na.rm = T),1.01* max(hablar::s(R_I.dyn$log_R), na.rm = T)) +
labs(y = "RBC log10", x = "Asexual iRBC log10", fill = "Conversion rate") +
theme_dark() + theme(legend.position="top")
dual_cr.pl2 <- ggplot() +
geom_line(data = dual_cr.df, aes(color = label_new, x = time, y = value), size = 1) +
geom_point(data = dual_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 2) +
labs(x = "Time (days)", y = "Conversion rate", color = "Cue", shape = "Cue") +
xlim(0, 20) +
scale_color_manual(values = c("#4575b4", "#91bfdb","#fc8d59","#fdcb44")) +
theme_bw() +
theme(legend.position="top") +
guides(color = guide_legend(nrow = 2, byrow = TRUE))
ggarrange(dual_cr.pl2, dual_rn.pl2, align = "h", widths = c(1.5, 1))
ggarrange(dual_cr.pl2, dual_rn.pl2, align = "h", widths = c(1.25, 1))
ggsave(here("poster/dual_cue.png"), width = 7, height = 3)
ggsave(here("poster/dual_cue.png"), width = 7, height = 4)
ggsave(here("poster/dual_cue.png"), width = 7, height = 4)
