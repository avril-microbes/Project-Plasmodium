time_range <- seq(0, 20, by = 1e-3)
# run monte-carlo
monte_carlo(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
return(mc_res)
}
mc_run <- function(par, cue, cue_range, log, seed){
# run 5 iterations each with 1000
cl <- makeCluster(8)
registerDoParallel(cl)
registerDoRNG(seed)
mc_res <- foreach(i= 1:1000, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr", "crone", "here")) %dorng% {
# source shit
source(here("functions/monte_carlo.R"))
source(here("functions/chabaudi_si_sto.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
# run monte-carlo
monte_carlo(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
return(mc_res)
}
mc_G_log.1 <- mc_run(par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10",
seed = 137)
mc_run <- function(par, cue, cue_range, log, seed){
# run 5 iterations each with 1000
cl <- makeCluster(8)
registerDoParallel(cl)
registerDoRNG(seed)
mc_res <- foreach(i= 1:1000, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr", "crone", "here")) %dorng% {
# source shit
source(here("functions/monte_carlo.R"))
source(here("functions/chabaudi_si_sto.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
# run monte-carlo
monte_carlo(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
# process data
fitness.ls <- mclapply(mc_res, function(x){
fitness <- x %>%
dplyr::filter(variable == "tau_cum") %>%
dplyr::summarise(max_fitness = max(value))
return(fitness)
})
## get fitness.df
fitness.df <- do.call(rbind, fitness.ls)
# produce output for convergence of fitness
## get cum sum of fitness
fitness.sum <- cumsum(fitness.df$max_fitness)
## get average fitness across iteration
fitness.avg <- fitness.sum/(1:length(fitness.sum))
# get cue vs dynamics
## produce wide df for plotting cue vs cr graph
df_wide.ls <- mclapply(mc_res, function(x){
## convert to wide
wide <- tidyr::pivot_wider(x, names_from = variable, values_from = value, id_cols = c(time))
## get every 10th row
wide_filtered <- wide %>% dplyr::filter(row_number() %% 10 == 1)
return(wide_filtered)
})
# get wide list
df_wide.df <- dplyr::bind_rows(df_wide.ls, .id = "id")
# return output
return(list(fitness.df, fitness.avg, df_wide.df))
}
mc_run <- function(par, cue, cue_range, log, seed){
# run 5 iterations each with 1000
cl <- makeCluster(8)
registerDoParallel(cl)
registerDoRNG(seed)
mc_res <- foreach(i= 1:10, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr", "crone", "here")) %dorng% {
# source shit
source(here("functions/monte_carlo.R"))
source(here("functions/chabaudi_si_sto.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
# run monte-carlo
monte_carlo(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
# process data
fitness.ls <- mclapply(mc_res, function(x){
fitness <- x %>%
dplyr::filter(variable == "tau_cum") %>%
dplyr::summarise(max_fitness = max(value))
return(fitness)
})
## get fitness.df
fitness.df <- do.call(rbind, fitness.ls)
# produce output for convergence of fitness
## get cum sum of fitness
fitness.sum <- cumsum(fitness.df$max_fitness)
## get average fitness across iteration
fitness.avg <- fitness.sum/(1:length(fitness.sum))
# get cue vs dynamics
## produce wide df for plotting cue vs cr graph
df_wide.ls <- mclapply(mc_res, function(x){
## convert to wide
wide <- tidyr::pivot_wider(x, names_from = variable, values_from = value, id_cols = c(time))
## get every 10th row
wide_filtered <- wide %>% dplyr::filter(row_number() %% 10 == 1)
return(wide_filtered)
})
# get wide list
df_wide.df <- dplyr::bind_rows(df_wide.ls, .id = "id")
# return output
return(list(fitness.df, fitness.avg, df_wide.df))
}
mc_G_log.1 <- mc_run(par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10",
seed = 137)
mc_G_log.1
mc_run <- function(par, cue, cue_range, log, seed){
# run 5 iterations each with 1000
cl <- makeCluster(8)
registerDoParallel(cl)
registerDoRNG(seed)
mc_res <- foreach(i= 1:1000, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr", "crone", "here")) %dorng% {
# source shit
source(here("functions/monte_carlo.R"))
source(here("functions/chabaudi_si_sto.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
# run monte-carlo
monte_carlo(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
# process data
fitness.ls <- mclapply(mc_res, function(x){
fitness <- x %>%
dplyr::filter(variable == "tau_cum") %>%
dplyr::summarise(max_fitness = max(value))
return(fitness)
})
## get fitness.df
fitness.df <- do.call(rbind, fitness.ls)
# produce output for convergence of fitness
## get cum sum of fitness
fitness.sum <- cumsum(fitness.df$max_fitness)
## get average fitness across iteration
fitness.avg <- fitness.sum/(1:length(fitness.sum))
# get cue vs dynamics
## produce wide df for plotting cue vs cr graph
df_wide.ls <- mclapply(mc_res, function(x){
## convert to wide
wide <- tidyr::pivot_wider(x, names_from = variable, values_from = value, id_cols = c(time))
## get every 10th row
wide_filtered <- wide %>% dplyr::filter(row_number() %% 10 == 1)
return(wide_filtered)
})
# get wide list
df_wide.df <- dplyr::bind_rows(df_wide.ls, .id = "id")
# return output
return(list(fitness.df, fitness.avg, df_wide.df))
}
mc_G_log.1 <- mc_run(par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10",
seed = 137)
mc_G_log.1
mc_G_log.2 <- mc_run(par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10",
seed = 138)
mc_G_log.2
mc_G_log.1
mc_G_log.2
mc_G_log.3 <- mc_run(par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10",
seed = 139)
mc_G_log.4 <- mc_run(par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10",
seed = 140)
mc_G_log.5 <- mc_run(par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10",
seed = 141)
mc_G_log.5
mc_G_log.5[[`]]
mc_G_log.5[[1]]
mc_G_log.5[[1]]
mc_G_log.5[[1]]
# get fitness
mc_G_log.fitness <- rbind(mc_G_log.1[[1]], mc_G_log.2[[1]], mc_G_log.3[[1]], mc_G_log.4[[1]], mc_G_log.5[[1]])
mc_G_log.fitness
mc_G_log.1[[1]]
mc_G_log.1[[2]]
mc_G_log.1[[3]]
# get dynamics
mc_G_log.dyn <- rbind(
cbind(mc_G_log.1[[3]], run = 1),
cbind(mc_G_log.2[[3]], run = 2),
cbind(mc_G_log.3[[3]], run = 3),
cbind(mc_G_log.4[[3]], run = 4),
cbind(mc_G_log.5[[3]], run = 5)
)
library(arrow)
write_parquet(here("data/MC/mc_G_log_dyn.parquet"))
write_parquet(mc_G_log.dyn, here("data/MC/mc_G_log_dyn.parquet"))
write.csv(mc_G_log.fitness, here("data/MC/mc_G_log_fitness.csv"))
mc_G_log.dyn <- read_parquet(here("data/MC/mc_G_log_dyn.parquet"))
mc_G_log.dyn
library(here)
library(dplyr)
library(ggplot2)
library(parallel)
library(doParallel)
library(doRNG)
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
mc_run <- function(par, cue, cue_range, log, seed){
# run 5 iterations each with 1000
cl <- makeCluster(8)
registerDoParallel(cl)
registerDoRNG(seed)
mc_res <- foreach(i= 1:1000, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr", "crone", "here")) %dorng% {
# source shit
source(here("functions/monte_carlo.R"))
source(here("functions/chabaudi_si_sto.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
# run monte-carlo
monte_carlo(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
# process data
fitness.ls <- mclapply(mc_res, function(x){
fitness <- x %>%
dplyr::filter(variable == "tau_cum") %>%
dplyr::summarise(max_fitness = max(value))
return(fitness)
})
## get fitness.df
fitness.df <- do.call(rbind, fitness.ls)
# get cue vs dynamics
## produce wide df for plotting cue vs cr graph
df_wide.ls <- mclapply(mc_res, function(x){
## convert to wide
wide <- tidyr::pivot_wider(x, names_from = variable, values_from = value, id_cols = c(time))
## get every 10th row
wide_filtered <- wide %>% dplyr::filter(row_number() %% 10 == 1)
return(wide_filtered)
})
# get wide list
df_wide.df <- dplyr::bind_rows(df_wide.ls, .id = "id")
# return output
return(list(fitness.df, df_wide.df))
}
mc_five(par, cue, cue_range, log){
mc_five(par, cue, cue_range, log){
mc_five <- function(par, cue, cue_range, log){
mc.1 <- mc_run(par = par,
cue = cue,
cue_range = cue_range,
log = log,
seed = 137)
mc.2 <- mc_run(par = par,
cue = cue,
cue_range = cue_range,
log = log,
seed = 138)
mc.3 <- mc_run(par = par,
cue = cue,
cue_range = cue_range,
log = log,
seed = 139)
mc.4 <- mc_run(par = par,
cue = cue,
cue_range = cue_range,
log = log,
seed = 140)
mc.5 <- mc_run(par = par,
cue = cue,
cue_range = cue_range,
log = log,
seed = 141)
# get fitness
fitness <- rbind(mc.1[[1]],mc.2[[1]],mc.3[[1]],mc.4[[1]],mc.5[[1]])
# produce output for convergence of fitness
## get cum sum of fitness
fitness.sum <- cumsum(fitness)
## get average fitness across iteration
fitness.avg <- fitness.sum/(1:length(fitness.sum))
# get wide data
dyn <- rbind(
cbind(mc.1[[2]], run = 1),
cbind(mc.2[[2]], run = 2),
cbind(mc.3[[2]], run = 3),
cbind(mc.4[[2]], run = 4),
cbind(mc.5[[2]], run = 5))
return(list(fitness, fitness.avg, dyn))
}
mc_G.res <- mc_five(par = c(4.111631e-02, -1.426712e+01, 1.975708e+02, -2.017394e+03),
cue = "G",
cue_range = seq(0, 10^5, by = (10^5)/5000),
log= "none")
mc_G.res
library(arrow)
write_parquet(mc_G.res[[3]], here("data/MC/mc_G_dyn.parquet"))
write.csv(mc_G.res[[1]], "data/MC/mc_G_fitness.csv")
write.csv(mc_G.res[[1]], here("data/MC/mc_G_fitness.csv"))
library(idpr)
library(Biostrings)
library(here)
library(ggplot2)
library(here)
library(dplyr)
library(ggplot2)
library(parallel)
library(doParallel)
library(doRNG)
library(arrow)
library(ggpubr)
library(ggthemes)
# read in dymamics
mc_G_log.dyn <- read_parquet(here("data/MC/mc_G_log_dyn.parquet"))
