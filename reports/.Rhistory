ci_dynamics %>%
dplyr::filter(variable_alt == "I" | variable_alt == "Ig") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_I = sum(value)) %>%
dplyr::filter(time <= 8.581) %>%
dplyr::select(sum_I)
mean(c(1,2,3))
## average I during growth and decline
growth_I <- ci_dynamics %>%
dplyr::filter(variable_alt == "I" | variable_alt == "Ig") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_I = sum(value)) %>%
dplyr::filter(time <= 8.581)
mean(growth_I$sum_I)
decline_I <- ci_dynamics %>%
dplyr::filter(variable_alt == "I" | variable_alt == "Ig") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_I = sum(value)) %>%
dplyr::filter(time >= 8.581)
mean(decline_I)
mean(decline_I$sum_I)
## peak timing
ci_dynamics %>%
dplyr::filter(variable_alt == "I" | variable_alt == "Ig") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_I = sum(value)) %>%
dplyr::arrange(desc(sum_I)) # 8.581
install.packages("caTools")
library(caTools)
# signal to noise ratio
ci_dynamics %>%
dplyr::filter(variable_alt == "I" | variable_alt == "Ig") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_I = sum(value)) %>%
runmean(sum_I, k = 1000)
# signal to noise ratio
ci_I <- ci_dynamics %>%
dplyr::filter(variable_alt == "I" | variable_alt == "Ig") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_I = sum(value))
ci_I
runmean(ci_I$sum_I, 1000)
plot(runmean(ci_I$sum_I, 1000))
plot(runmean(ci_I$sum_I, 100))
plot(runmean(ci_I$sum_I, 1000))
plot(runmean(ci_I$sum_I, 1000)/runsd(ci_I$sum_I, 1000))
plot(runmean(ci_I$sum_I, 1000)/runsd(ci_I$sum_I, 1000))
plot(runmean(ci_I$sum_I, 100)/runsd(ci_I$sum_I, 100))
ci_G <- ci_dynamics %>%
dplyr::filter(variable_alt == "G")
plot(runmean(ci_I$sum_I, 1000)/runsd(ci_I$sum_I, 1000))
plot(runmean(ci_I$sum_G, 1000)/runsd(ci_I$sum_G, 1000))
ci_G <- ci_dynamics %>%
dplyr::filter(variable_alt == "G")
plot(runmean(ci_I$sum_I, 1000)/runsd(ci_I$sum_I, 1000))
plot(runmean(ci_G$value, 1000)/runsd(ci_G$sum_value, 1000))
ci_G
plot(runmean(ci_I$sum_I, 1000)/runsd(ci_I$sum_I, 1000))
plot(runmean(ci_G$value, 1000)/runsd(ci_G$value, 1000))
plot(runmean(ci_G$value, 1000))
plot(runmean(ci_G$value, 100))
ci_G <- ci_dynamics %>%
dplyr::filter(variable_alt == "G") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value))
plot(runmean(ci_I$sum_I, 1000)/runsd(ci_I$sum_I, 1000))
plot(runmean(ci_G$sum_G, 1000)/runsd(ci_G$sum_G, 1000))
ci_G
ci_G <- ci_dynamics %>%
dplyr::filter(variable_alt == "G") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value)) %>%
dplyr::mutate(G_mean = runmean(sum_G, 1000),
G_sd = runsd(sum_G, 1000)) %>%
dplyr::mutate(SNR = G_mean/G_sd) %>%
ggplot() +
geom_line(aes(x = time, y = SNR))
ci_dynamics %>%
dplyr::filter(variable_alt == "G") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value)) %>%
dplyr::mutate(G_mean = runmean(sum_G, 1000),
G_sd = runsd(sum_G, 1000)) %>%
dplyr::mutate(SNR = G_mean/G_sd) %>%
ggplot() +
geom_line(aes(x = time, y = SNR))
ci_dynamics %>%
dplyr::filter(variable_alt == "G") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value)) %>%
dplyr::mutate(G_mean = runmean(sum_G, 1000),
G_sd = runsd(sum_G, 1000)) %>%
dplyr::mutate(SNR = G_mean/G_sd) %>%
ggplot() +
geom_line(aes(x = time, y = SNR))
ci_dynamics %>%
dplyr::filter(variable_alt == "G") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value))
geom_line(aes(x = time, y = sum_G)
geom_line(aes(x = time, y = sum_G)
ci_dynamics %>%
dplyr::filter(variable_alt == "G") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value)) %>%
dplyr::mutate(G_mean = runmean(sum_G, 1000),
G_sd = runsd(sum_G, 1000)) %>%
dplyr::mutate(SNR = G_mean/G_sd) %>%
ggplot() +
geom_line(aes(x = time, y = sum_G))
ci_dynamics %>%
dplyr::filter(variable_alt == "G") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value)) %>%
dplyr::mutate(G_mean = runmean(sum_G, 1000),
G_sd = runsd(sum_G, 1000)) %>%
dplyr::mutate(SNR = G_mean/G_sd) %>%
ggplot() +
geom_line(aes(x = time, y = SNR))
evaluate_cue <- function(cue, smooth_range) {
# get filtered database
df <- ci_dynamics %>%
dplyr::filter(variable_alt == cue) %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_cue = sum(value))
# state differentiation (normalized value)
## get max value for noramlzation
max_cue <- max(df$sum_cue)
min_cue <- min(df$sum_cue)
## normalization
df_norm <- df %>%
dplyr::mutate(cue_norm = (sum_cue - min_cue)/(max_cue - min_cue))
## get average growth value
df.growth <- df_norm %>% dplyr::filter(time <= 8.581)
df.decline <- df_norm %>% dplyr::filter(time >= 8.581)
## get average growth and decline values
growth <- mean(df.growth$cue_norm)
decline <- mean(df.decline$cue_norm)
# calculate SNR (smoothed mean / smoothed standard deviation)
SNR <- df %>%
dplyr::mutate(cue_mean = runmean(sum_cue, smooth_range),
cue_sd = runsd(sum_cue, smooth_range)) %>%
dplyr::mutate(SNR = cue_mean/cue_sd)
SNR_avg <- mean(SNR$SNR, na.rm = TRUE)
# return interesting values
res <- c(growth, decline, SNR_avg)
}
test <- lapply(c("I", "G"), evaluate_cue)
evaluate_cue <- function(cue) {
# get filtered database
df <- ci_dynamics %>%
dplyr::filter(variable_alt == cue) %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_cue = sum(value))
# state differentiation (normalized value)
## get max value for noramlzation
max_cue <- max(df$sum_cue)
min_cue <- min(df$sum_cue)
## normalization
df_norm <- df %>%
dplyr::mutate(cue_norm = (sum_cue - min_cue)/(max_cue - min_cue))
## get average growth value
df.growth <- df_norm %>% dplyr::filter(time <= 8.581)
df.decline <- df_norm %>% dplyr::filter(time >= 8.581)
## get average growth and decline values
growth <- mean(df.growth$cue_norm)
decline <- mean(df.decline$cue_norm)
# calculate SNR (smoothed mean / smoothed standard deviation)
SNR <- df %>%
dplyr::mutate(cue_mean = runmean(sum_cue, 1000),
cue_sd = runsd(sum_cue, 1000)) %>%
dplyr::mutate(SNR = cue_mean/cue_sd)
SNR_avg <- mean(SNR$SNR, na.rm = TRUE)
# return interesting values
res <- c(growth, decline, SNR_avg)
}
test <- lapply(c("I", "G"), evaluate_cue)
test
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "G") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value)) %>%
dplyr::mutate(G_mean = runmean(sum_G, 1000),
G_sd = runsd(sum_G, 1000)) %>%
dplyr::mutate(SNR = G_mean/G_sd)
test$SNR
average(SNR)
mean(SNR)
mean(test$SNR)
mean(test$SNR, na.rm = T)
mean(test$SNR, na.rm = F)
mean(test$SNR, na.rm = T)
plot(test$SNR)
test$SNR
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "G") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value)) %>%
dplyr::mutate(G_mean = runmean(sum_G, 1000),
G_sd = runsd(sum_G, 1000)) %>%
dplyr::mutate(SNR = G_mean/G_sd) %>%
na.omit()
test$SNR
mean(!is.finite(test$SNR), na.rm = T)
evaluate_cue <- function(cue) {
# get filtered database
df <- ci_dynamics %>%
dplyr::filter(variable_alt == cue) %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_cue = sum(value))
# state differentiation (normalized value)
## get max value for noramlzation
max_cue <- max(df$sum_cue)
min_cue <- min(df$sum_cue)
## normalization
df_norm <- df %>%
dplyr::mutate(cue_norm = (sum_cue - min_cue)/(max_cue - min_cue))
## get average growth value
df.growth <- df_norm %>% dplyr::filter(time <= 8.581)
df.decline <- df_norm %>% dplyr::filter(time >= 8.581)
## get average growth and decline values
growth <- mean(df.growth$cue_norm)
decline <- mean(df.decline$cue_norm)
# calculate SNR (smoothed mean / smoothed standard deviation)
SNR_df <- df %>%
dplyr::mutate(cue_mean = runmean(sum_cue, 1000),
cue_sd = runsd(sum_cue, 1000)) %>%
dplyr::mutate(SNR = cue_mean/cue_sd)
SNR_avg <- mean(!is.finite(SNR_df$SNR), na.rm = TRUE)
# return interesting values
res <- c(growth, decline, SNR_avg)
}
test <- lapply(c("I", "G"), evaluate_cue)
test
evaluate_cue <- function(cue) {
# get filtered database
df <- ci_dynamics %>%
dplyr::filter(variable_alt == cue) %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_cue = sum(value))
# state differentiation (normalized value)
## get max value for noramlzation
max_cue <- max(df$sum_cue)
min_cue <- min(df$sum_cue)
## normalization
df_norm <- df %>%
dplyr::mutate(cue_norm = (sum_cue - min_cue)/(max_cue - min_cue))
## get average growth value
df.growth <- df_norm %>% dplyr::filter(time <= 8.581)
df.decline <- df_norm %>% dplyr::filter(time >= 8.581)
## get average growth and decline values
growth <- mean(df.growth$cue_norm)
decline <- mean(df.decline$cue_norm)
# calculate SNR (smoothed mean / smoothed standard deviation)
SNR_df <- df %>%
dplyr::mutate(cue_mean = runmean(sum_cue, 1000),
cue_sd = runsd(sum_cue, 1000)) %>%
dplyr::mutate(SNR = cue_mean/cue_sd) %>%
na.omit()
SNR_avg <- mean(!is.finite(SNR_df$SNR), na.rm = TRUE)
# return interesting values
res <- c(growth, decline, SNR_avg)
}
test <- lapply(c("I", "G"), evaluate_cue)
test <- lapply(c("I", "G"), evaluate_cue)
test
evaluate_cue <- function(cue) {
# get filtered database
df <- ci_dynamics %>%
dplyr::filter(variable_alt == cue) %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_cue = sum(value))
# state differentiation (normalized value)
## get max value for noramlzation
max_cue <- max(df$sum_cue)
min_cue <- min(df$sum_cue)
## normalization
df_norm <- df %>%
dplyr::mutate(cue_norm = (sum_cue - min_cue)/(max_cue - min_cue))
## get average growth value
df.growth <- df_norm %>% dplyr::filter(time <= 8.581)
df.decline <- df_norm %>% dplyr::filter(time >= 8.581)
## get average growth and decline values
growth <- mean(df.growth$cue_norm)
decline <- mean(df.decline$cue_norm)
# calculate SNR (smoothed mean / smoothed standard deviation)
SNR_df <- df %>%
dplyr::mutate(cue_mean = runmean(sum_cue, 1000),
cue_sd = runsd(sum_cue, 1000)) %>%
dplyr::mutate(SNR = cue_mean/cue_sd) %>%
na.omit()
SNR_avg <- mean(is.finite(SNR_df$SNR), na.rm = TRUE)
# return interesting values
res <- c(growth, decline, SNR_avg)
}
test <- lapply(c("I", "G"), evaluate_cue)
test
evaluate_cue <- function(cue) {
# get filtered database
df <- ci_dynamics %>%
dplyr::filter(variable_alt == cue) %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_cue = sum(value))
# state differentiation (normalized value)
## get max value for noramlzation
max_cue <- max(df$sum_cue)
min_cue <- min(df$sum_cue)
## normalization
df_norm <- df %>%
dplyr::mutate(cue_norm = (sum_cue - min_cue)/(max_cue - min_cue))
## get average growth value
df.growth <- df_norm %>% dplyr::filter(time <= 8.581)
df.decline <- df_norm %>% dplyr::filter(time >= 8.581)
## get average growth and decline values
growth <- mean(df.growth$cue_norm)
decline <- mean(df.decline$cue_norm)
# calculate SNR (smoothed mean / smoothed standard deviation)
SNR_df <- df %>%
dplyr::mutate(cue_mean = runmean(sum_cue, 1000),
cue_sd = runsd(sum_cue, 1000)) %>%
dplyr::mutate(SNR = cue_mean/cue_sd)
SNR_avg <- mean(is.finite(SNR_df$SNR), na.rm = TRUE)
# return interesting values
res <- c(growth, decline, SNR_avg)
}
test <- lapply(c("I", "G"), evaluate_cue)
test <- lapply(c("I", "G"), evaluate_cue)
test
test <- lapply(c("I", "G", "Ig", "M", "Mg"), evaluate_cue)
test
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I") %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_G = sum(value)) %>%
dplyr::mutate(G_mean = runmean(sum_G, 1000),
G_sd = runsd(sum_G, 1000)) %>%
dplyr::mutate(SNR = G_mean/G_sd) %>%
na.omit()
test$SNR
mean(!is.finite(test$SNR), na.rm = T)
mean(!s.finite(test$SNR), na.rm = T)
mean(is.finite(test$SNR), na.rm = T)
test$SNR
mean(test$SNR)
is.finite(test$SNR)
evaluate_cue <- function(cue) {
# get filtered database
df <- ci_dynamics %>%
dplyr::filter(variable_alt == cue) %>%
dplyr::group_by(time) %>%
dplyr::summarise(sum_cue = sum(value))
# state differentiation (normalized value)
## get max value for noramlzation
max_cue <- max(df$sum_cue)
min_cue <- min(df$sum_cue)
## normalization
df_norm <- df %>%
dplyr::mutate(cue_norm = (sum_cue - min_cue)/(max_cue - min_cue))
## get average growth value
df.growth <- df_norm %>% dplyr::filter(time <= 8.581)
df.decline <- df_norm %>% dplyr::filter(time >= 8.581)
## get average growth and decline values
growth <- mean(df.growth$cue_norm)
decline <- mean(df.decline$cue_norm)
# calculate SNR (smoothed mean / smoothed standard deviation)
SNR_df <- df %>%
dplyr::mutate(cue_mean = runmean(sum_cue, 1000),
cue_sd = runsd(sum_cue, 1000)) %>%
dplyr::mutate(SNR = cue_mean/cue_sd)
SNR_avg <- mean(SNR_df$SNR[is.finite(SNR_df$SNR)], na.rm = TRUE)
# return interesting values
res <- c(growth, decline, SNR_avg)
}
test <- lapply(c("I", "G", "Ig", "M", "Mg"), evaluate_cue)
test
test <- lapply(c("I", "G", "Ig", "M", "Mg", "R"), evaluate_cue)
test
# note: all log10 are log10(cue+1)
cue_basic.ls <- lapply(c("I", "log10(I)", "Ig", "log10(Ig)", "I + Ig", "log10(I + Ig)",
"G", "log10(G)",
"M", "log10(M)", "Mg", "log10(Mg)", "M + Mg", "log10(M + Mg)",
"R", "log10(R)"), evaluate_cue) # R and log(R) not used because high SNR
ci_dynamics
ci_dynamics %>%
dplyr::filter(variable == "BIt") %>%
ggplot() +
geom_line(aes(x = time, y = value))
unique(ci_dynamics$variable)
unique(ci_dynamics$variable_alt)
ci_dynamics <- chabaudi_ci_opt_lag2(
parameters_cr_1 = c(360.3151, -470.3701, -325.4047, -371.3250),
parameters_cr_2 = c(360.3151, -470.3701, -325.4047, -371.3250),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
df = 3,
cue_1 = "I1+I2",
cue_2 = "I1+I2",
cue_range_1 = I_range_mid4_log10,
cue_range_2 = I_range_mid4_log10,
solver = "vode",
dyn = TRUE,
log_cue_1 = "log10",
log_cue_2 = "log10")
source(here("functions/test_ci.R"))
ci_dynamics <- chabaudi_ci_opt_lag2(
parameters_cr_1 = c(360.3151, -470.3701, -325.4047, -371.3250),
parameters_cr_2 = c(360.3151, -470.3701, -325.4047, -371.3250),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
df = 3,
cue_1 = "I1+I2",
cue_2 = "I1+I2",
cue_range_1 = I_range_mid4_log10,
cue_range_2 = I_range_mid4_log10,
solver = "vode",
dyn = TRUE,
log_cue_1 = "log10",
log_cue_2 = "log10")
# note: all log10 are log10(cue+1)
cue_basic.ls <- lapply(c("I", "log10(I)", "Ig", "log10(Ig)", "I + Ig", "log10(I + Ig)",
"G", "log10(G)",
"M", "log10(M)", "Mg", "log10(Mg)", "M + Mg", "log10(M + Mg)",
"R", "log10(R)"), evaluate_cue) # R and log(R) not used because high SNR
# note: all log10 are log10(cue+1)
cue_basic.ls <- lapply(c("I", "log10(I)", "Ig", "log10(Ig)", "I + Ig", "log10(I + Ig)",
"G", "log10(G)",
"M", "log10(M)", "Mg", "log10(Mg)", "M + Mg", "log10(M + Mg)",
"R", "log10(R)",
"BI", "BIt", "BIg"), evaluate_cue) # R and log(R) not used because high SNR
cue_basic.df <- data.frame(do.call(rbind, cue_basic.ls))
names(cue_basic.df) <- c("Cue", "Growth_Decline", "SNR")
cue_basic.df$Growth_Decline <- as.numeric(cue_basic.df$Growth_Decline)
cue_basic.df$SNR <- as.numeric(cue_basic.df$SNR)
ci_dynamics %>%
dplyr::filter(variable == "BIt") %>%
ggplot() +
geom_line(aes(x = time, y = value))
install.packages("zoo")
install.packages("zoo")
test <- ci_dynamics %>%
dplyr::filter(variable == "I") %>%
dplyr::mutate(I_smooth = zoo::rollmean(value, 1000))
plot(test)
plot(test$I_smooth)
ggplot(test) +
geom_line(aes(x=time, y = I_smooth))
test
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I") %>%
dplyr::mutate(I_smooth = zoo::rollmean(value, 1000))
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I")
test
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I") %>%
dplyr::group_by(variable_alt) %>%
dplyr::mutate(I_sum = sum(value))
test
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I") %>%
dplyr::group_by(variable_alt) %>%
dplyr::mutate(I_sum = sum(value)) %>%
dplyr::mutate(I_smooth = zoo::rollmean(I_sum, 1000))
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I") %>%
dplyr::group_by(variable_alt) %>%
dplyr::mutate(I_sum = sum(value)) %>%
dplyr::mutate(I_smooth = zoo::rollmean(I_sum))
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I") %>%
dplyr::group_by(variable_alt) %>%
dplyr::mutate(I_sum = sum(value)) %>%
dplyr::mutate(I_smooth = zoo::rollmean(I_sum, k = 1000))
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I") %>%
dplyr::group_by(variable_alt) %>%
dplyr::mutate(I_sum = sum(value))
I_smooth <- zoo::rollmean(test$I_sum, k = 1000)
plot(I_smooth)
I_smooth <- zoo::rollmean(test$I_sum, k = 100)
plot(I_smooth)
plot(test$I_sum)
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I") %>%
dplyr::group_by(time) %>%
dplyr::mutate(I_sum = sum(value))
plot(test$I_sum)
test <- ci_dynamics %>%
dplyr::filter(variable_alt == "I") %>%
dplyr::group_by(time) %>%
dplyr::summarise(I_sum = sum(value))
plot(test$I_sum)
I_smooth <- zoo::rollmean(test$I_sum, k = 1000)
plot(test$I_sum)
plot(test$I_sum)
plot(I_smoth)
plot(test$I_sum)
plot(I_smooth)
source("~/.active-rstudio-document", echo=TRUE)
pulseBeta_fun <- function(I0, sp, t){
res = rep(NA, length(t))
res = I0*(dbeta(t, sp, sp))
}
pulseBeta_fun(42, 1, seq(0, 20, 0.001))
test <- pulseBeta_fun(42, 1, seq(0, 20, 0.001))
test
plot(test)
# yes to synchrony
test <- pulseBeta_fun(42, 100, seq(0, 20, 0.001))
plot(test)
