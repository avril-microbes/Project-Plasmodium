time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 1)
test3 <- rbind(cbind(test, run = 1), cbind(test, run = 2))
test3
ggplot() +
geom_line(data = test2, aes(x = time, y = value, color = run)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
ggplot() +
geom_line(data = test2, aes(x = time, y = value)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
ggplot() +
geom_line(data = test, aes(x = time, y = value)) +
facet_wrap(~variable, scales = "free") +
geom_line(data = test2, aes(x = time, y = value)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
ggplot() +
geom_line(data = test, aes(x = time, y = value), color = "red") +
facet_wrap(~variable, scales = "free") +
geom_line(data = test2, aes(x = time, y = value), color = "blue") +
facet_wrap(~variable, scales = "free") +
theme_bw()
monte_carlo <- function(i){chabaudi_si_lag_sto(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 1)}
out_mc <- lapply(1:10, monte_carlo)
out_mc
# process df
mapply(function(x, i){rbind(cbind(x, run = i))}, out_mc, names(out_mc))
names(out_mc)
names(out_mc) <- seq(1:10)
names(out_mc)
# process df
mapply(function(x, i){rbind(cbind(x, run = i))}, out_mc, names(out_mc))
# process df
out_mc2 <- mapply(function(x, i){rbind(cbind(x, run = i))}, out_mc, names(out_mc))
out_mc2
do.call(out_mc, rbind)
do.call(rbind, out_mc)
install.packages("gdata")
combine(out_mc)
do.call(rbind, out_mc)
do.call(rbind, out_mc2)
bind_rows(out_mc, id = names(out_mc))
bind_rows(out_mc)
bind_rows(out_mc)
bind_rows(out_mc, .id = T)
bind_rows(out_mc, .id = "id")
out_mc2 <- bind_rows(out_mc, .id = "id")
ggplot() +
geom_line(data = outmc2, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
ggplot() +
geom_line(data = out_mc2, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
source(here("functions/chabaudi_si_sto.R"))
set.seed(137)
monte_carlo <- function(i){chabaudi_si_lag_sto(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 1)}
# do this 10 times
out_mc <- lapply(1:10, monte_carlo)
source(here("functions/chabaudi_si_sto.R"))
set.seed(137)
monte_carlo <- function(i){chabaudi_si_lag_sto(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 1)}
# do this 10 times
out_mc <- lapply(1:10, monte_carlo)
names(out_mc) <- seq(1:10)
# bind rows
out_mc2 <- bind_rows(out_mc, .id = "id")
ggplot() +
geom_line(data = out_mc2, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
source(here("functions/chabaudi_si_sto.R"))
source(here("functions/chabaudi_si_sto.R"))
# monte carlo simulation
set.seed(137) ## homage to the all encompassing number of our universe :D
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo <- function(i){chabaudi_si_lag_sto(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 0.5)}
# do this 10 times
out_mc <- lapply(1:10, monte_carlo)
names(out_mc) <- seq(1:10)
# bind rows
out_mc2 <- bind_rows(out_mc, .id = "id")
# very noisy!
ggplot() +
geom_line(data = out_mc2, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
source(here("functions/chabaudi_si_sto.R"))
# monte carlo simulation
set.seed(137) ## homage to the all encompassing number of our universe :D
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo <- function(i){chabaudi_si_lag_sto(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 0.5)}
# do this 10 times
out_mc <- lapply(1:10, monte_carlo)
names(out_mc) <- seq(1:10)
# bind rows
out_mc2 <- bind_rows(out_mc, .id = "id")
# very noisy!
ggplot() +
geom_line(data = out_mc2, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
source(here("functions/chabaudi_si_sto.R"))
# monte carlo simulation
set.seed(137) ## homage to the all encompassing number of our universe :D
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo <- function(i){chabaudi_si_lag_sto(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 0.5)}
# do this 10 times
out_mc <- lapply(1:10, monte_carlo)
names(out_mc) <- seq(1:10)
# bind rows
out_mc2 <- bind_rows(out_mc, .id = "id")
# very noisy!
ggplot() +
geom_line(data = out_mc2, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
0.25*(rlnorm(1,0,0.5))
0.25*(rlnorm(1,0,0.5))
hist(0.25*(rlnorm(100,0,0.5)))
hist(0.25*(rlnorm(10000,0,0.5)))
hist(7*(rlnorm(10000,0,0.5)))
hist(7*(rlnorm(10000,0,1)))
hist(7*(rlnorm(10000,0,0.5)))
hist(rpois(100000,7))
install.packages("truncnorm")
install.package("truncnorm")
install_github("olafmersmann/truncnorm")
library("devtools")
library("devtools")
install.packages("devtools")
library("devtools")
require("devtools")
install_github("olafmersmann/truncnorm")
require("devtools")
devtools::install_github("hadley/devtools")
install.packages("devtools")
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo <- function(){chabaudi_si_lag_sto(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 0.5)}
# do this 10 times
replicate(10, monte_carlo)
return(res)}
return(res)}
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo <- function(){
res <- chabaudi_si_lag_sto(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 0.5)
return(res)}
# do this 10 times
replicate(10, monte_carlo)
# do this 10 times
lol <- replicate(10, monte_carlo)
lol
# do this 10 times
lol <- replicate(10, monte_carlo())
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo <- function(i){
res <- chabaudi_si_lag_sto(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE,
var = 0.5)
return(res)}
# do this 10 times
library(snow)
cl <- makeCluster(c("localhost","localhost"), type = "SOCK")
# do this 10 times. parallelized
library(parallel)
out_mc <- mclapply(1:10, monte_carlo)
names(out_mc) <- seq(1:10)
# bind rows
out_mc2 <- bind_rows(out_mc, .id = "id")
# very noisy!
ggplot() +
geom_line(data = out_mc2, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
require("devtools")
install_github("olafmersmann/truncnorm")
require("devtools")
require("devtools")
remove.packages("devtools")
install.packages("devtools")
require("devtools")
library(dplyr)
library(ggplot2)
library(here)
library(npreg)
library(splines)
library(forecast)
library(hts)
library(ggpubr)
library(nlme)
library(astsa)
library(magrittr)
library(deSolve)
library(ggpubr)
require("devtools")
install_github("olafmersmann/truncnorm")
library(parallel)
library(truncnorm)
source(here("functions/chabaudi_si_sto2.R"))
source(here("functions/chabaudi_si_sto2.R"))
set.seed(137) ## homage to the all encompassing number of our universe :D
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo2 <- function(i){
chabaudi_si_lag_sto2(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE)}
# do this 10 times. parallelized
out_mc2 <- mclapply(1:10, monte_carlo2)
names(out_mc2) <- seq(1:10)
# bind rows
out_mc3 <- bind_rows(out_mc2, .id = "id")
# very noisy!
ggplot() +
geom_line(data = out_mc3, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
library(ggplot2)
source(here("functions/chabaudi_si_sto2.R"))
set.seed(137) ## homage to the all encompassing number of our universe :D
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo2 <- function(i){
chabaudi_si_lag_sto2(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE)}
# do this 10 times. parallelized
out_mc2 <- mclapply(1:10, monte_carlo2)
names(out_mc2) <- seq(1:10)
# bind rows
out_mc3 <- bind_rows(out_mc2, .id = "id")
# very noisy!
ggplot() +
geom_line(data = out_mc3, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
out_mc3
parameters_tsukushi_sto <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156,
mud = -log(1-0.94),
var = 1) # drug induced action. 94% death per day
parameters_tsukushi_sto2 <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156,
mud = -log(1-0.94))
time_range <- seq(0, 20, by = 1e-3)
I_range <- seq(0, log10(6*10^6), by = log10(6*10^6)/5000)
source(here("functions/chabaudi_si_sto2.R"))
set.seed(137) ## homage to the all encompassing number of our universe :D
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo2 <- function(i){
chabaudi_si_lag_sto2(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto2,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE)}
# do this 10 times. parallelized
out_mc2 <- mclapply(1:10, monte_carlo2)
names(out_mc2) <- seq(1:10)
# bind rows
out_mc3 <- bind_rows(out_mc2, .id = "id")
# very noisy!
ggplot() +
geom_line(data = out_mc3, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
out_mc3
chabaudi_si_lag_sto2(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto2,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE)
library(truncnorm)
rtruncnorm(n = length(time_range+1), a = 0, mean = 7, sd = 0.25)
chabaudi_si_lag_sto2(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto2,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE)
source(here("functions/chabaudi_si_sto2.R"))
chabaudi_si_lag_sto2(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto2,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE)
source(here("functions/chabaudi_si_sto2.R"))
set.seed(137) ## homage to the all encompassing number of our universe :D
## priors have a std = 1. Very noisy. checking if 0.5 is better
monte_carlo2 <- function(i){
chabaudi_si_lag_sto2(par = c(5.511734, 2.394041,-17.890312,4.598348),
immunity = "tsukushi",
parameters = parameters_tsukushi_sto2,
time_range = seq(0, 20, 1e-3),
cue = "I",
cue_range = I_range,
solver = "vode",
log_cue = "log10",
dyn = TRUE)}
# do this 10 times. parallelized
out_mc2 <- mclapply(1:10, monte_carlo2)
names(out_mc2) <- seq(1:10)
# bind rows
out_mc3 <- bind_rows(out_mc2, .id = "id")
out_mc3
# very noisy!
ggplot() +
geom_line(data = out_mc3, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
# RBC burst rate
beta_rand <- truncnorm::rtruncnorm(n = length(time_range+1), a = 0, mean = parameters_tsukushi_sto["beta"], sd = 0.25)
hist(bet_rand)
hist(beta_rand)
# RBC replenishment rate
rho_rand <- truncnorm::rtruncnorm(n = length(time_range+1), a = 0, mean = parameters_tsukushi_sto["rho"], sd = 0.01)
hist(beta_rand)
hist(rho_rand)
test <- truncnorm::rtruncnorm(n = length(time_range+1), a = 0, mean = 1, sd = 1)
hist(test)
load("output1.rda")
library("rstan")
library("rstan")
library("rstan")
library("rethinking")
library("truncnorm")
rstan_options(auto_srite = TRUE)
options(mc.cores = parallel::detectCores())
Sys.setenv(STAN_NUM_THREADS = -1)
source("model_input.R")
### Initial values ###
initf <- function() {
lkj_cor_m_s=rlkjcorr(n=1,K=n_RndEffs,eta=5)
L_s = chol(lkj_cor_m_s)
z_s=matrix(rtruncnorm(n_RndEffs*n_strains,a=-0.5, b=0.5, mean = 0, sd = 1), nrow=n_RndEffs)
lkj_cor_m_u=rlkjcorr(n=1,K=n_RndEffs,eta=5)
L_u = chol(lkj_cor_m_u)
z_u=matrix(rtruncnorm(n_RndEffs*n_mice,a=-0.5, b=0.5, mean = 0, sd = 1), nrow=n_RndEffs)
list(
muR_dash = rtruncnorm(1, a=-0.5, b=0.5, mean = 0, sd = 1),
muR_dash2 = rtruncnorm(1, a=-0.5, b=0.5, mean = 0, sd = 1),
rho = rtruncnorm(1, a=-0.5, b=0.5, mean = 0, sd = 1),
psi_N1 = rtruncnorm(1, a=-0.5, b=0.5, mean = 0, sd = 1),
psi_N2 = rtruncnorm(1, a=-0.5, b=0.5, mean = 0, sd = 1),
beta = rtruncnorm(1, a=-0.5, b=0.5, mean = 0, sd = 1),
sd_s = rtruncnorm(n_RndEffs, a=0.0, b= 0.5, mean = 0, sd = 1),
sd_u = rtruncnorm(n_RndEffs, a=0.0, b= 0.5, mean = 0, sd = 1),
z_s = z_s,
z_u = z_u,
L_s = L_s,
L_u = L_u,
sd_RBC = rtruncnorm(1, a=-0.5, b=0.5, mean = 0, sd = 1),
sd_iRBC = rtruncnorm(1, a=-0.5, b=0.5, mean = 0, sd = 1)
)
}
n_chains=4
inits <- lapply(1:n_chains, function(id) initf())
output1 <- stan(file = 'model_fit.stan',
data = model_input,
chains = n_chains, init = inits,
iter =4000,warmup=1000,
control = list(max_treedepth = 10,adapt_delta=0.99),
save_warmup=FALSE)
save(file="output1.rda",output1)
quit(save="no")
