ggplot() +
geom_line(data = test_res, aes(x = time, y = value, color = "test")) +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic"), alpha = 0.5) +
facet_wrap(~variable, scales = "free") +
theme_bw()
psiw_rand <- parameters_tsukushi["psiw"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = psiW_sd))
source(here("functions/test.R"))
# test function
test_res <- test(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand
)
ggplot() +
geom_line(data = test_res, aes(x = time, y = value, color = "test")) +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic"), alpha = 0.5) +
facet_wrap(~variable, scales = "free") +
theme_bw()
source(here("functions/test.R"))
# test function
test_res <- test(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand
)
# test function
test_res <- test(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand
)
ggplot() +
geom_line(data = test_res, aes(x = time, y = value, color = "test")) +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic"), alpha = 0.5) +
facet_wrap(~variable, scales = "free") +
theme_bw()
phin_rand <- parameters_tsukushi["phin"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = phiN_sd))
# test function
test_res <- test(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand
)
ggplot() +
geom_line(data = test_res, aes(x = time, y = value, color = "test")) +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic"), alpha = 0.5) +
facet_wrap(~variable, scales = "free") +
theme_bw()
source(here("functions/test.R"))
# test function
test_res <- test(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand
)
# test function
test_res <- test(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand
)
ggplot() +
geom_line(data = test_res, aes(x = time, y = value, color = "test")) +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic"), alpha = 0.5) +
facet_wrap(~variable, scales = "free") +
theme_bw()
phiw_rand <- parameters_tsukushi["phiw"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = phiW_sd)) #
s
s
# test function
test_res <- test(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand
)
# test function
test_res <- test(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand
)
ggplot() +
geom_line(data = test_res, aes(x = time, y = value, color = "test")) +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic"), alpha = 0.5) +
facet_wrap(~variable, scales = "free") +
theme_bw()
# test function
test_res <- chabaudi_si_lag_sto(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand
)
ggplot() +
geom_line(data = test_res, aes(x = time, y = value, color = "test")) +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic"), alpha = 0.5) +
facet_wrap(~variable, scales = "free") +
theme_bw()
monte_carlo <- function(parameters_cr, # parameter sets for strategy (use optimal)
parameters, # parameter set for model
time_range, # time range
cue, # cue to use
cue_range, # cue range
log_cue, # whether to log cue or not
rho_sd, # sd for rho
beta_sd, # sd for beta (burst size)
psin_sd, # sd for psin (activation strength for general RBC removal)
psiw_sd, # sd for psiw (activation strength for targeted iRBC removal)
phin_sd, # sd for general RBC removal half-life
phiw_sd, # sd for targeted RBC removal half-lfie
factor = 1 # factor to divide sd with
){
# forcing parameters
force(parameters_cr)
force(parameters)
force(log_cue)
force(cue)
force(cue_range)
force(rho_sd)
force(beta_sd)
force(psin_sd)
force(psiw_sd)
force(phin_sd)
force(phiw_sd)
## define the random list of parameter values
rho_rand <- parameters["rho"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = rho_sd/factor)) # proportion of RBC recovered
beta_rand <- parameters["beta"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = beta_sd/factor)) # burst size
psin_rand <- parameters["psin"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = psin_sd/factor))
psiw_rand <- parameters["psiw"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = psiw_sd/factor))
phin_rand <- parameters["phin"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = phin_sd/factor))
phiw_rand <- parameters["phiw"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = phiw_sd/factor))
## run the numerical simulation
sim <- chabaudi_si_lag_sto(parameters_cr = parameters_cr,
immunity = "tsukushi",
parameters = parameters,
time_range = time_range,
cue = cue,
cue_range = cue_range,
solver = "vode",
log_cue = log_cue,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand,
dyn = TRUE)
print(beta_rand)
## return simulation results
return(sim)
}
set.seed(1)
mc1 <- monte_carlo(
parameters_cr = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0,
beta_sd = 0,
psin_sd = 0,
psiw_sd = 0,
phin_sd = 0,
phiw_sd = 0)
# two runs produced very different results!
ggplot() +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic")) +
geom_line(data = mc1, aes(x = time, y = value, color = "mc1")) +
geom_line(data = mc2, aes(x = time, y = value, color = "mc2")) +
facet_wrap(~variable, scales = "free") +
theme_bw()
set.seed(2)
mc2 <- monte_carlo(
par = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)
#
ggplot() +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic")) +
geom_line(data = mc1, aes(x = time, y = value, color = "mc_control")) +
geom_line(data = mc2, aes(x = time, y = value, color = "mc2")) +
facet_wrap(~variable, scales = "free") +
theme_bw()
mc2 <- monte_carlo(
par = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)
#
ggplot() +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic")) +
geom_line(data = mc1, aes(x = time, y = value, color = "mc_control")) +
geom_line(data = mc2, aes(x = time, y = value, color = "mc2")) +
facet_wrap(~variable, scales = "free") +
theme_bw()
monte_carlo <- function(parameters_cr, # parameter sets for strategy (use optimal)
parameters, # parameter set for model
time_range, # time range
cue, # cue to use
cue_range, # cue range
log_cue, # whether to log cue or not
rho_sd, # sd for rho
beta_sd, # sd for beta (burst size)
psin_sd, # sd for psin (activation strength for general RBC removal)
psiw_sd, # sd for psiw (activation strength for targeted iRBC removal)
phin_sd, # sd for general RBC removal half-life
phiw_sd, # sd for targeted RBC removal half-lfie
factor = 1 # factor to divide sd with
){
# forcing parameters
force(parameters_cr)
force(parameters)
force(log_cue)
force(cue)
force(cue_range)
force(rho_sd)
force(beta_sd)
force(psin_sd)
force(psiw_sd)
force(phin_sd)
force(phiw_sd)
## define the random list of parameter values
rho_rand <- parameters["rho"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = rho_sd/factor)) # proportion of RBC recovered
beta_rand <- parameters["beta"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = beta_sd/factor)) # burst size
psin_rand <- parameters["psin"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = psin_sd/factor))
psiw_rand <- parameters["psiw"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = psiw_sd/factor))
phin_rand <- parameters["phin"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = phin_sd/factor))
phiw_rand <- parameters["phiw"]*exp(rnorm(n = length(time_range) + 1, mean = 0, sd = phiw_sd/factor))
## run the numerical simulation
sim <- chabaudi_si_lag_sto(parameters_cr = parameters_cr,
immunity = "tsukushi",
parameters = parameters,
time_range = time_range,
cue = cue,
cue_range = cue_range,
solver = "vode",
log_cue = log_cue,
rho_rand = rho_rand,
beta_rand = beta_rand,
psin_rand = psin_rand,
psiw_rand = psiw_rand,
phin_rand = phin_rand,
phiw_rand = phiw_rand,
dyn = TRUE)
## return simulation results
return(sim)
}
mc2 <- monte_carlo(
par = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)
mc2 <- monte_carlo(
par = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)
#
ggplot() +
geom_line(data = deterministic, aes(x = time, y = value, color = "deterministic")) +
geom_line(data = mc1, aes(x = time, y = value, color = "mc_control")) +
geom_line(data = mc2, aes(x = time, y = value, color = "mc2")) +
facet_wrap(~variable, scales = "free") +
theme_bw()
registerDoParallel(cl = detectCores())
registerDoRNG(137)
loop_test <- foreach(i= 1:2, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr"),
.combine=rbind) %dorng% {
monte_carlo(
par = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
cl <- makeCluster(4)
registerDoParallel(cl)
registerDoRNG(137)
loop_test <- foreach(i= 1:2, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr"),
.combine=rbind) %dorng% {
monte_carlo(
par = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
loop_test
cl <- makeCluster(4)
registerDoParallel(cl)
registerDoRNG(137)
loop_test <- foreach(i= 1:2, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr")) %dorng% {
monte_carlo(
par = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
loop_test
bind_rows(looop_test, id = "id")
loop_test.dfbind_rows(loop_test, id = "id")
loop_test.df <- bind_rows(loop_test, id = "id")
loop_test.df <- dplyr::bind_rows(loop_test, id = "id")
loop_test
loop_test
loop_test.df <- dplyr::bind_rows(loop_test, .id = "id")
loop_test
loop_test.df
ggplot() +
geom_line(data = loop_test.df, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
loop_test <- foreach(i= 1:10, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr")) %dorng% {
monte_carlo(
par = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
cl <- makeCluster(4)
registerDoParallel(cl)
registerDoRNG(137)
loop_test <- foreach(i= 1:10, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr")) %dorng% {
monte_carlo(
par = c(5.511734, 2.394041,-17.890312,4.598348),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "I",
cue_range = I_range,
log_cue = "log10",
rho_sd = 0.2579136,
beta_sd = 0.1722868,
psin_sd = 0.5778196,
psiw_sd = 0.2355804,
phin_sd = 0.02609495,
phiw_sd = 0.8286213)}
stopCluster(cl)
loop_test.df <- dplyr::bind_rows(loop_test, .id = "id")
ggplot() +
geom_line(data = loop_test.df, aes(x = time, y = value, color = id)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
