library(doRNG)
library(arrow)
library(ggpubr)
library(ggthemes)
# read in dymamics
mc_G_log.dyn <- read_parquet(here("data/MC/mc_G_log_dyn.parquet"))
mc_G.dyn <- read_parquet(here("data/MC/mc_G_dyn.parquet"))
mc_R_log.dyn <- read_parquet(here("data/MC/mc_R_log_dyn.parquet"))
mc_R.dyn <- read_parquet(here("data/MC/mc_R_dyn.parquet"))
mc_I_log.dyn <- read_parquet(here("data/MC/mc_I_log_dyn.parquet"))
mc_I.dyn <- read_parquet(here("data/MC/mc_I_dyn.parquet"))
# read in fitness
mc_G_log.fitness <- read.csv(here("data/MC/mc_G_log_fitness.csv"))
mc_G.fitness <- read.csv(here("data/MC/mc_G_fitness.csv"))
mc_R_log.fitness <- read.csv(here("data/MC/mc_R_log_fitness.csv"))
mc_R.fitness <- read.csv(here("data/MC/mc_R_fitness.csv"))
mc_I_log.fitness <- read.csv(here("data/MC/mc_I_log_fitness.csv"))
mc_I.fitness <- read.csv(here("data/MC/mc_I_fitness.csv"))
mc_I.dyn
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
# G log
G_log.dyn <- chabaudi_si_clean(
parameters_cr = c(1.211651, -4.120928, -1.054041, -1.300403),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE)
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
source(here("functions/monte_carlo.R"))
source(here("functions/chabaudi_si_clean.R"))
source(here("functions/chabaudi_si_sto.R"))
# G log
G_log.dyn <- chabaudi_si_clean(
parameters_cr = c(1.211651, -4.120928, -1.054041, -1.300403),
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
dyn = TRUE)
G_log.dyn %>% filter(variable == "tau_cum") %>% summarise(max(value))
test <- mc_G_log.dyn %>% filter(id == 1)
test
G_log.dyn
library(tidyr)
mc_G_log.dyn
test <- mc_G_log.dyn %>%
dplyr::group_by(time) %>%
dplyr::summarise(var_cr = var(cr),
var_tau = var(tau_cum))
test
test <- mc_G_log.dyn %>%
dplyr::group_by(time) %>%
dplyr::summarise(cr_top = mean(cr)+sd(cr),
cr_bot <- mean(cr)-var(cr),
tau_top = mean(tau_cum)+sd(tau_cum),
tau_bot = mean(tau_cum)-sd(tau_cum))
ggplot() +
geom_ribbon(data = test, aes(x = time, ymin = cr_bot, ymax = cr_top)) +
theme_bw()
test <- mc_G_log.dyn %>%
dplyr::group_by(time) %>%
dplyr::summarise(cr_top = mean(cr)+sd(cr),
cr_bot = mean(cr)-var(cr),
tau_top = mean(tau_cum)+sd(tau_cum),
tau_bot = mean(tau_cum)-sd(tau_cum))
ggplot() +
geom_ribbon(data = test, aes(x = time, ymin = cr_bot, ymax = cr_top)) +
theme_bw()
ggplot() +
geom_ribbon(data = test, aes(x = time, ymin = tau_bot, ymax = tau_top)) +
theme_bw()
ggplot() +
geom_ribbon(data = test, aes(x = time, ymin = cr_bot, ymax = cr_top)) +
theme_bw()
ggplot() +
geom_ribbon(data = test, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.5) +
theme_bw()
ggplot() +
geom_line(data = G_log.dyn, aes(x = time, y = cr)) +
geom_ribbon(data = test, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.5) +
theme_bw()
ggplot() +
geom_line(data = G_log.dyn2, aes(x = time, y = cr)) +
geom_ribbon(data = test, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.5) +
theme_bw()
G_log.dyn
# to wide
G_log.dyn2 <- pivot_wide(G_log.dyn, variable, value)
# to wide
G_log.dyn2 <- tidyr::pivot_wide(G_log.dyn, variable, value)
# to wide
G_log.dyn2 <- dplyr::pivot_wide(G_log.dyn, variable, value)
# to wide
G_log.dyn2 <- tidyr::pivot_wider(G_log.dyn, variable, value)
G_log.dyn2
G_log.dyn2
:pivot_wider()
pivot_wider
# to wide
G_log.dyn2 <- tidyr::pivot_wider(G_log.dyn, names_from = variable, values_from = value)
G_log.dyn2
ggplot() +
geom_line(data = G_log.dyn2, aes(x = time, y = cr)) +
geom_ribbon(data = test, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.5) +
theme_bw()
ggplot() +
geom_line(data = G_log.dyn2, aes(x = time, y = tau_cum)) +
geom_ribbon(data = test, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.5) +
theme_bw()
ggplot() +
geom_line(data = G_log.dyn2, aes(x = time, y = cr)) +
geom_ribbon(data = test, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.5) +
theme_bw()
ggplot() +
geom_line(data = G_log.dyn2, aes(x = time, y = tau_cum)) +
geom_ribbon(data = test, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.5) +
theme_bw()
ggplot() +
geom_line(data = G_log.dyn2, aes(x = time, y = cr)) +
geom_ribbon(data = test, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.5) +
theme_bw()
dev_cr <- function(dyn, par, cue, cue_range, log){
# get reference dynamics
ref_dyn <- chabaudi_si_clean(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
immunity = "tsukushi",
solver = "vode",
dyn = TRUE)
# convert to wide
ref_dyn.wide <- tidyr::pivot_wider(ref_dyn, names_from = variable, values_from = value)
# get std from MC dynamics
mc_sum <- dyn %>%
dplyr::group_by(time) %>%
dplyr::summarise(cr_top = mean(cr)+sd(cr),
cr_bot = mean(cr)-var(cr),
tau_top = mean(tau_cum)+sd(tau_cum),
tau_bot = mean(tau_cum)-sd(tau_cum))
# return list
return(list(ref_dyn.wide, mc_sum))
}
# G log
G_log.diff <- dev_cr(mc_G_log.dyn,
par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log_cue = "log10"
)
# G log
G_log.diff <- dev_cr(mc_G_log.dyn,
par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10"
)
ggplot() +
geom_line(data = G_log.diff[[1]], aes(x = time, y = cr)) +
geom_ribbon(data = G_log.diff[[2]], aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.5) +
theme_bw()
# G log
G_log.diff <- dev_cr(mc_G_log.dyn,
par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10")
# G
G.diff <- dev_cr(mc_G.dyn,
par = c(4.111631e-02, -1.426712e+01, 1.975708e+02, -2.017394e+03),
cue = "G",
cue_range = seq(0, (10^5), by = (10^5)/5000),
log = "none")
# R log
R_log.diff <- dev_cr(mc_R_log.dyn,
par = c(0.4131313,  23.9329075, -65.8111298, 125.6338918),
cue = "R",
cue_range = seq(log10(10^6), log10(10^8), by = (log10(10^8)-log10(10^6))/5000),
log = "log10")
# R
R.diff <- dev_cr(mc_R.dyn,
par = c(0.5763738, -11.1734054,  64.8443512, 815.7820446),
cue = "R",
cue_range = seq((10^6), (10^8), by = ((10^8)-(10^6))/5000),
log = "none")
# I log
I_log.diff <- dev_cr(mc_I_log.dyn,
par = c(6.437168,   0.774665, -19.588253 ,  5.618792),
cue = "I",
cue_range = seq(0, log10(10^7), log10(10^7)/5000),
log = "log")
# I log
I_log.diff <- dev_cr(mc_I_log.dyn,
par = c(6.437168,   0.774665, -19.588253 ,  5.618792),
cue = "I",
cue_range = seq(0, log10(10^7), log10(10^7)/5000),
log = "log10")
# I log
I_log.diff <- dev_cr(mc_I_log.dyn,
par = c(6.437168,   0.774665, -19.588253 ,  5.618792),
cue = "I",
cue_range = seq(0, log10(10^7), log10(10^7)/5000),
log = "log10")
# I
I.diff <- dev_cr(mc_I.dyn,
par = c(-0.0762914,  -17.2790701 , 990.9323116, 4770.6285946),
cue = "I",
cue_range = seq(0, 10^7, (10^7)/5000),
log = "none")
I.diff
# cr time series
## concatenate data
reference.df <- rbind(
cbind(G_log.diff[[1]], cue = "Gametocyte log10"),
cbind(G_diff[[1]], cue = "Gametocyte"),
cbind(R_log.diff[[1]], cue = "RBC log10"),
cbind(R_diff[[1]], cue = "RBC"),
cbind(I_log.diff[[1]], cue = "iRBC log10"),
cbind(I_diff[[1]], cue = "iRBC")
)
# cr time series
## concatenate data
reference.df <- rbind(
cbind(G_log.diff[[1]], cue = "Gametocyte log10"),
cbind(G.diff[[1]], cue = "Gametocyte"),
cbind(R_log.diff[[1]], cue = "RBC log10"),
cbind(R.diff[[1]], cue = "RBC"),
cbind(I_log.diff[[1]], cue = "iRBC log10"),
cbind(I.diff[[1]], cue = "iRBC")
)
## different data contenate
diff.df <- rbind(
cbind(G_log.diff[[2]], cue = "Gametocyte log10"),
cbind(G.diff[[2]], cue = "Gametocyte"),
cbind(R_log.diff[[2]], cue = "RBC log10"),
cbind(R.diff[[2]], cue = "RBC"),
cbind(I_log.diff[[2]], cue = "iRBC log10"),
cbind(I.diff[[2]], cue = "iRBC")
)
# plot!
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top)) +
facet_wrap(~cue, ncol = 2) +
theme_bw()
# plot!
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3) +
facet_wrap(~cue, ncol = 2) +
theme_bw()
here()
# plot!
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3) +
facet_wrap(~cue, ncol = 2) +
theme_bw()
# plot!
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, color = "red") +
facet_wrap(~cue, ncol = 2) +
theme_bw()
# plot!
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
theme_bw()
# plot fitness accumulation
ggplot() +
geom_line(data = reference.df, aes(x = time, y = tau_cum)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
theme_bw()
reference.df
diff.df
mc_G_log.dyn
dev_cr <- function(dyn, par, cue, cue_range, log){
# get reference dynamics
ref_dyn <- chabaudi_si_clean(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
immunity = "tsukushi",
solver = "vode",
dyn = TRUE)
# convert to wide
ref_dyn.wide <- tidyr::pivot_wider(ref_dyn, names_from = variable, values_from = value)
# get std from MC dynamics
mc_sum <- dyn %>%
dplyr::group_by(time) %>%
dplyr::summarise(cr_top = mean(cr)+sd(cr),
cr_bot = mean(cr)-var(cr),
tau_top = mean(tau)+sd(tau),
tau_bot = mean(tau)-sd(tau))
# return list
return(list(ref_dyn.wide, mc_sum))
}
# G log
G_log.diff <- dev_cr(mc_G_log.dyn,
par = c(1.211651, -4.120928, -1.054041, -1.300403),
cue = "G",
cue_range = seq(0, log10(10^5), by = log10(10^5)/5000),
log = "log10")
# G
G.diff <- dev_cr(mc_G.dyn,
par = c(4.111631e-02, -1.426712e+01, 1.975708e+02, -2.017394e+03),
cue = "G",
cue_range = seq(0, (10^5), by = (10^5)/5000),
log = "none")
# R log
R_log.diff <- dev_cr(mc_R_log.dyn,
par = c(0.4131313,  23.9329075, -65.8111298, 125.6338918),
cue = "R",
cue_range = seq(log10(10^6), log10(10^8), by = (log10(10^8)-log10(10^6))/5000),
log = "log10")
# R
R.diff <- dev_cr(mc_R.dyn,
par = c(0.5763738, -11.1734054,  64.8443512, 815.7820446),
cue = "R",
cue_range = seq((10^6), (10^8), by = ((10^8)-(10^6))/5000),
log = "none")
# I log
I_log.diff <- dev_cr(mc_I_log.dyn,
par = c(6.437168,   0.774665, -19.588253 ,  5.618792),
cue = "I",
cue_range = seq(0, log10(10^7), log10(10^7)/5000),
log = "log10")
# I
I.diff <- dev_cr(mc_I.dyn,
par = c(-0.0762914,  -17.2790701 , 990.9323116, 4770.6285946),
cue = "I",
cue_range = seq(0, 10^7, (10^7)/5000),
log = "none")
# cr time series
## concatenate data
reference.df <- rbind(
cbind(G_log.diff[[1]], cue = "Gametocyte log10"),
cbind(G.diff[[1]], cue = "Gametocyte"),
cbind(R_log.diff[[1]], cue = "RBC log10"),
cbind(R.diff[[1]], cue = "RBC"),
cbind(I_log.diff[[1]], cue = "iRBC log10"),
cbind(I.diff[[1]], cue = "iRBC")
)
## different data contenate
diff.df <- rbind(
cbind(G_log.diff[[2]], cue = "Gametocyte log10"),
cbind(G.diff[[2]], cue = "Gametocyte"),
cbind(R_log.diff[[2]], cue = "RBC log10"),
cbind(R.diff[[2]], cue = "RBC"),
cbind(I_log.diff[[2]], cue = "iRBC log10"),
cbind(I.diff[[2]], cue = "iRBC")
)
# plot conversion time series
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
theme_bw()
# plot conversion time series
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
theme_bw()
# plot fitness accumulation
ggplot() +
geom_line(data = reference.df, aes(x = time, y = tau_cum)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
theme_bw()
# plot fitness accumulation
ggplot() +
geom_line(data = reference.df, aes(x = time, y = tau)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
theme_bw()
# plot conversion time series
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
theme_bw()
# plot conversion time series
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Conversion rate") +
theme_bw()
# plot fitness timeseries. When if tiness lost? At the latter part
ggplot() +
geom_line(data = reference.df, aes(x = time, y = tau)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Transmission potential") +
theme_bw()
fitness.df <- rbind(
cbind(mc_G_log.fitness, id = "Gametocyte\nlog10"),
cbind(mc_G.fitness, id = "Gametocyte"),
cbind(mc_R_log.fitness, id = "RBC log10"),
cbind(mc_R.fitness, id = "RBC"),
cbind(mc_I_log.fitness, id = "iRBC log10"),
cbind(mc_I.fitness, id = "iRBC")
)
# fitness vs time
fig2a <- ggplot() +
geom_line(data = fitness.df, aes(x = X, y = max_fitness, color = id)) +
facet_wrap(~id, ncol = 2) +
labs(x = "Iteration", y = "Maximum fitness", color = "Cue") +
theme_bw() +
guides(color = FALSE, fill = F)
# quantify variance
fitness_var.df <- fitness.df %>%
dplyr::group_by(id) %>%
dplyr::summarise(var = var(max_fitness)) %>%
dplyr::mutate(id = forcats::fct_reorder(factor(id), var, .desc = F))
fig2b <- ggplot() +
geom_col(data = fitness_var.df, aes(y = id, x = var, fill = id)) +
scale_fill_manual(values = c("#619CFF", "#B79F00", "#F564E3", "#00BA38", "#F8766D", "#00BFC4")) +
theme_bw() +
labs(y = "Cue", x = "Variance") +
guides(fill = F, color = F)
fig2ab <- ggarrange(fig2a, fig2b, widths = c(1.5, 1))
fig2ab
fig2ab <- ggarrange(fig2a, fig2b, widths = c(2, 1))
fig2ab
# plot conversion time series
fig2c <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Conversion rate") +
theme_bw()
# plot fitness timeseries. When if tiness lost? At the latter part
fig2d <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = tau)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Transmission potential") +
theme_bw()
# arrange
fig2cd <- ggarrange(fig2c, fig2d)
fig2cd
# arrange
fig2cd <- ggarrange(fig2c, fig2d, labels = c("B", "C"))
fig2ab <- ggarrange(fig2a, fig2b, widths = c(2, 1), labels = c("A", ""))
fig2ab
fig2 <- ggarrange(fig2ab, fig2cd)
fig2
fig2 <- ggarrange(fig2ab, fig2cd, ncol = 1)
fig2
ggsave(here("figures/report14/MC_simulation.png"))
beta_sd <- 0.1722868
beta_dist <- exp(rnorm(rep, 0, beta_sd))
rep <- 10000
beta_dist <- exp(rnorm(rep, 0, beta_sd))
hist(beta_dist)
