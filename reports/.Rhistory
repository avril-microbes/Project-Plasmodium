fig2cd <- ggarrange(fig2c, fig2d, labels = c("B", "C"))
# arrange
fig2cd <- ggpubr::ggarrange(fig2c, fig2d, labels = c("B", "C"))
fig2 <- ggpubrggarrange(fig2ab, fig2cd, ncol = 1)
fig2 <- ggpubr::ggarrange(fig2ab, fig2cd, ncol = 1)
fig2
ggsave(here("figures/report15/MC_simulation.png"))
ggsave(here("figures/report15/MC_simulation.png"))
ggsave(here("figures/report15/MC_simulation.png"), height = 10)
mc_I_Ig.dyn
ggplot() +
geom_smooth(data = mc_I_Ig.dyn, aes(x = time, y = cr))
t.score = qt(p=0.05/2, df=4999,lower.tail=F)
t.score
dev_cr <- function(dyn, par, cue, cue_range, log){
# get reference dynamics
ref_dyn <- chabaudi_si_clean(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
immunity = "tsukushi",
solver = "vode",
dyn = TRUE)
# convert to wide
ref_dyn.wide <- tidyr::pivot_wider(ref_dyn, names_from = variable, values_from = value)
# get 95% CI. Use t score of 1.960439 given our sample size of 5000.
mc_sum <- dyn %>%
dplyr::group_by(time) %>%
dplyr::summarise(cr_top = mean(cr)+(1.960439*(sd(cr)/sqrt(5000))),
cr_top = mean(cr)-(1.960439*(sd(cr)/sqrt(5000))),
tau_top = mean(tau)+(1.960439*(sd(tau)/sqrt(5000))),
tau_bot = mean(tau)-(1.960439*(sd(tau)/sqrt(5000))))
# return list
return(list(ref_dyn.wide, mc_sum))
}
# G log
G_log.diff <- dev_cr(mc_G_log.dyn,
par = c(1.211521, -3.936778,-1.312944, -1.285713),
cue = "G",
cue_range = seq(0, log10(6*(10^4)), (log10(6*(10^4)))/5000),
log= "log10")
# G
G.diff <- dev_cr(mc_G.dyn,
par = c(0.04061288,   -9.31445958,   74.13015506, -431.59843638),
cue = "G",
cue_range = seq(0, 6*(10^4), (6*(10^4))/5000),
log= "none")
# R log
R_log.diff <- dev_cr(mc_R_log.dyn,
par = c(48.70772, 105.18882, -81.80625, -44.60051),
cue = "R",
cue_range = seq(log10(10^6), log10(10^7), by = (log10(10^7)-log10(10^6))/5000),
log= "log10")
# R
R.diff <- dev_cr(mc_R.dyn,
par = c(7.0976026,  30.1295151, -28.0565613,  -0.2788713),
cue = "R",
cue_range = seq((10^6), (10^7), by = ((10^7)-(10^6))/5000),
log= "none")
# I log
I_log.diff <- dev_cr(mc_I_log.dyn,
par = c(5.463558,   2.383948, -17.757281,   4.571835),
cue = "I",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# I
I.diff <- dev_cr(mc_I.dyn,
par = c(0.1135384,  -39.0585154, 1941.9082813,  119.8228980),
cue = "I",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# Ig log
Ig_log.diff <- dev_cr(mc_Ig_log.dyn,
par = c(1.74633, -1.78582, -5.52834, 1.57344 ),
cue = "Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# Ig
Ig.diff <- dev_cr(mc_Ig.dyn,
par = c(0.05234791,  -46.03368629, 1897.61313455,   70.57689145),
cue = "Ig",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# I+Ig log
I_Ig_log.diff <- dev_cr(mc_I_Ig_log.dyn,
par = c(3.594042,   4.157744, -13.530672,   2.599905),
cue = "I+Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# I+Ig
I_Ig.diff <- dev_cr(mc_I_Ig.dyn,
par = c(0.3159297,  -46.1104558, 1250.7529081,   -6.1982093),
cue = "I+Ig",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# cr time series
## concatenate data
reference.df <- rbind(
cbind(G_log.diff[[1]], cue = "Gametocyte log10"),
cbind(G.diff[[1]], cue = "Gametocyte"),
cbind(R_log.diff[[1]], cue = "RBC log10"),
cbind(R.diff[[1]], cue = "RBC"),
cbind(I_log.diff[[1]], cue = "Asexual iRBC log10"),
cbind(I.diff[[1]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[1]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[1]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[1]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[1]], cue = "Total iRBC")
)
## different data contenate
diff.df <- rbind(
cbind(G_log.diff[[2]], cue = "Gametocyte log10"),
cbind(G.diff[[2]], cue = "Gametocyte"),
cbind(R_log.diff[[2]], cue = "RBC log10"),
cbind(R.diff[[2]], cue = "RBC"),
cbind(I_log.diff[[2]], cue = "Asexual iRBC log10"),
cbind(I.diff[[2]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[2]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[2]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[2]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[2]], cue = "Total iRBC")
)
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Conversion rate") +
theme_bw()
# plot conversion time series
fig2c <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Conversion rate") +
theme_bw()
dev_cr <- function(dyn, par, cue, cue_range, log){
# get reference dynamics
ref_dyn <- chabaudi_si_clean(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
immunity = "tsukushi",
solver = "vode",
dyn = TRUE)
# convert to wide
ref_dyn.wide <- tidyr::pivot_wider(ref_dyn, names_from = variable, values_from = value)
# get 95% CI. Use t score of 1.960439 given our sample size of 5000. Margin of error = t*(sd/sqrt(n))
mc_sum <- dyn %>%
dplyr::group_by(time) %>%
dplyr::summarise(cr_top = mean(cr)+(1.960439*(sd(cr)/sqrt(5000))),
cr_bot = mean(cr)-(1.960439*(sd(cr)/sqrt(5000))),
tau_top = mean(tau)+(1.960439*(sd(tau)/sqrt(5000))),
tau_bot = mean(tau)-(1.960439*(sd(tau)/sqrt(5000))))
# return list
return(list(ref_dyn.wide, mc_sum))
}
# G log
G_log.diff <- dev_cr(mc_G_log.dyn,
par = c(1.211521, -3.936778,-1.312944, -1.285713),
cue = "G",
cue_range = seq(0, log10(6*(10^4)), (log10(6*(10^4)))/5000),
log= "log10")
# G
G.diff <- dev_cr(mc_G.dyn,
par = c(0.04061288,   -9.31445958,   74.13015506, -431.59843638),
cue = "G",
cue_range = seq(0, 6*(10^4), (6*(10^4))/5000),
log= "none")
# R log
R_log.diff <- dev_cr(mc_R_log.dyn,
par = c(48.70772, 105.18882, -81.80625, -44.60051),
cue = "R",
cue_range = seq(log10(10^6), log10(10^7), by = (log10(10^7)-log10(10^6))/5000),
log= "log10")
# R
R.diff <- dev_cr(mc_R.dyn,
par = c(7.0976026,  30.1295151, -28.0565613,  -0.2788713),
cue = "R",
cue_range = seq((10^6), (10^7), by = ((10^7)-(10^6))/5000),
log= "none")
# I log
I_log.diff <- dev_cr(mc_I_log.dyn,
par = c(5.463558,   2.383948, -17.757281,   4.571835),
cue = "I",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# I
I.diff <- dev_cr(mc_I.dyn,
par = c(0.1135384,  -39.0585154, 1941.9082813,  119.8228980),
cue = "I",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# Ig log
Ig_log.diff <- dev_cr(mc_Ig_log.dyn,
par = c(1.74633, -1.78582, -5.52834, 1.57344 ),
cue = "Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# Ig
Ig.diff <- dev_cr(mc_Ig.dyn,
par = c(0.05234791,  -46.03368629, 1897.61313455,   70.57689145),
cue = "Ig",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# I+Ig log
I_Ig_log.diff <- dev_cr(mc_I_Ig_log.dyn,
par = c(3.594042,   4.157744, -13.530672,   2.599905),
cue = "I+Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# I+Ig
I_Ig.diff <- dev_cr(mc_I_Ig.dyn,
par = c(0.3159297,  -46.1104558, 1250.7529081,   -6.1982093),
cue = "I+Ig",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# cr time series
## concatenate data
reference.df <- rbind(
cbind(G_log.diff[[1]], cue = "Gametocyte log10"),
cbind(G.diff[[1]], cue = "Gametocyte"),
cbind(R_log.diff[[1]], cue = "RBC log10"),
cbind(R.diff[[1]], cue = "RBC"),
cbind(I_log.diff[[1]], cue = "Asexual iRBC log10"),
cbind(I.diff[[1]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[1]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[1]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[1]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[1]], cue = "Total iRBC")
)
## different data contenate
diff.df <- rbind(
cbind(G_log.diff[[2]], cue = "Gametocyte log10"),
cbind(G.diff[[2]], cue = "Gametocyte"),
cbind(R_log.diff[[2]], cue = "RBC log10"),
cbind(R.diff[[2]], cue = "RBC"),
cbind(I_log.diff[[2]], cue = "Asexual iRBC log10"),
cbind(I.diff[[2]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[2]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[2]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[2]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[2]], cue = "Total iRBC")
)
# plot conversion time series
fig2c <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Conversion rate") +
theme_bw()
# plot fitness timeseries. When if tiness lost? At the latter part
fig2d <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = tau)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Transmission potential") +
theme_bw()
# arrange
fig2cd <- ggpubr::ggarrange(fig2c, fig2d, labels = c("B", "C"))
fig2 <- ggpubr::ggarrange(fig2ab, fig2cd, ncol = 1)
ggsave(here("figures/report15/MC_simulation.png"), height = 10)
# plot conversion time series
fig2c <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.7, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Conversion rate") +
theme_bw()
# plot fitness timeseries. When if tiness lost? At the latter part
fig2d <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = tau)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.7, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Transmission potential") +
theme_bw()
# arrange
fig2cd <- ggpubr::ggarrange(fig2c, fig2d, labels = c("B", "C"))
# arrange
fig2cd <- ggpubr::ggarrange(fig2c, fig2d, labels = c("B", "C"))
fig2 <- ggpubr::ggarrange(fig2ab, fig2cd, ncol = 1)
ggsave(here("figures/report15/MC_simulation.png"), height = 10)
dev_cr <- function(dyn, par, cue, cue_range, log){
# get reference dynamics
ref_dyn <- chabaudi_si_clean(
parameters_cr = par,
parameters = parameters_tsukushi,
time_range = time_range,
cue = cue,
cue_range = cue_range,
log_cue = log,
immunity = "tsukushi",
solver = "vode",
dyn = TRUE)
# convert to wide
ref_dyn.wide <- tidyr::pivot_wider(ref_dyn, names_from = variable, values_from = value)
# get 95% CI. Use t score of 1.960439 given our sample size of 5000. Margin of error = t*(sd/sqrt(n))
mc_sum <- dyn %>%
dplyr::group_by(time) %>%
dplyr::summarise(cr_top = mean(cr)+sd(cr),
cr_bot = mean(cr)-sd(cr),
tau_top = mean(tau)+sd(tau),
tau_bot = mean(tau)-sd(tau))
# return list
return(list(ref_dyn.wide, mc_sum))
}
# G log
G_log.diff <- dev_cr(mc_G_log.dyn,
par = c(1.211521, -3.936778,-1.312944, -1.285713),
cue = "G",
cue_range = seq(0, log10(6*(10^4)), (log10(6*(10^4)))/5000),
log= "log10")
# G
G.diff <- dev_cr(mc_G.dyn,
par = c(0.04061288,   -9.31445958,   74.13015506, -431.59843638),
cue = "G",
cue_range = seq(0, 6*(10^4), (6*(10^4))/5000),
log= "none")
# R log
R_log.diff <- dev_cr(mc_R_log.dyn,
par = c(48.70772, 105.18882, -81.80625, -44.60051),
cue = "R",
cue_range = seq(log10(10^6), log10(10^7), by = (log10(10^7)-log10(10^6))/5000),
log= "log10")
# R
R.diff <- dev_cr(mc_R.dyn,
par = c(7.0976026,  30.1295151, -28.0565613,  -0.2788713),
cue = "R",
cue_range = seq((10^6), (10^7), by = ((10^7)-(10^6))/5000),
log= "none")
# I log
I_log.diff <- dev_cr(mc_I_log.dyn,
par = c(5.463558,   2.383948, -17.757281,   4.571835),
cue = "I",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# I
I.diff <- dev_cr(mc_I.dyn,
par = c(0.1135384,  -39.0585154, 1941.9082813,  119.8228980),
cue = "I",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# Ig log
Ig_log.diff <- dev_cr(mc_Ig_log.dyn,
par = c(1.74633, -1.78582, -5.52834, 1.57344 ),
cue = "Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# Ig
Ig.diff <- dev_cr(mc_Ig.dyn,
par = c(0.05234791,  -46.03368629, 1897.61313455,   70.57689145),
cue = "Ig",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# I+Ig log
I_Ig_log.diff <- dev_cr(mc_I_Ig_log.dyn,
par = c(3.594042,   4.157744, -13.530672,   2.599905),
cue = "I+Ig",
cue_range = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/5000),
log= "log10")
# I+Ig
I_Ig.diff <- dev_cr(mc_I_Ig.dyn,
par = c(0.3159297,  -46.1104558, 1250.7529081,   -6.1982093),
cue = "I+Ig",
cue_range = seq(0, 6*(10^6), by = (6*(10^6))/5000),
log= "none")
# cr time series
## concatenate data
reference.df <- rbind(
cbind(G_log.diff[[1]], cue = "Gametocyte log10"),
cbind(G.diff[[1]], cue = "Gametocyte"),
cbind(R_log.diff[[1]], cue = "RBC log10"),
cbind(R.diff[[1]], cue = "RBC"),
cbind(I_log.diff[[1]], cue = "Asexual iRBC log10"),
cbind(I.diff[[1]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[1]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[1]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[1]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[1]], cue = "Total iRBC")
)
## different data contenate
diff.df <- rbind(
cbind(G_log.diff[[2]], cue = "Gametocyte log10"),
cbind(G.diff[[2]], cue = "Gametocyte"),
cbind(R_log.diff[[2]], cue = "RBC log10"),
cbind(R.diff[[2]], cue = "RBC"),
cbind(I_log.diff[[2]], cue = "Asexual iRBC log10"),
cbind(I.diff[[2]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[2]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[2]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[2]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[2]], cue = "Total iRBC")
)
ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.7, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Conversion rate") +
theme_bw()
fig2b <- ggplot() +
geom_point(data = fitness_var.df, aes(x = fitness, y = std))
ggplot() +
geom_point(data = fitness_var.df, aes(x = fitness, y = std))
# quantify variance and mean
fitness_var.df <- fitness.df %>%
dplyr::group_by(id) %>%
dplyr::summarise(std = sd(max_fitness),
mean = mean(max_fitness)) %>%
dplyr::mutate(id = forcats::fct_reorder(factor(id), std, .desc = F))
ggplot() +
geom_point(data = fitness_var.df, aes(x = fitness, y = std))
ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std))
ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std))
fitness_var.df
ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std)) +
ggrepel::geom_label_repel(label = id)
ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std)) +
ggrepel::geom_label_repel(aes(label = id))
ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std)) +
ggrepel::geom_label_repel(data = fitness_var.df, aes(label = id))
ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std)) +
ggrepel::geom_label_repel(data = fitness_var.df, aes(labels = id))
ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std)) +
ggrepel::geom_label_repel(data = fitness_var.df, aes(x = mean, y = std, label = id))
ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std)) +
ggrepel::geom_label_repel(data = fitness_var.df, aes(x = mean, y = std, label = id)) +
theme_bw()
ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std)) +
ggrepel::geom_label_repel(data = fitness_var.df, aes(x = mean, y = std, label = id)) +
theme_bw() +
labs(x = "Mean fitness", y = "Fitness tandard deviation")
fig2b <- ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std)) +
ggrepel::geom_label_repel(data = fitness_var.df, aes(x = mean, y = std, label = id)) +
theme_bw() +
labs(x = "Mean fitness", y = "Fitness tandard deviation")
fig2ab <- ggpubr::ggarrange(fig2a, fig2b, widths = c(2, 1.5), labels = c("A", ""))
fig2ab
# arrange
fig2cd <- ggpubr::ggarrange(fig2c, fig2d, labels = c("B", "C"))
# arrange
fig2cd <- ggpubr::ggarrange(fig2c, fig2d, labels = c("B", "C"))
fig2 <- ggpubr::ggarrange(fig2b, fig2cd, ncol = 1, labels = c("A", ""))
fig2 <- ggpubr::ggarrange(fig2b, fig2cd, ncol = 1, labels = c("A", ""))
ggsave(here("figures/report15/MC_simulation.png"), height = 10)
ggsave(here("figures/report15/MC_simulation.png"), height = 7)
# cr time series
## concatenate data
reference.df <- rbind(
cbind(G_log.diff[[1]], cue = "Gametocyte log10"),
cbind(G.diff[[1]], cue = "Gametocyte"),
cbind(R_log.diff[[1]], cue = "RBC log10"),
cbind(R.diff[[1]], cue = "RBC"),
cbind(I_log.diff[[1]], cue = "Asexual iRBC log10"),
cbind(I.diff[[1]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[1]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[1]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[1]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[1]], cue = "Total iRBC")
)
## different data contenate
diff.df <- rbind(
cbind(G_log.diff[[2]], cue = "Gametocyte log10"),
cbind(G.diff[[2]], cue = "Gametocyte"),
cbind(R_log.diff[[2]], cue = "RBC log10"),
cbind(R.diff[[2]], cue = "RBC"),
cbind(I_log.diff[[2]], cue = "Asexual iRBC log10"),
cbind(I.diff[[2]], cue = "Asexual iRBC"),
cbind(Ig_log.diff[[2]], cue = "Sexual iRBC log10"),
cbind(Ig.diff[[2]], cue = "Sexual iRBC"),
cbind(I_Ig_log.diff[[2]], cue = "Total iRBC log10"),
cbind(I_Ig.diff[[2]], cue = "Total iRBC")
)
# plot conversion time series
fig2c <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = cr)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = cr_bot, ymax = cr_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Conversion rate") +
theme_bw()
# plot fitness timeseries. When if tiness lost? At the latter part
fig2d <- ggplot() +
geom_line(data = reference.df, aes(x = time, y = tau)) +
geom_ribbon(data = diff.df, aes(x = time, ymin = tau_bot, ymax = tau_top), alpha = 0.3, fill = "red") +
facet_wrap(~cue, ncol = 2) +
labs(x = "Time (days)", y = "Transmission potential") +
theme_bw()
# arrange
fig2cd <- ggpubr::ggarrange(fig2c, fig2d, labels = c("B", "C"))
fig2 <- ggpubr::ggarrange(fig2b, fig2cd, ncol = 1, labels = c("A", ""))
ggsave(here("figures/report15/MC_simulation.png"), height = 7)
ggsave(here("figures/report15/MC_simulation.png"), height = 7.5)
fig2a <- ggplot() +
geom_point(data = fitness_var.df, aes(x = mean, y = std)) +
ggrepel::geom_label_repel(data = fitness_var.df, aes(x = mean, y = std, label = id)) +
theme_bw() +
labs(x = "Mean fitness", y = "Fitness tandard deviation")
fitness_var.df
