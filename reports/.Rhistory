cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source("~/Desktop/Project-Plasmodium/functions/test.R")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source("~/Desktop/Project-Plasmodium/functions/test.R")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "lsodar",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source("~/Desktop/Project-Plasmodium/functions/test.R")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "lsodar",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source("~/Desktop/Project-Plasmodium/functions/test.R")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "lsodar",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source("~/Desktop/Project-Plasmodium/functions/test.R")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "lsodar",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source("~/Desktop/Project-Plasmodium/functions/test.R")
source(here("functions/test.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "lsodar",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
library(fBasics)
x <- seq(0, 1, 100)
x <- seq(0, 1.5, 100)
y <- (Heaviside(x)*x)/2+0.5*Heaviside(x-6)*(6-x)
plot(x, y)
x
x <- seq(0, 1.5, 0.001)
x
x
y <- (Heaviside(x)*x)/2+0.5*Heaviside(x-6)*(6-x)
plot(x, y)
x <- seq(0, 6, 0.001)
y <- (Heaviside(x)*x)/2+0.5*Heaviside(x-6)*(6-x)
plot(x, y)
x <- seq(0, 10, 0.001)
y <- (Heaviside(x)*x)/2+0.5*Heaviside(x-6)*(6-x)
plot(x, y)
y <- (Heaviside(x)*x)/2+0.5*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)/2+Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)/2+0.5*Heaviside(x-1)*(1-x)
plot(x, y)
x <- seq(0, 1.5, 0.001)
y <- (Heaviside(x)*x)/2+0.5*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+0.5*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)/2+0.5*Heaviside(x-1)*(1-x)
plot(x, y)
y <- 2*(Heaviside(x)*x)/2+0.5*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)/2+0.6*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)/2+0.5*Heaviside(x-1)*(1-x)
y <- (Heaviside(x)*x)/3+0.5*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+0.5*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+2*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+1.9*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+1.5*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+3*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+0.5*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+0.9*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+*Heaviside(x-1)*(1-x)
plot(x, y)
y <- (Heaviside(x)*x)+Heaviside(x-1)*(1-x)
plot(x, y)
y <- ((Heaviside(x)*x)+Heaviside(x-1)*(1-x))-0.001
plot(x, y)
y
y <- ((Heaviside(x)*x)+Heaviside(x-0.999)*(0.999-x))
y
x <- seq(0, 1.5, 0.01)
y <- ((Heaviside(x)*x)+Heaviside(x-0.999)*(0.999-x))
y
x
y
source(here("functions/test2.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "lsodar",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
optim_pso(
objective_function = function(X)
test2(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "lsodar",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source(here("functions/test2.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test2(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "lsodar",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
optim_pso(
objective_function = function(X)
test2(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
x <- seq(-1 1.5, 0.01)
x <- seq(-1, 1.5, 0.01)
y <- ((Heaviside(x)*x)+Heaviside(x-0.999)*(0.999-x))
plot(x, y)
source(here("functions/test2.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test2(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
y
source(here("functions/test2.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test2(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
optim_pso(
objective_function = function(X)
test2(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
source(here("functions/test2.R"))
G_log_range <- seq(5e-324, log10(10^6), by = log10(10^6)/5000)
parameter_bounds <- cbind(c(-5, -100, -500, -500),
c(5, 100, 500, 500))
optim_pso(
objective_function = function(X)
test2(
parameters_cr = X,
parameters = parameters_tsukushi,
time_range = time_range,
cue = "G",
cue_range = G_log_range,
log_cue = "log10",
immunity = "tsukushi",
solver = "vode",
neg = TRUE),
number_of_parameters = 4,
parameter_bounds = parameter_bounds,
tryCall = TRUE,
log = "test.log")
plot(x, y)
x
y
x <- seq(-0.1, 1.5, 0.01)
y <- ((Heaviside(x)*x)+Heaviside(x-0.999)*(0.999-x))
plot(x, y)
x
y
x
y
library(dplyr)
library(tidyr)
paste0(here())
library(ggplot2)
library(dplyr)
library(here)
library(doParallel)
library(doRNG)
library(GA)
