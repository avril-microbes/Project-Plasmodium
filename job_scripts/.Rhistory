R_log_range <- seq(log10(10^6), log10(10^8), by = log10((10^8)-(10^6))/5000)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
library(ggplot2)
library(dplyr)
library(here)
library(doParallel)
library(doRNG)
library(GA)
library(optimParallel)
R_log_range <- seq(log10(10^6), log10(10^8), by = log10((10^8)-(10^6))/5000)
library(optimParallel)
R_log_range <- seq(log10(10^6), log10(10^8), by = log10((10^8)-(10^6))/5000)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
si_R_log.local <- optimParallel(
par =rep(-0.9841931, 12.20793, -30.23427, 63.48455),
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
log_cue = "log10",
cue_range = R_log_range,
solver = "vode")
library(optimParallel)
R_log_range <- seq(log10(10^6), log10(10^8), by = log10((10^8)-(10^6))/5000)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
si_R_log.local <- optimParallel(
par = c(-0.9841931, 12.20793, -30.23427, 63.48455),
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
log_cue = "log10",
cue_range = R_log_range,
solver = "vode")
source(here("functions/chabaudi_si_clean.R"))
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
si_R_log.local <- optimParallel(
par = c(-0.9841931, 12.20793, -30.23427, 63.48455),
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
log_cue = "log10",
cue_range = R_log_range,
solver = "vode")
source(here("functions/chabaudi_si_sto.R"))
source(here("functions/chabaudi_si_clean.R"))
parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6, # doubled form original
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
time_range <- seq(0, 20, by = 1e-3)
I_log_range <- seq(0, log10(10^8), by = log10(10^8)/5000)
library(optimParallel)
R_log_range <- seq(log10(10^6), log10(10^8), by = log10((10^8)-(10^6))/5000)
cl <- makeCluster(detectCores()); setDefaultCluster(cl = cl)
si_R_log.local <- optimParallel(
par = c(-0.9841931, 12.20793, -30.23427, 63.48455),
fn = chabaudi_si_clean,
control = list(trace = 6, fnscale = -1),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
log_cue = "log10",
cue_range = R_log_range,
solver = "vode")
stopCluster(cl)
si_R_log.local
source(here("fumctions/par_to_df.R"))
source(here("functions/par_to_df.R"))
si_R_log.rn <- par_to_df(c(-0.9462285,  12.3937075, -30.4948618,  63.3172971), R_log_range)
plot(si_R_log.rn$cue_range, si_R_log.rn$cr, type = "lines")
# plto dynamics
si_R_log.dyn <- chabaudi_si_clean(
parameters_cr = c(-0.9462285,  12.3937075, -30.4948618,  63.3172971)
immunity = "tsukushi",
# plto dynamics
si_R_log.dyn <- chabaudi_si_clean(
parameters_cr = c(-0.9462285,  12.3937075, -30.4948618,  63.3172971),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = time_range,
cue = "R",
log_cue = "log10",
cue_range = R_log_range,
solver = "vode",
dyn = TRUE
)
si_R_log.dyn
ggplot() +
geom_line(data =si_R_log.dyn, aes(x = time, y = value)) +
facet_wrap(~variables, scales = "free") +
theme_bw()
ggplot() +
geom_line(data = si_R_log.dyn, aes(x = time, y = value)) +
facet_wrap(~variables, scales = "free") +
theme_bw()
si_R_log.dyn
ggplot() +
geom_line(data = si_R_log.dyn, aes(x = time, y = value)) +
facet_wrap(~variable, scales = "free") +
theme_bw()
ggplot() +
geom_line(data = si_R_log.dyn, aes(x = time, y = value)) +
facet_wrap(~variable, scales = "free") +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) â‰ 
ggplot() +
geom_line(data = si_R_log.dyn, aes(x = time, y = value)) +
facet_wrap(~variable, scales = "free") +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
theme_bw()
plot(si_R_log.rn$cue_range, si_R_log.rn$cr, type = "lines")
