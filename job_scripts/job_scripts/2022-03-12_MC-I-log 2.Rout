
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # load library
> library(doParallel) 
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> library(here)
here() starts at /scratch/wanglu57/job_scripts
> library(doRNG)
Loading required package: rngtools
> library(arrow)

Attaching package: ‘arrow’

The following object is masked from ‘package:utils’:

    timestamp

> 
> # source functions
> source(here::here("chabaudi_si_sto.R"), local = T)
> source(here::here("monte_carlo.R"), local = T)
> 
> # Use the environment variable SLURM_CPUS_PER_TASK to set the number of cores.
> # This is for SLURM. Replace SLURM_CPUS_PER_TASK by the proper variable for your system.
> # Avoid manually setting a number of cores.
> ncores = Sys.getenv("SLURM_CPUS_PER_TASK") 
> 
> registerDoParallel(cores=ncores)# Shows the number of Parallel Workers to be used
> print(ncores) # this how many cores are available, and how many you have requested.
[1] ""
> getDoParWorkers()# you can compare with the number of actual workers
[1] ""
> registerDoRNG(137) # set seed for reproducibility
> 
> # load parameters
> #### CHANGE THIS BETWEEN RUNS!!!!
> cue_range <- seq(0, log10(10^7), by = log10(10^7)/5000)
> cue <- "I"
> log <- "log10"
> 
> #### stays the same between simulations
> parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
+                          lambda = 3.7*10^5,
+                          mu = 0.025, 
+                          p = 8*10^-6, # doubled form original
+                          alpha = 1, 
+                          alphag = 2, 
+                          beta = 5.721, 
+                          mum = 48, 
+                          mug = 4, 
+                          I0 = 43.85965, 
+                          Ig0 = 0, 
+                          a = 150, 
+                          b = 100, 
+                          sp = 1,
+                          psin = 16.69234,
+                          psiw = 0.8431785,
+                          phin = 0.03520591, 
+                          phiw = 550.842,
+                          iota = 2.18*(10^6),
+                          rho = 0.2627156)
> 
> time_range <- seq(0, 20, by = 1e-3)
> 
> # run monte carlo simulation. 10000 to be exact
> res <- foreach(i= 1:10, .packages = c("doParallel", "doRNG", "deSolve", "splines2", "stringr", "dplyr", "tidyr", "crone")) %dorng% {
+   monte_carlo(
+     parameters_cr = c(6.437168, 0.774665, -19.588253 , 5.618792), 
+     parameters = parameters_tsukushi, 
+     time_range = time_range, 
+     cue = cue, 
+     cue_range = cue_range, 
+     log_cue = log,
+     rho_sd = 0.2579136, 
+     beta_sd = 0.1722868, 
+     psin_sd = 0.5778196,
+     psiw_sd = 0.2355804, 
+     phin_sd = 0.02609495, 
+     phiw_sd = 0.8286213)}

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Error in mclapply(argsList, FUN, mc.preschedule = preschedule, mc.set.seed = set.seed,  : 
  'mc.cores' must be >= 1
Calls: %dorng% -> do.call -> %dopar% -> <Anonymous> -> mclapply
Execution halted
