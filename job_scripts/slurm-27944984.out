
Lmod is automatically replacing "intel/2020.1.217" with "gcc/9.3.0".


Due to MODULEPATH changes, the following have been reloaded:
  1) openmpi/4.0.3


R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # R script to submit parallelized genetic algorithm optimzied runs.
> 
> # load libraries
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> library(GA)
Package 'GA' version 3.2.2
Type 'citation("GA")' for citing this R package in publications.

Attaching package: ‘GA’

The following object is masked from ‘package:utils’:

    de

> library(here)
here() starts at /scratch/wanglu57/job_scripts
> library(doRNG)
Loading required package: rngtools
> 
> source(here::here("ga_verbose.R"), local = T)
> source(here::here("chabaudi_si_clean.R"), local = T)
> # load function
> #-----------------------------#
> # load in parameters
> #-----------------------------#
> parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
+                          lambda = 3.7*10^5,
+                          mu = 0.025, 
+                          p = 8*10^-6, # doubled form original
+                          alpha = 1, 
+                          alphag = 2, 
+                          beta = 5.721, 
+                          mum = 48, 
+                          mug = 4, 
+                          I0 = 43.85965, 
+                          Ig0 = 0, 
+                          a = 150, 
+                          b = 100, 
+                          sp = 1,
+                          psin = 16.69234,
+                          psiw = 0.8431785,
+                          phin = 0.03520591, 
+                          phiw = 550.842,
+                          iota = 2.18*(10^6),
+                          rho = 0.2627156)
> 
> time_range <- seq(0, 20, by = 1e-3)
> 
> G_range <- seq(0,10^9, by = (10^9)/5000)
> 
> #-----------------------------#
> # Begin parallelized code
> #----------------------------#
> 
> 
> # Create an array from the NODESLIST environnement variable
> nodeslist = unlist(strsplit(Sys.getenv("NODESLIST"), split=" "))
> 
> # Create the cluster with the nodes name. One process per count of node name.
> # nodeslist = node1 node1 node2 node2, means we are starting 2 processes on node1, likewise on node2.
> cl = makeCluster(nodeslist, type = "PSOCK") 
> registerDoParallel(cl)
> clusterExport(cl,c("ga_verbose", "time_range", "parameters_tsukushi", "G_range", "chabaudi_si_clean")) 
> clusterCall(cl, library, package = "mclust", character.only = TRUE)
[[1]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[2]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[3]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[4]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[5]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[6]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[7]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[8]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[9]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[10]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[11]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[12]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[13]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[14]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[15]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[16]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[17]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[18]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[19]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[20]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[21]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[22]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[23]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[24]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[25]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[26]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[27]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[28]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[29]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[30]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[31]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[32]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[33]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[34]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[35]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[36]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[37]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[38]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[39]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[40]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[41]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[42]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[43]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[44]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[45]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[46]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[47]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[48]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

> ga_res <- ga_verbose(type = "real-valued", 
+                      function(x)
+                        chabaudi_si_clean(
+                          parameters_cr = c(x[1], x[2], x[3], x[4]), 
+                          parameters = parameters_tsukushi, 
+                          time_range = time_range, 
+                          cue = "G", 
+                          cue_range = G_range, 
+                          log_cue = "none",
+                          immunity = "tsukushi",
+                          solver = "vode"),
+                      lower = c(-5, -100, -500, -1000), # range determined that would alter shape of spline
+                      upper = c(5,100,500, 1000),  
+                      popSize = 500, 
+                      maxiter = 500, # change to 10 for testing purpose 
+                      pmutation = 0.3,
+                      keepBest = TRUE,
+                      run = 50,
+                      parallel = cl,
+                      seed = 137,
+                      monitor = TRUE,
+                      id = "2022-02-27_ga-si-G")
-0.1563341 94.96667 29.18104 -974.3392[[1]]
           [,1]     [,2]     [,3]      [,4]
[1,] -0.1563341 94.96667 29.18104 -974.3392

[[2]]
[1] 7.952573

GA | iter = 1 | Mean = 1.066912 | Best = 7.952573
-0.1629394 -24.61053 264.7314 -516.6501[[1]]
           [,1]      [,2]     [,3]      [,4]
[1,] -0.1629394 -24.61053 264.7314 -516.6501

[[2]]
[1] 7.954454

GA | iter = 2 | Mean = 2.188791 | Best = 7.954454
-0.1629394 -24.61053 264.7314 -516.6501[[1]]
           [,1]      [,2]     [,3]      [,4]
[1,] -0.1629394 -24.61053 264.7314 -516.6501

[[2]]
[1] 7.954454

GA | iter = 3 | Mean = 4.188041 | Best = 7.954454
-0.1602741 -31.00404 105.4833 309.7503[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1602741 -31.00404 105.4833 309.7503

[[2]]
[1] 7.954737

GA | iter = 4 | Mean = 6.690614 | Best = 7.954737
-0.1616232 -64.30819 -13.20573 -72.47031[[1]]
           [,1]      [,2]      [,3]      [,4]
[1,] -0.1616232 -64.30819 -13.20573 -72.47031

[[2]]
[1] 7.95518

GA | iter = 5 | Mean = 7.080929 | Best = 7.955180
-0.1595405 -71.65903 -113.8527 -262.7129[[1]]
           [,1]      [,2]      [,3]      [,4]
[1,] -0.1595405 -71.65903 -113.8527 -262.7129

[[2]]
[1] 7.955375

GA | iter = 6 | Mean = 7.071463 | Best = 7.955375
-0.1595405 -71.65903 -113.8527 -262.7129[[1]]
           [,1]      [,2]      [,3]      [,4]
[1,] -0.1595405 -71.65903 -113.8527 -262.7129

[[2]]
[1] 7.955375

GA | iter = 7 | Mean = 7.182548 | Best = 7.955375
-0.1573547 -79.61185 -164.4965 220.4647[[1]]
           [,1]      [,2]      [,3]     [,4]
[1,] -0.1573547 -79.61185 -164.4965 220.4647

[[2]]
[1] 7.955432

GA | iter = 8 | Mean = 7.403183 | Best = 7.955432
-0.1573547 -79.61185 -164.4965 220.4647[[1]]
           [,1]      [,2]      [,3]     [,4]
[1,] -0.1573547 -79.61185 -164.4965 220.4647

[[2]]
[1] 7.955432

GA | iter = 9 | Mean = 7.513634 | Best = 7.955432
-0.1601452 -76.77621 -42.73368 -99.22796[[1]]
           [,1]      [,2]      [,3]      [,4]
[1,] -0.1601452 -76.77621 -42.73368 -99.22796

[[2]]
[1] 7.955443

GA | iter = 10 | Mean = 7.298929 | Best = 7.955443
-0.1601452 -76.77621 -42.73368 -99.22796[[1]]
           [,1]      [,2]      [,3]      [,4]
[1,] -0.1601452 -76.77621 -42.73368 -99.22796

[[2]]
[1] 7.955443

GA | iter = 11 | Mean = 7.230467 | Best = 7.955443
-0.1601452 -76.77621 -42.73368 -99.22796[[1]]
           [,1]      [,2]      [,3]      [,4]
[1,] -0.1601452 -76.77621 -42.73368 -99.22796

[[2]]
[1] 7.955443

GA | iter = 12 | Mean = 7.537538 | Best = 7.955443
-0.1629893 -96.09318 -26.43858 -22.58733[[1]]
           [,1]      [,2]      [,3]      [,4]
[1,] -0.1629893 -96.09318 -26.43858 -22.58733

[[2]]
[1] 7.955526

GA | iter = 13 | Mean = 7.353417 | Best = 7.955526
-0.1622437 -98.30445 -73.73933 -164.2776[[1]]
           [,1]      [,2]      [,3]      [,4]
[1,] -0.1622437 -98.30445 -73.73933 -164.2776

[[2]]
[1] 7.955641

GA | iter = 14 | Mean = 7.539787 | Best = 7.955641
-0.1622437 -98.30445 -73.73933 -164.2776[[1]]
           [,1]      [,2]      [,3]      [,4]
[1,] -0.1622437 -98.30445 -73.73933 -164.2776

[[2]]
[1] 7.955641

GA | iter = 15 | Mean = 7.300689 | Best = 7.955641
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 16 | Mean = 7.425117 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 17 | Mean = 7.431585 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 18 | Mean = 7.429972 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 19 | Mean = 7.576123 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 20 | Mean = 7.410570 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 21 | Mean = 7.477546 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 22 | Mean = 7.289225 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 23 | Mean = 7.419291 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 24 | Mean = 7.465169 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 25 | Mean = 7.418862 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 26 | Mean = 7.394978 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 27 | Mean = 7.234786 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 28 | Mean = 7.388201 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 29 | Mean = 7.265439 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 30 | Mean = 7.351749 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 31 | Mean = 7.539337 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 32 | Mean = 7.425998 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 33 | Mean = 7.445244 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 34 | Mean = 7.569304 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 35 | Mean = 7.387247 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 36 | Mean = 7.352784 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 37 | Mean = 7.369079 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 38 | Mean = 7.368675 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 39 | Mean = 7.407433 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 40 | Mean = 7.331199 | Best = 7.955767
-0.1602 -98.0766 -149.8085 -206.9097[[1]]
        [,1]     [,2]      [,3]      [,4]
[1,] -0.1602 -98.0766 -149.8085 -206.9097

[[2]]
[1] 7.955767

GA | iter = 41 | Mean = 7.323400 | Best = 7.955767
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 42 | Mean = 7.487446 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 43 | Mean = 7.513259 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 44 | Mean = 7.559982 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 45 | Mean = 7.494935 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 46 | Mean = 7.389723 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 47 | Mean = 7.391999 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 48 | Mean = 7.508218 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 49 | Mean = 7.414409 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 50 | Mean = 7.350781 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 51 | Mean = 7.277301 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 52 | Mean = 7.436278 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 53 | Mean = 7.122604 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 54 | Mean = 7.332235 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 55 | Mean = 7.388233 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 56 | Mean = 7.422619 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 57 | Mean = 7.307221 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 58 | Mean = 7.348730 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 59 | Mean = 7.326100 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 60 | Mean = 7.412296 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 61 | Mean = 7.354543 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 62 | Mean = 7.563355 | Best = 7.955773
-0.1595022 -97.62366 11.56208 67.83819[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1595022 -97.62366 11.56208 67.83819

[[2]]
[1] 7.955773

GA | iter = 63 | Mean = 7.537703 | Best = 7.955773
-0.1594822 -97.69109 -30.29265 -90.1885[[1]]
           [,1]      [,2]      [,3]     [,4]
[1,] -0.1594822 -97.69109 -30.29265 -90.1885

[[2]]
[1] 7.955774

GA | iter = 64 | Mean = 7.369039 | Best = 7.955774
-0.1594822 -97.69109 -30.29265 -90.1885[[1]]
           [,1]      [,2]      [,3]     [,4]
[1,] -0.1594822 -97.69109 -30.29265 -90.1885

[[2]]
[1] 7.955774

GA | iter = 65 | Mean = 7.370767 | Best = 7.955774
-0.1594822 -97.69109 -30.29265 -90.1885[[1]]
           [,1]      [,2]      [,3]     [,4]
[1,] -0.1594822 -97.69109 -30.29265 -90.1885

[[2]]
[1] 7.955774

GA | iter = 66 | Mean = 7.510678 | Best = 7.955774
-0.1594822 -97.69109 -30.29265 -90.1885[[1]]
           [,1]      [,2]      [,3]     [,4]
[1,] -0.1594822 -97.69109 -30.29265 -90.1885

[[2]]
[1] 7.955774

GA | iter = 67 | Mean = 7.337742 | Best = 7.955774
-0.1594822 -97.69109 -30.29265 -90.1885[[1]]
           [,1]      [,2]      [,3]     [,4]
[1,] -0.1594822 -97.69109 -30.29265 -90.1885

[[2]]
[1] 7.955774

GA | iter = 68 | Mean = 7.395105 | Best = 7.955774
-0.1594822 -97.69109 -30.29265 -90.1885[[1]]
           [,1]      [,2]      [,3]     [,4]
[1,] -0.1594822 -97.69109 -30.29265 -90.1885

[[2]]
[1] 7.955774

GA | iter = 69 | Mean = 7.459875 | Best = 7.955774
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 70 | Mean = 7.436117 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 71 | Mean = 7.381763 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 72 | Mean = 7.336548 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 73 | Mean = 7.374637 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 74 | Mean = 7.448938 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 75 | Mean = 7.401092 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 76 | Mean = 7.308646 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 77 | Mean = 7.484797 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 78 | Mean = 7.468158 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 79 | Mean = 7.330746 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 80 | Mean = 7.367259 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 81 | Mean = 7.473779 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 82 | Mean = 7.448768 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 83 | Mean = 7.337298 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 84 | Mean = 7.430001 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 85 | Mean = 7.465627 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 86 | Mean = 7.430384 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 87 | Mean = 7.365178 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 88 | Mean = 7.433693 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 89 | Mean = 7.529869 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 90 | Mean = 7.336391 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 91 | Mean = 7.559608 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 92 | Mean = 7.487813 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 93 | Mean = 7.355839 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 94 | Mean = 7.411861 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 95 | Mean = 7.403540 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 96 | Mean = 7.325509 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 97 | Mean = 7.342709 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 98 | Mean = 7.278456 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 99 | Mean = 7.438597 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 100 | Mean = 7.519289 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 101 | Mean = 7.399778 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 102 | Mean = 7.417186 | Best = 7.955806
-0.1593594 -99.77109 201.5992 20.97872[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1593594 -99.77109 201.5992 20.97872

[[2]]
[1] 7.955806

GA | iter = 103 | Mean = 7.567619 | Best = 7.955806
slurmstepd: error: *** JOB 27944984 ON cdr2316 CANCELLED AT 2022-02-27T21:56:27 DUE TO TIME LIMIT ***
