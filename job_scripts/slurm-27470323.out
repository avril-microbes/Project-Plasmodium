
Lmod is automatically replacing "intel/2020.1.217" with "gcc/9.3.0".


Due to MODULEPATH changes, the following have been reloaded:
  1) openmpi/4.0.3


R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # R script to submit parallelized genetic algorithm optimzied runs.
> 
> # load libraries
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> library(GA)
Package 'GA' version 3.2.2
Type 'citation("GA")' for citing this R package in publications.

Attaching package: ‘GA’

The following object is masked from ‘package:utils’:

    de

> library(here)
here() starts at /project/6004331/wanglu57/Project_Plasmodium
> library(doRNG)
Loading required package: rngtools
> 
> source(here::here("functions/ga_verbose.R"), local = T)
> source(here::here("functions/chabaudi_si_clean.R"), local = T)
> # load function
> #-----------------------------#
> # load in parameters
> #-----------------------------#
> parameters_tsukushi <- c(R1 = 8.89*10^6, # slightly higher
+                          lambda = 3.7*10^5,
+                          mu = 0.025, 
+                          p = 8*10^-6, # doubled form original
+                          alpha = 1, 
+                          alphag = 2, 
+                          beta = 5.721, 
+                          mum = 48, 
+                          mug = 4, 
+                          I0 = 43.85965, 
+                          Ig0 = 0, 
+                          a = 150, 
+                          b = 100, 
+                          sp = 1,
+                          psin = 16.69234,
+                          psiw = 0.8431785,
+                          phin = 0.03520591, 
+                          phiw = 550.842,
+                          iota = 2.18*(10^6),
+                          rho = 0.2627156)
> 
> time_range <- seq(0, 20, by = 1e-3)
> 
> G_range <- seq(0, 10^5, by = (10^5)/5000)
> 
> #-----------------------------#
> # Begin parallelized code
> #----------------------------#
> 
> 
> # Create an array from the NODESLIST environnement variable
> nodeslist = unlist(strsplit(Sys.getenv("NODESLIST"), split=" "))
> 
> # Create the cluster with the nodes name. One process per count of node name.
> # nodeslist = node1 node1 node2 node2, means we are starting 2 processes on node1, likewise on node2.
> cl = makeCluster(nodeslist, type = "PSOCK") 
> registerDoParallel(cl)
> clusterExport(cl,c("ga_verbose", "time_range", "parameters_tsukushi", "G_range", "chabaudi_si_clean")) 
> clusterCall(cl, library, package = "mclust", character.only = TRUE)
[[1]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[2]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[3]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[4]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[5]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[6]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[7]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[8]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[9]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[10]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[11]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[12]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[13]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[14]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[15]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[16]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[17]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[18]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[19]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[20]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[21]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[22]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[23]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[24]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[25]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[26]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[27]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[28]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[29]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[30]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[31]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[32]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[33]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[34]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[35]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[36]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[37]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[38]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[39]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[40]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[41]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[42]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[43]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[44]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[45]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[46]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[47]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[48]]
[1] "mclust"    "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

> ga_res <- ga_verbose(type = "real-valued", 
+                      function(x)
+                        chabaudi_si_clean(
+                          parameters_cr = c(x[1], x[2], x[3], x[4]), 
+                          parameters = parameters_tsukushi, 
+                          time_range = time_range, 
+                          cue = "G", 
+                          cue_range = G_range, 
+                          log_cue = "none",
+                          immunity = "tsukushi",
+                          solver = "vode"),
+                      lower = c(-5, -100, -500, -1000), # range determined that would alter shape of spline
+                      upper = c(5,100,500, 1000),  
+                      popSize = 500, 
+                      maxiter = 500, # change to 10 for testing purpose 
+                      pmutation = 0.3,
+                      keepBest = TRUE,
+                      run = 50,
+                      parallel = cl,
+                      seed = 137,
+                      monitor = TRUE,
+                      id = "2022-02-22_ga-si-G")
-0.09077845 -20.33781 354.9105 -649.667[[1]]
            [,1]      [,2]     [,3]     [,4]
[1,] -0.09077845 -20.33781 354.9105 -649.667

[[2]]
[1] 6.531152

GA | iter = 1 | Mean = 0.5678472 | Best = 6.5311524
-0.4284956 4.002098 -71.65765 -808.4734[[1]]
           [,1]     [,2]      [,3]      [,4]
[1,] -0.4284956 4.002098 -71.65765 -808.4734

[[2]]
[1] 6.745379

GA | iter = 2 | Mean = 1.060048 | Best = 6.745379
0.2727244 -22.02429 158.6858 -362.0736[[1]]
          [,1]      [,2]     [,3]      [,4]
[1,] 0.2727244 -22.02429 158.6858 -362.0736

[[2]]
[1] 6.976903

GA | iter = 3 | Mean = 1.847962 | Best = 6.976903
-0.3601568 8.790622 -114.2716 224.593[[1]]
           [,1]     [,2]      [,3]    [,4]
[1,] -0.3601568 8.790622 -114.2716 224.593

[[2]]
[1] 7.263406

GA | iter = 4 | Mean = 2.832269 | Best = 7.263406
-0.3601568 8.790622 -114.2716 224.593[[1]]
           [,1]     [,2]      [,3]    [,4]
[1,] -0.3601568 8.790622 -114.2716 224.593

[[2]]
[1] 7.263406

GA | iter = 5 | Mean = 3.660926 | Best = 7.263406
0.1068128 -7.549098 49.60833 18.83373[[1]]
          [,1]      [,2]     [,3]     [,4]
[1,] 0.1068128 -7.549098 49.60833 18.83373

[[2]]
[1] 7.623482

GA | iter = 6 | Mean = 4.472139 | Best = 7.623482
-0.1423898 -1.397271 8.474527 47.11502[[1]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1423898 -1.397271 8.474527 47.11502

[[2]]
[1] 8.057475

GA | iter = 7 | Mean = 4.801423 | Best = 8.057475
-0.07948651 -4.898617 28.06441 245.9881[[1]]
            [,1]      [,2]     [,3]     [,4]
[1,] -0.07948651 -4.898617 28.06441 245.9881

[[2]]
[1] 8.147416

GA | iter = 8 | Mean = 4.951840 | Best = 8.147416
0.04410111 -7.527277 84.65198 -778.4234[[1]]
           [,1]      [,2]     [,3]      [,4]
[1,] 0.04410111 -7.527277 84.65198 -778.4234

[[2]]
[1] 8.273121

GA | iter = 9 | Mean = 5.321218 | Best = 8.273121
0.04410111 -7.527277 84.65198 -778.4234[[1]]
           [,1]      [,2]     [,3]      [,4]
[1,] 0.04410111 -7.527277 84.65198 -778.4234

[[2]]
[1] 8.273121

GA | iter = 10 | Mean = 5.234883 | Best = 8.273121
0.04410111 -7.527277 84.65198 -778.4234[[1]]
           [,1]      [,2]     [,3]      [,4]
[1,] 0.04410111 -7.527277 84.65198 -778.4234

[[2]]
[1] 8.273121

GA | iter = 11 | Mean = 5.323504 | Best = 8.273121
-0.06434469 -9.143103 88.09898 -543.9531[[1]]
            [,1]      [,2]     [,3]      [,4]
[1,] -0.06434469 -9.143103 88.09898 -543.9531

[[2]]
[1] 8.349375

GA | iter = 12 | Mean = 5.771235 | Best = 8.349375
-0.06434469 -9.143103 88.09898 -543.9531[[1]]
            [,1]      [,2]     [,3]      [,4]
[1,] -0.06434469 -9.143103 88.09898 -543.9531

[[2]]
[1] 8.349375

GA | iter = 13 | Mean = 5.701803 | Best = 8.349375
-0.06434469 -9.143103 88.09898 -543.9531[[1]]
            [,1]      [,2]     [,3]      [,4]
[1,] -0.06434469 -9.143103 88.09898 -543.9531

[[2]]
[1] 8.349375

GA | iter = 14 | Mean = 5.849523 | Best = 8.349375
-0.06434469 -9.143103 88.09898 -543.9531[[1]]
            [,1]      [,2]     [,3]      [,4]
[1,] -0.06434469 -9.143103 88.09898 -543.9531

[[2]]
[1] 8.349375

GA | iter = 15 | Mean = 5.780112 | Best = 8.349375
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 16 | Mean = 5.989905 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 17 | Mean = 6.041750 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 18 | Mean = 6.057188 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 19 | Mean = 6.120978 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 20 | Mean = 6.205397 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 21 | Mean = 6.200324 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 22 | Mean = 6.035559 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 23 | Mean = 6.277061 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 24 | Mean = 6.175083 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 25 | Mean = 6.304481 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 26 | Mean = 6.168182 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 27 | Mean = 6.107222 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 28 | Mean = 6.283599 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 29 | Mean = 6.069213 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 30 | Mean = 5.891390 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 31 | Mean = 6.263203 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 32 | Mean = 6.211588 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 33 | Mean = 6.259082 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 34 | Mean = 6.247227 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 35 | Mean = 6.215670 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 36 | Mean = 6.203473 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 37 | Mean = 6.259364 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 38 | Mean = 6.078580 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 39 | Mean = 6.088023 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 40 | Mean = 5.953408 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 41 | Mean = 5.982015 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 42 | Mean = 6.083903 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 43 | Mean = 6.274058 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 44 | Mean = 6.384536 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 45 | Mean = 6.283294 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 46 | Mean = 6.305074 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 47 | Mean = 6.253550 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 48 | Mean = 6.442319 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 49 | Mean = 6.441003 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 50 | Mean = 6.420145 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 51 | Mean = 6.424094 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 52 | Mean = 6.426910 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 53 | Mean = 6.196879 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 54 | Mean = 6.372423 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 55 | Mean = 6.482266 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 56 | Mean = 6.376497 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 57 | Mean = 6.186322 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 58 | Mean = 6.125411 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 59 | Mean = 6.222598 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 60 | Mean = 6.352631 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 61 | Mean = 6.307386 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 62 | Mean = 6.466696 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 63 | Mean = 6.638271 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 64 | Mean = 6.291622 | Best = 8.461212
-0.01397668 -8.80356 103.2753 -836.5864[[1]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[2]]
[1] 8.461212

GA | iter = 65 | Mean = 6.379836 | Best = 8.461212

> stopCluster(cl)
> 
> print(list(ga_res@bestSol, ga_res@fitnessValue))
[[1]]
[[1]][[1]]
            [,1]      [,2]     [,3]     [,4]
[1,] -0.09077845 -20.33781 354.9105 -649.667

[[1]][[2]]
           [,1]     [,2]      [,3]      [,4]
[1,] -0.4284956 4.002098 -71.65765 -808.4734

[[1]][[3]]
          [,1]      [,2]     [,3]      [,4]
[1,] 0.2727244 -22.02429 158.6858 -362.0736

[[1]][[4]]
           [,1]     [,2]      [,3]    [,4]
[1,] -0.3601568 8.790622 -114.2716 224.593

[[1]][[5]]
           [,1]     [,2]      [,3]    [,4]
[1,] -0.3601568 8.790622 -114.2716 224.593

[[1]][[6]]
          [,1]      [,2]     [,3]     [,4]
[1,] 0.1068128 -7.549098 49.60833 18.83373

[[1]][[7]]
           [,1]      [,2]     [,3]     [,4]
[1,] -0.1423898 -1.397271 8.474527 47.11502

[[1]][[8]]
            [,1]      [,2]     [,3]     [,4]
[1,] -0.07948651 -4.898617 28.06441 245.9881

[[1]][[9]]
           [,1]      [,2]     [,3]      [,4]
[1,] 0.04410111 -7.527277 84.65198 -778.4234

[[1]][[10]]
           [,1]      [,2]     [,3]      [,4]
[1,] 0.04410111 -7.527277 84.65198 -778.4234

[[1]][[11]]
           [,1]      [,2]     [,3]      [,4]
[1,] 0.04410111 -7.527277 84.65198 -778.4234

[[1]][[12]]
            [,1]      [,2]     [,3]      [,4]
[1,] -0.06434469 -9.143103 88.09898 -543.9531

[[1]][[13]]
            [,1]      [,2]     [,3]      [,4]
[1,] -0.06434469 -9.143103 88.09898 -543.9531

[[1]][[14]]
            [,1]      [,2]     [,3]      [,4]
[1,] -0.06434469 -9.143103 88.09898 -543.9531

[[1]][[15]]
            [,1]      [,2]     [,3]      [,4]
[1,] -0.06434469 -9.143103 88.09898 -543.9531

[[1]][[16]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[17]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[18]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[19]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[20]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[21]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[22]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[23]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[24]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[25]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[26]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[27]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[28]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[29]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[30]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[31]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[32]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[33]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[34]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[35]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[36]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[37]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[38]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[39]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[40]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[41]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[42]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[43]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[44]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[45]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[46]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[47]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[48]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[49]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[50]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[51]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[52]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[53]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[54]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[55]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[56]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[57]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[58]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[59]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[60]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[61]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[62]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[63]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[64]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864

[[1]][[65]]
            [,1]     [,2]     [,3]      [,4]
[1,] -0.01397668 -8.80356 103.2753 -836.5864


[[2]]
[1] 8.461212

> 
> 
> 
