plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
mc_burst_RI_rug.wide
ggplot() +
geom_raster(data = mc_burst_rn_RI.df, aes(y = cue_range, x = cue_range_b, fill = cr)) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.75, color = "cyan", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = mc_burst_RI_rug.wide %>% filter(time %% 1 == 0), aes(x = I, y = R), size = 1, color = "cyan") +
scale_fill_viridis_c(option = "C") +
facet_wrap(~beta, ncol = 1) +
geom_ath(data = mc_burst_RI_rug.wide, aes(x = I, y = R, group = beta), size = 0.5, color = "white",
inherit.aes = F) +
labs(x = "Asexual iRBC log10", y = "RBC log10", fill = "Conversion\nrate") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
ggplot() +
geom_raster(data = mc_burst_rn_RI.df, aes(y = cue_range, x = cue_range_b, fill = cr)) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.75, color = "cyan", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = mc_burst_RI_rug.wide %>% filter(time %% 1 == 0), aes(x = I, y = R), size = 1, color = "cyan") +
scale_fill_viridis_c(option = "C") +
facet_wrap(~beta, ncol = 1) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R, group = beta), size = 0.5, color = "white",
inherit.aes = F) +
labs(x = "Asexual iRBC log10", y = "RBC log10", fill = "Conversion\nrate") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
ggplot() +
geom_raster(data = mc_burst_rn_RI.df, aes(y = cue_range, x = cue_range_b, fill = cr)) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.75, color = "cyan", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = mc_burst_RI_rug.wide %>% filter(time %% 1 == 0), aes(x = I, y = R), size = 1, color = "cyan") +
scale_fill_viridis_c(option = "C") +
facet_wrap(~beta, ncol = 1) +
geom_line(data = mc_burst_RI_rug.wide, aes(x = I, y = R, group = beta), size = 0.5, color = "white",
inherit.aes = F) +
labs(x = "Asexual iRBC log10", y = "RBC log10", fill = "Conversion\nrate") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
ggplot() +
geom_raster(data = mc_burst_rn_RI.df, aes(y = cue_range, x = cue_range_b, fill = cr)) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.75, color = "cyan", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = mc_burst_RI_rug.wide %>% filter(time %% 1 == 0), aes(x = I, y = R), size = 1, color = "cyan") +
scale_fill_viridis_c(option = "C") +
facet_wrap(~beta, ncol = 1) +
labs(x = "Asexual iRBC log10", y = "RBC log10", fill = "Conversion\nrate") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
ggplot() +
geom_raster(data = mc_burst_rn_RI.df, aes(y = cue_range, x = cue_range_b, fill = cr)) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.75, color = "cyan", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = mc_burst_RI_rug.wide %>% filter(time %% 1 == 0), aes(x = I, y = R), size = 1, color = "cyan") +
scale_fill_viridis_c(option = "C") +
facet_wrap(~beta, ncol = 1) +
geom_line(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.5, color = "white") +
labs(x = "Asexual iRBC log10", y = "RBC log10", fill = "Conversion\nrate") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
ggplot() +
geom_raster(data = mc_burst_rn_RI.df, aes(y = cue_range, x = cue_range_b, fill = cr)) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.75, color = "cyan", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = mc_burst_RI_rug.wide %>% filter(time %% 1 == 0), aes(x = I, y = R), size = 1, color = "cyan") +
scale_fill_viridis_c(option = "C") +
facet_wrap(~beta, ncol = 1) +
geom_line(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.5, color = "white", inherit.aes = F) +
labs(x = "Asexual iRBC log10", y = "RBC log10", fill = "Conversion\nrate") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
ggplot() +
geom_raster(data = mc_burst_rn_RI.df, aes(y = cue_range, x = cue_range_b, fill = cr)) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.75, color = "cyan", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = mc_burst_RI_rug.wide %>% filter(time %% 1 == 0), aes(x = I, y = R), size = 1, color = "cyan") +
scale_fill_viridis_c(option = "C") +
facet_wrap(~beta, ncol = 1) +
geom_line(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.5, color = "white", inherit.aes = T) +
labs(x = "Asexual iRBC log10", y = "RBC log10", fill = "Conversion\nrate") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
mc_burst_RI_rug.wide
ggplot() +
geom_line(mc_burst_RI_rug.wide, aes(x = R, y = I, group = beta))
ggplot() +
geom_line(data = mc_burst_RI_rug.wide, aes(x = R, y = I, group = beta))
ggplot() +
geom_line(data = mc_burst_RI_rug.wide %>% group_by(beta) %>% arrange(time), aes(x = R, y = I, group = beta))
mc_burst_RI_rug.wide %>% group_by(beta) %>% arrange(time)
ggplot() +
geom_line(data = mc_burst_RI_rug.wide %>% group_by(beta) %>% arrange(time, .by_group = T),
aes(x = R, y = I, group = beta))
mc_burst_RI_rug.wide %>% group_by(beta) %>% arrange(time, .by_group = T)
ggplot() +
geom_line(data = mc_burst_RI_rug.wide ,
aes(x = R, y = I, group = interaction(beta, time)))
ggplot() +
geom_line(data = mc_burst_RI_rug.wide ,
aes(x = R, y = I, group = time))
ggplot() +
geom_line(data = mc_burst_RI_rug.wide ,
aes(x = R, y = I, group = interaction(beta, time)))
ggplot() +
geom_line(data = mc_burst_RI_rug.wide ,
aes(x = R, y = I, group = beta))
ggplot() +
geom_line(data = mc_burst_RI_rug.wide ,
aes(x = R, y = I, group = as.factor(beta)))
ggplot(mc_burst_RI_rug.wide, aes(x = R, y = I, group = beta)) +
geom_line()
ggplot(mc_burst_RI_rug.wide %>% ungroup(), aes(x = R, y = I, group = beta)) +
geom_line()
ggplot(mc_burst_RI_rug.wide, aes(x = R, y = I, color = beta)) +
geom_line()
ggplot(mc_burst_RI_rug.wide, aes(x = R, y = I, color = beta, group = beta)) +
geom_line()
ggplot(mc_burst_RI_rug.wide, aes(x = R, y = I, color = beta, group = as.character(beta))) +
geom_line()
ggplot(mc_burst_RI_rug.wide, aes(x = R, y = I, group = as.character(beta))) +
geom_line()
ggplot(mc_burst_RI_rug.wide %>% group_by(beta) %>% arrange(time, .by_group = T), aes(x = R, y = I, group = as.character(beta))) +
geom_line()
ggplot(mc_burst_RI_rug.wide, aes(x = R, y = I, group = beta)) +
geom_line()
ggplot(mc_burst_RI_rug.wide, aes(x = R, y = I)) +
geom_line()
ggplot(mc_burst_RI_rug.wide, aes(x = R, y = I, group = beta)) +
geom_point()
mc_burst_rn_dc.pl +
ggplot(mc_burst_RI_rug.wide, aes(x = R, y = I, group = beta)) +
geom_point()
mc_burst_rn_dc.pl +
ggplot() +
geom_point(mc_burst_RI_rug.wide, aes(x = R, y = I, group = beta))
mc_burst_rn_dc.pl +
geom_point(data = mc_burst_RI_rug.wide, aes(x = R, y = I, group = beta))
mc_burst_rn_dc.pl +
geom_point(data = mc_burst_RI_rug.wide, aes(x = R, y = I))
mc_burst_rn_dc.pl +
geom_point(data = mc_burst_RI_rug.wide, aes(x = R, y = I), inherit.aes = F)
mc_burst_rn_dc.pl +
geom_point(data = mc_burst_RI_rug.wide, aes(x = R, y = I), color = "white", inherit.aes = F)
## dual cue
mc_burst_rn_dc.pl <- ggplot() +
geom_raster(data = mc_burst_rn_RI.df, aes(y = cue_range, x = cue_range_b, fill = cr)) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.75, color = "cyan", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = mc_burst_RI_rug.wide %>% filter(time %% 1 == 0), aes(x = I, y = R), size = 1, color = "cyan") +
scale_fill_viridis_c(option = "C") +
facet_wrap(~beta, ncol = 1) +
geom_line(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.5, color = "white", inherit.aes = T) +
labs(x = "Asexual iRBC log10", y = "RBC log10", fill = "Conversion\nrate") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
mc_burst_rn_dc.pl +
geom_point(data = mc_burst_RI_rug.wide, aes(x = R, y = I), color = "white", inherit.aes = F)
## dual cue
mc_burst_rn_dc.pl <- ggplot() +
geom_raster(data = mc_burst_rn_RI.df, aes(y = cue_range, x = cue_range_b, fill = cr)) +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), size = 0.75, color = "cyan", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = mc_burst_RI_rug.wide %>% filter(time %% 1 == 0), aes(x = I, y = R), size = 1, color = "cyan") +
scale_fill_viridis_c(option = "C") +
facet_wrap(~beta, ncol = 1) +
labs(x = "Asexual iRBC log10", y = "RBC log10", fill = "Conversion\nrate") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle=element_text(size=13)) +
scale_y_continuous(labels = label_number(accuracy = 0.1),
limits = c(6.8,7))
mc_burst_rn_dc.pl +
geom_point(data = mc_burst_RI_rug.wide, aes(x = R, y = I), color = "white", inherit.aes = F)
mc_burst_rn_dc.pl +
geom_point(data = mc_burst_RI_rug.wide, aes(x = I, y = R), color = "white", inherit.aes = F)
mc_burst_rn_dc.pl +
geom_line(data = mc_burst_RI_rug.wide, aes(x = I, y = R), color = "white", inherit.aes = F)
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), color = "black", inherit.aes = F)
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R, group = beta), color = "black", inherit.aes = F)
ggplot() +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R, group = beta), color = "black", inherit.aes = F)
mc_burst_rn_dc.pl +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R, group = beta), color = "white", inherit.aes = F)
mc_burst_rn_dc.pl +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), color = "white", inherit.aes = F)
ggplot() +
geom_path(data = mc_burst_RI_rug.wide, aes(x = I, y = R), color = "black", inherit.aes = F)
mc_burst_rn_dc.pl +
geom_path(data = mc_burst_RI_rug.wide %>% select(I, R, beta2 = beta), aes(x = I, y = R, group = beta2), color = "white", inherit.aes = F)
mc_burst_rn_RI.df %>%
filter(beta != 3.98) %>%
group_by(cue_range, cue_range_b) %>%
mutate(sd = sd(cr)) %>%
ggplot() + geom_raster(aes(x = cue_range_b, y = cue_range, fill = sd))
here()
library(dplyr)
library(ggplot2)
library(forcats)
library(here)
library(deSolve)
library(crone)
library(optimParallel)
library(doParallel)
library(doRNG)
library(arrow)
library(stringr)
library(parallel)
library(ggpubr)
library(scales)
library(bayestestR)
library(purrr)
library(tidyr)
library(splines2)
here()
parameters_tsukushi <- c(R1 = 8.89*10^6,
lambda = 3.7*10^5,
mu = 0.025,
p = 8*10^-6,
alpha = 1,
alphag = 2,
beta = 5.721,
mum = 48,
mug = 4,
I0 = 43.85965,
Ig0 = 0,
a = 150,
b = 100,
sp = 1,
psin = 16.69234,
psiw = 0.8431785,
phin = 0.03520591,
phiw = 550.842,
iota = 2.18*(10^6),
rho = 0.2627156)
# import in data files
ez_label <- read.csv(here("code_repository/data/ez_label.csv")) ## labelling schene
si_opt.df <- read.csv(here("code_repository/data/si_opt.csv")) ## optimized parameter + fitness list
si_dyn.df <- read_parquet(here("code_repository/data/si_dyn.parquet")) ## dynamics of single cue models
si_rn.df <-  read_parquet(here("code_repository/data/si_rn.parquet")) ## reaction norms of single cue models
si_rug.df <- read_parquet(here("code_repository/data/si_rug.parquet")) ## data for rug plots
mc_all_fitness.df <- read_parquet(here("code_repository/data/mc_all_fitness.parquet")) ## fitness values for mc when all parameters are varying
mc_single_fitness.df <- read_parquet(here("code_repository/data/mc_single_fitness.parquet")) ## fitness values for mc when only one parameter is varying
dual_cue_f_lc.df <- read.csv(here("code_repository/data/dual_cue_fitness_local.csv")) ## optimized dual cue strategy using L-BFGS-B
dual_cue_f_glb.df <- read.csv(here("code_repository/data/dual_cue_fitness_global.csv")) ## optimized dual cue strategy using DEoptim + L-BFG
dual_cue_f_final.df <- read.csv(here("code_repository/data/dual_cue_fitness_final.csv")) ## final dataframe containing strategy that produced highest fitness (dual cue models)
dual_selected_cr.df <- read_parquet(here("code_repository/data/dual_selected_cr.parquet")) ## cr dynamics of selected models
cue_range_si_alt.df <- read.csv(here("code_repository/data/cue_range_si_alt.csv")) ## cue ranges for dual cue models
dual_cue_dyn.df <- read_parquet(here("code_repository/data/dual_cue_dyn.parquet")) ## dynamics of dual cue models
exp_ss.df <- read.csv(here("code_repository/data/experimental_data.csv")) ## cleaned experimental records of P. chabaudi infection
posterior.df <- read.csv(here("code_repository/data/posterior.csv")) ## posterior distribution of different parameter values
mc_burst.df <- read.csv(here("code_repository/data/mc_burst_opt.csv")) ## fitness values of cues when optimized with different beta values
mc_burst_single_input.df <- read.csv(here("code_repository/data/mc_burst_single_input.csv")) ## iput dataframe for simulating dyamics for for models optimized with different burst values (single cues only)
mc_burst_dual_input.df <- read.csv(here("code_repository/data/mc_burst_dual_input.csv")) ## ditto for R log + I log
mc_burst_final_diff.df <- read.csv(here("code_repository/data/mc_burst_final_diff.csv")) ## fitness of parasites adopting different parameters optimized for diff burst size but simulated with discordant burst size
mc_burst_rn.df <- read_parquet(here("code_repository/data/mc_burst_rn.parquet")) ## dataframe containing reaction norms of strains optimzied at various burst size filtered by relevant ranges (rug)
mc_burst_rn_RI.df <- read_parquet(here("code_repository/data/mc_burst_rn_RI.parquet")) ## dataframe containing reaction norms of strains optimzied at various burst size filtered by relevant ranges (rug)
mc_burst_rug.df_f <- read_parquet(here("code_repository/data/mc_burst_rug_f.parquet")) ## rug dataframe for parasites adopting the ideal strategy for various burst sizes
mc_burst_RI_rug.df <- read_parquet(here("code_repository/data/mc_burst_RI_rug.parquet")) ## dito but for R log and I log
mc_burst_dyn.df <- read_parquet(here("code_repository/data/mc_burst_dyn.parquet")) ## dynamics data for mc burst
# import in code
source(here("code_repository/functions/chabaudi_si_clean.R"))
source(here("code_repository/functions/par_to_df.R"))
source(here("code_repository/functions/chabaudi_si_clean_high.R"))
source(here("code_repository/functions/par_to_hm.R"))
source(here("code_repository/functions/par_to_hm_te.R"))
# color codes
orange <- "#fc8d59"
blue <- "#4575b4"
## validation data (comparing fitness to random spline)
validation.ls <- list.files(here("code_repository/data/si_validation/*.csv"))
## validation data (comparing fitness to random spline)
validation.ls <- list.files(here("code_repository/data/si_validation/*.csv"), full.names = T)
validation.df <- do.call(rbind, lapply(validation.ls, read.csv))
validation.df
## validation data (comparing fitness to random spline)
validation.ls <- list.files(here("code_repository/data/si_validation/*.csv"), full.names = T)
validation.ls
## validation data (comparing fitness to random spline)
validation.ls <- list.files(here("code_repository/data/si_validation/*.csv"), full.names = T)
validation.ls
## validation data (comparing fitness to random spline)
validation.ls <- list.files(here("code_repository/data/si_validation/"), full.names = T)
validation.ls
validation.df <- do.call(rbind, lapply(validation.ls, read.csv))
validation.df
validation.df
si_opt.df
validation.df
validation.df %>%
left_join(si_opt.df, by = c("id"))
validation.df %>%
left_join(select(si_opt.df, id, fitness_20), by = c("id"))
validation.df %>%
left_join(select(si_opt.df, id, fitness_20), by = c("id")) %>%
mutate(diff = fitness_20-V1)
## get difference betweent fitness conferred by model produced by a random spline strategy "V1" vs optimized fitness
validation.df %>%
left_join(select(si_opt.df, id, fitness_20), by = c("id")) %>%
mutate(diff = fitness_20-V1) %>%
filter(diff<0)
## get difference betweent fitness conferred by model produced by a random spline strategy "V1" vs optimized fitness
validation.df %>%
left_join(select(si_opt.df, id, fitness_20), by = c("id")) %>%
mutate(diff = fitness_20-V1)
## get difference betweent fitness conferred by model produced by a random spline strategy "V1" vs optimized fitness
validation.df_p <- validation.df %>%
left_join(select(si_opt.df, id, fitness_20), by = c("id")) %>%
mutate(diff = fitness_20-V1)
## no random strategy performed better!
validation.df_p %>% filter(diff<0)
## no random strategy performed better!
validation.df_p %>% filter(diff<-0)
## no random strategy performed better!
validation.df_p %>% filter(diff<=0)
validation.df_p
si_opt.df
## get difference betweent fitness conferred by model produced by a random spline strategy "V1" vs optimized fitness
validation.df_p <- validation.df %>%
left_join(select(si_opt.df, id, fitness_20, short_label, long_label), by = c("id")) %>%
mutate(diff = fitness_20-V1,
long_short_label = paste0(long_label, " (", short_label, ")")))
## get difference betweent fitness conferred by model produced by a random spline strategy "V1" vs optimized fitness
validation.df_p <- validation.df %>%
left_join(select(si_opt.df, id, fitness_20, short_label, long_label), by = c("id")) %>%
mutate(diff = fitness_20-V1,
long_short_label = paste0(long_label, " (", short_label, ")"))
validation.df_p
ggplot(validation.df_p) +
geom_histogram(aes(x = diff)) +
facet_wrap(~long_short_label)
ggplot(validation.df_p) +
geom_density(aes(x = diff)) +
facet_wrap(~long_short_label)
ggplot(validation.df_p) +
geom_density(aes(x = diff)) +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_density(aes(x = log(diff))) +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_density(aes(x = diff)) +
scale_y_continuous(trans = "log") +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_histogram(aes(x = diff)) +
scale_y_continuous(trans = "log") +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_histogram(aes(x = diff)) +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), binwidth = 1) +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), binwidth = 0.1) +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), bins =40) +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), bins =100) +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), bins = 35) +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), bins = 40) +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_density(aes(x = diff), color = "light grey") +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_density(aes(x = diff), fill = "light grey") +
facet_wrap(~long_short_label, scales = "free")
ggplot(validation.df_p) +
geom_density(aes(x = diff), fill = "light grey") +
facet_wrap(~long_short_label, scales = "free") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
validation.df_p %>% unique(id)
validation.df_p %>% distinct(id, .keep_all = T)
validation.df
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), fill = "light grey") +
facet_wrap(~long_short_label, scales = "free") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), fill = "black") +
facet_wrap(~long_short_label, scales = "free") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), fill = "black", bins = 100) +
facet_wrap(~long_short_label, scales = "free") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), fill = "black", bins = 100) +
facet_wrap(~long_short_label, scales = "free") +
geom_vline(xintercept = 0) +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), fill = "black", bins = 50) +
facet_wrap(~long_short_label, scales = "free") +
geom_vline(xintercept = 0) +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), fill = "black", bins = 20) +
facet_wrap(~long_short_label, scales = "free") +
geom_vline(xintercept = 0) +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), fill = "black", bins = 40) +
facet_wrap(~long_short_label, scales = "free") +
geom_vline(xintercept = 0) +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_histogram(aes(x = diff), fill = "black", bins = 40) +
facet_wrap(~long_short_label, scales = "free") +
geom_vline(xintercept = 0) +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_density(aes(x = diff), fill = "light grey") +
facet_wrap(~long_short_label, scales = "free") +
geom_vline(xintercept = 0) +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_density(aes(x = diff), fill = "light grey") +
facet_wrap(~long_short_label, scales = "free") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_density(aes(x = diff), fill = "light grey") +
facet_wrap(~long_short_label, scales = "free") +
labs(x = "Fitness difference (Optimal-Random)", y = "Density") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(validation.df_p) +
geom_density(aes(x = diff), fill = "light grey") +
facet_wrap(~long_short_label, scales = "free") +
labs(x = "Fitness difference (Optimal-Random)", y = "Density") +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(units = "px", dpi = 300, width = 2550, height = 1800, filename = here("code_repository/figures/si_validation.tiff"), bg = "white", scale = 1)
ggsave(units = "px", dpi = 300, width = 2550, height = 1500, filename = here("code_repository/figures/si_validation.tiff"), bg = "white", scale = 1)
