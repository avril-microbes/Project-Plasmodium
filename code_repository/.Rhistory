eseb_2011_ss.df <- eseb_2011 %>%
filter(Clones == "R" & between(Day, 3, 17) &
Drugs == "N") %>%
mutate(dose = 10^6,
strain = "As8p",
study = "eseb2011",
study_strain = paste0(strain, study),
RBC = RBC*(10^6),
id = paste0(study, strain, Box, Mouse, 2)) %>%
select(day = Day,
mouse = Mouse,
RBC,
asex = R.asex,
gam = R.gam,
dose,
strain,
study,
study_strain,
id)
## for evolution_2010, single infection data for both resistant and susceptible clones are available without drug treatment
evolution_2010_ss.df <- evo_2010 %>%
filter(Clone == "R" | Clone == "S") %>%
filter(between(Day, 3, 21) &
Drugs == "nodrugs") %>%
mutate(asex = R.asex + S.asex,
gam = R.gam + S.gam,
dose = 10^6,
RBC = RBC*(10^6),
study = "evol2011",
strain = ifelse(Clone == "R", "As12", "AJ51"),
study_strain = paste0(strain, "_", study),
id = paste0(study, strain, Box, Mouse, 3)) %>%
select(day = Day,
mouse = Mouse,
RBC,
asex,
gam,
dose,
strain,
study,
study_strain,
id)
## for amnat 2011, get single infection data. Filter out any mice that have missing data. Set negative asexuasl data ot 0
amna_2011_ss.df <-  amna_2011 %>%
filter(treat %in% c("AJ", "AS", "ER", "CR", "CW", "DK")) %>%
mutate(asex = tot.para - tot.gcyte,
gam = tot.gcyte,
dose = 10^6,
study = "amna_2011",
RBC = rbc/(10^6),
study_strain = paste0(treat, "_", study),
id = paste0(study, treat, div, mouse, 4)) %>%
mutate(asex = ifelse(asex < 0, 0, asex)) # sometimes total parasite is less than gametocyte so need to correct for this
### check for NA by groups
amna_na.id <- amna_2011_ss.df %>%
filter_at(vars(asex, gam, RBC), all_vars(is.na(.))) %>%
distinct(id) %>%
select(id)
amna_2011_ss.df2 <- amna_2011_ss.df %>%
filter(!(id %in% amna_na.id$id)) %>%
select(day,
mouse,
RBC,
asex,
gam,
dose,
strain = treat,
study,
study_strain,
id)
## rbind
exp_ss.df <- rbind(emph_2018_ss.df, eseb_2011_ss.df, evolution_2010_ss.df, amna_2011_ss.df2)
## write
write.csv(exp_ss.df, here("code_repository/data/experimental_data.csv"))
names(exp_ss.df) <- c("X", "Day", "Mouse", "RBC", "iRBC", "Gametocyte", "Dose", "Strain", "Study", "Study_strain", "id")
## prepare a list of variable combinations we want to plot
exp_var.comb <- tidyr::expand_grid(x = c("RBC", "iRBC", "Gametocyte"),
y = c("RBC", "iRBC", "Gametocyte")) %>% ## get all pairwise combinations of variables
filter(x != y) %>% ## remove incidences where the 2 variables are the same
mutate(tmp = paste0(pmin(x, y), pmax(x, y))) %>% ## eliminate same variable but different order
slice_head(n = 1, by = tmp) %>%
select(-tmp)
exp_ss.df
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, group = Study_strain)) +
theme_classic()
exp_ss.df
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, groups = Study_strain)) +
theme_classic()
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, groups = Study_strain)) +
theme_classic(
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, group = Study_strain)) +
theme_classic()
ggplot(exp_ss.df) +
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, group = Study_strain)) +
theme_classic()
exp_ss.df
exp_var.comb
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, group = id)) +
theme_classic()
## rbind
exp_ss.df <- rbind(emph_2018_ss.df, eseb_2011_ss.df, evolution_2010_ss.df, amna_2011_ss.df2)
names(exp_ss.df) <- c("X", "Day", "Mouse", "RBC", "iRBC", "Gametocyte", "Dose", "Strain", "Study", "Study_strain", "id")
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, group = id)) +
theme_classic()
exp_ss.df <- read.csv(here("code_repository/data/experimental_data.csv"))
names(exp_ss.df) <- c("X", "Day", "Mouse", "RBC", "iRBC", "Gametocyte", "Dose", "Strain", "Study", "Study_strain", "id")
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, group = id)) +
theme_classic()
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, group = id)) +
theme_classic() +
xlim(0,5)
ggplot(exp_ss.df) +
geom_line(aes(x = Day, y= iRBC, group = id)) +
theme_classic() +
xlim(3,8)
exp_ss.df %>%
group_by(id) %>%
mutate(max = max(iRBC, na.rm =T),
norm = iRBC/max) %>%
ggplot() +
geom_line(aes(x = Day, y= norm, group = id)) +
theme_classic() +
xlim(3,8)
dual_selected_cr.df <- read_parquet(here("code_repository/data/dual_selected_cr.parquet"))
dual_selected_cr.pl <- ggplot() +
geom_line(data = dual_selected_cr.df, aes(color = label_new, x = time, y = value), size = 1) +
geom_point(data = dual_selected_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
ggplot() +
geom_line(data = dual_selected_cr.df, aes(color = label_new, x = time, y = value), size = 1) +
geom_point(data = dual_selected_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
dual_selected_cr.pl <- ggplot() +
geom_line(data = dual_selected_cr.df, aes(color = label_new, x = time, y = value), size = 1) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
ggplot() +
geom_line(data = dual_selected_cr.df, aes(color = label_new, x = time, y = value), size = 1) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
ggplot() +
geom_line(data = dual_selected_cr.df, aes(color = label_new, x = time, y = value, linetype=label_new), size = 1) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
ggplot() +
geom_line(data = dual_selected_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, linetype=label_new), size = 1) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
ggplot() +
geom_line(data = dual_selected_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, linetype=label_new), size = 0.7) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
ggplot() +
geom_line(data = dual_selected_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, linetype=label_new), size = 0.7) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)", linetype = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
dual_selected_cr.pl <- ggplot() +
geom_line(data = dual_selected_cr.df %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = value, linetype=label_new), size = 0.7) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)", linetype = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
# make heatmap data.frame
Rlog_Ilog.hm <- par_to_hm_te(par = c(4.446192033,	10.97518275,	1.38762817,	23.3059254,	-3.452052371,	-18.0070692,	39.66614226,	-3.545193141,	18.78350799),
cue_range = seq(6,	7, length.out = 500),
cue_range_b = seq(0,	6.77815125, length.out = 500))
# process dynamics
Rlog_Ilog.dyn <- Rlog_Ilog.cr %>%
tidyr::pivot_wider(names_from = variable, values_from = value) %>%
mutate(log_R = log10(R),
log_I = log10(I))
Rlog_Ilog.cr_p <- Rlog_Ilog.cr %>% filter(variable == "cr") %>% mutate(label_new = "R log & I log\n(df=9)") %>% select(-variable)
## best dual cue model: I log and R log
Rlog_Ilog.cr <- chabaudi_si_clean(
parameters_cr = c(4.446192033,	10.97518275,	1.38762817,	23.3059254,	-3.452052371,	-18.0070692,	39.66614226,	-3.545193141,	18.78350799),
immunity = "tsukushi",
parameters = parameters_tsukushi,
time_range = seq(0, 20, by = 1e-3),
cue_range =  seq(6, 7, by = 1/500),
cue_range_b = seq(0, log10(6*(10^6)), by = (log10(6*(10^6)))/500),
cue = "R",
cue_b = "I",
log_cue = "log10",
log_cue_b = "log10",
solver = "vode",
dyn = T
)
# process dynamics
Rlog_Ilog.dyn <- Rlog_Ilog.cr %>%
tidyr::pivot_wider(names_from = variable, values_from = value) %>%
mutate(log_R = log10(R),
log_I = log10(I))
# process dynamics
Rlog_Ilog.dyn <- Rlog_Ilog.cr %>%
tidyr::pivot_wider(names_from = variable, values_from = value) %>%
mutate(log_R = log10(R),
log_I = log10(I))
Rlog_Ilog_rn.pl <- ggplot() +
geom_raster(data = Rlog_Ilog.hm, aes(x = cue_range_b, y = cue_range, fill = cr)) +
scale_fill_viridis_c() +
geom_path(data = Rlog_Ilog.dyn, aes(x = log_I, y = log_R), color = "white", arrow = arrow(angle = 30, length = unit(0.1, "inches"))) +
geom_point(data = Rlog_Ilog.dyn %>% filter(row_number() %% 1000 == 1 & time <= 20), aes(x = log_I, y = log_R), color = "white") +
xlim(0.99*min(hablar::s(Rlog_Ilog.dyn$log_I), na.rm = T), 1.01* max(hablar::s(Rlog_Ilog.dyn$log_I), na.rm = T)) +
ylim(0.99*min(hablar::s(Rlog_Ilog.dyn$log_R), na.rm = T),1.01* max(hablar::s(Rlog_Ilog.dyn$log_R), na.rm = T)) +
labs(y = "RBC log", x = "Asexual iRBC log", fill = "Transmission\ninvestment") +
theme_classic() +
theme(legend.position = "right")
# assemble panel B and C
dual_main.BC <- ggarrange(dual_selected_cr.pl, Rlog_Ilog_rn.pl, align = "v", ncol = 1, labels = c("B", "C"))
# assemble panel A
ggarrange(dual_fitness.pl, dual_main.BC, ncol = 2, labels = c("A", ""), widths = c(1.1,1))
dual_fitness.pl <- ggplot(dual_si_fitness.df) +
geom_segment(aes(y = fct_reorder(label_comb, fitness_dual_norm), yend = fct_reorder(label_comb, fitness_dual), x = fitness_dual_norm, xend = fitness_si_final)) + ## line segment connecting the cue values
geom_point(aes(y = fct_reorder(label_comb, fitness_dual), x = fitness_dual_norm, color = "Dual cue", shape = "Dual cue"),
size = 2.5) + ## dual cue fitness
geom_point(aes(y = fct_reorder(label_comb, fitness_dual_norm), x = fitness_si_final, color = "Best single cue", shape = "Best single cue"), size = 2.5) + ## best single cue fitness
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
labs(x = "Normalized fitness", y = "Dual cue combinations", colour = "Legend", shape = "Legend") +
theme_classic() +
theme(legend.position = "top")
dual_cue_f_final.df <- read.csv(here("code_repository/data/dual_cue_fitness_final.csv"))
dual_si_fitness.df <- dual_cue_f_final.df %>%
select(id, id_b, label, label_b, fitness_dual = fitness) %>%
left_join(select(si_opt.df, id, fitness_si = fitness_20), by = "id") %>% ## get fitness of single cue model based on first cue
left_join(select(si_opt.df, id_b = id, fitness_si_b = fitness_20), by = "id_b") %>%  ## get fitness of single cue model based on second cue
mutate(fitness_si_final = ifelse(fitness_si > fitness_si_b, fitness_si, fitness_si_b)/9.883602,
label_comb = gsub("I\\+Ig", "Total I", paste(label, "&", label_b)), ## select the highest single cue model fitness
fitness_dual_norm = fitness_dual/9.883602)## normalize by time fitness
dual_fitness.pl <- ggplot(dual_si_fitness.df) +
geom_segment(aes(y = fct_reorder(label_comb, fitness_dual_norm), yend = fct_reorder(label_comb, fitness_dual), x = fitness_dual_norm, xend = fitness_si_final)) + ## line segment connecting the cue values
geom_point(aes(y = fct_reorder(label_comb, fitness_dual), x = fitness_dual_norm, color = "Dual cue", shape = "Dual cue"),
size = 2.5) + ## dual cue fitness
geom_point(aes(y = fct_reorder(label_comb, fitness_dual_norm), x = fitness_si_final, color = "Best single cue", shape = "Best single cue"), size = 2.5) + ## best single cue fitness
scale_color_manual(values=c("#fc8d59", "#4575b4")) +
labs(x = "Normalized fitness", y = "Dual cue combinations", colour = "Legend", shape = "Legend") +
theme_classic() +
theme(legend.position = "top")
# assemble panel A
ggarrange(dual_fitness.pl, dual_main.BC, ncol = 2, labels = c("A", ""), widths = c(1.1,1))
ggsave(here("code_repository/figures/dual_main_intermediate.tiff"), units = "px", width = 2250, height = 1400, scale = 1.3, dpi=300,  bg = "white")
dual_selected_cr.pl <- ggplot() +
geom_line(data = dual_selected_cr.df %>% filter(time%%0.5 == 0), aes(color = label_new, x = time, y = value, linetype=label_new), size = 0.7) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)", linetype = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
l_selected_cr.df %>% filter(time%%0.5 == 0), aes(color = label_new, x = time, y = value, linetype=label_new), size = 0.7) +
ggplot() +
geom_line(data = dual_selected_cr.df %>% filter(time%%0.5 == 0), aes(color = label_new, x = time, y = value, linetype=label_new), size = 0.7) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 3) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)", linetype = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
# assemble panel B and C
dual_main.BC <- ggarrange(dual_selected_cr.pl, Rlog_Ilog_rn.pl, align = "v", ncol = 1, labels = c("B", "C"))
# assemble panel A
ggarrange(dual_fitness.pl, dual_main.BC, ncol = 2, labels = c("A", ""), widths = c(1.1,1))
ggsave(here("code_repository/figures/dual_main_intermediate.tiff"), units = "px", width = 2250, height = 1400, scale = 1.3, dpi=300,  bg = "white")
dual_selected_cr.pl <- ggplot() +
geom_line(data = dual_selected_cr.df %>% filter(time%%0.5 == 0), aes(color = label_new, x = time, y = value, linetype=label_new), size = 0.7) +
geom_point(data = dual_selected_cr.df %>% filter(time%%2 == 0), aes(color = label_new, x = time, y = value, shape = label_new), size = 2.5) +
labs(x = "Time (days)", y = "Transmission investment", color = "Cue(s)", shape = "Cue(s)", linetype = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right",
plot.margin = margin(t = 40, r = 0, b = 0, l = 0, unit = "pt")) +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
# assemble panel B and C
dual_main.BC <- ggarrange(dual_selected_cr.pl, Rlog_Ilog_rn.pl, align = "v", ncol = 1, labels = c("B", "C"))
# assemble panel A
ggarrange(dual_fitness.pl, dual_main.BC, ncol = 2, labels = c("A", ""), widths = c(1.1,1))
ggsave(here("code_repository/figures/dual_main_intermediate.tiff"), units = "px", width = 2250, height = 1400, scale = 1.3, dpi=300,  bg = "white")
# read in data
dual_selected_taucum.df <- read_parquet(here("code_repository/data/dual_selected_taucum.parquet"))
# normalize fitness
dual_selected_taucum.df_p <- dual_selected_taucum.df %>% mutate(fitness_norm = value/9.883602)
# plot cumultative transmission plot
ggplot() +
geom_line(data = dual_selected_taucum.df_p, aes(color = label_new, x = time, y = fitness_norm, linetype = label_new), size = 0.7) +
geom_point(data = dual_selected_taucum.df_p %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = fitness_norm, shape = label_new), size = 2.5) +
labs(x = "Time (days)", y = "Cumulative transmission\npotential (normalized)", color = "Cue(s)", shape = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right") +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
# plot cumultative transmission plot
ggplot() +
geom_line(data = dual_selected_taucum.df_p %>% filter(time%%0.5 == 0), aes(color = label_new, x = time, y = fitness_norm, linetype = label_new), size = 0.7) +
geom_point(data = dual_selected_taucum.df_p %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = fitness_norm, shape = label_new), size = 2.5) +
labs(x = "Time (days)", y = "Cumulative transmission\npotential (normalized)", color = "Cue(s)", shape = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right") +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
# plot cumultative transmission plot
ggplot() +
geom_line(data = dual_selected_taucum.df_p %>% filter(time%%0.5 == 0), aes(color = label_new, x = time, y = fitness_norm, linetype = label_new), size = 0.7) +
geom_point(data = dual_selected_taucum.df_p %>% filter(time%%1 == 0), aes(color = label_new, x = time, y = fitness_norm, shape = label_new), size = 2.5) +
labs(x = "Time (days)", y = "Cumulative transmission\npotential (normalized)", color = "Cue(s)", shape = "Cue(s)", linetype = "Cue(s)") +
xlim(0, 20) +
scale_color_manual(values = c(orange,"#E1BE6A",blue ,"black")) +
theme_classic() +
theme(legend.position="right") +
guides(color = guide_legend(nrow = 4, byrow = TRUE))
ggsave(here("code_repository/figures/dual_taucum.tiff"), units = "px", width = 1600, height = 1000, dpi=300,  bg = "white", scale = 1.2)
# relationship between fitness vs robistness
ggplot(mc_single_dyn_cr.sum_fitness, aes(x = fitness_det_norm, y = geo_mean_diff, color = fitness_det_norm)) +
geom_point(size = 2.5, color = "black", shape = 1) +
geom_point(size = 2, alpha=0.8) +
facet_wrap(~parameter_label, scales = "free") +
scale_color_viridis_c() +
labs(x = "Deterministic model fitness", y = "Normalized fitness difference\n(Single-Deterministic)", color = "Deterministic\nmodel fitness") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
mc_single_dyn_cr.sum_fitness <- mc_single_fitness.sum2 %>%
mutate(geo_mean_diff = geo_mean-fitness_det_norm) %>%
left_join(mc_single_dyn_cr.sum, by = c("id", "parameter"))
mc_single_dyn_cr.sum <- read.csv(here("code_repository/data/mc_single_dyn_cr_sum.csv"))
mc_single_dyn_cr.sum_fitness <- mc_single_fitness.sum2 %>%
mutate(geo_mean_diff = geo_mean-fitness_det_norm) %>%
left_join(mc_single_dyn_cr.sum, by = c("id", "parameter"))
## get median fitness values (normalized)
mc_single_fitness.sum2 <- mc_single_fitness.long2 %>%
group_by(short_label, id, parameter_label, parameter) %>%
summarize(median = median(fitness_norm),
mean = mean(fitness_norm),
geo_mean = exp(mean(log(fitness_norm))),
fitness_det_norm = unique(fitness_det_norm)) %>%
left_join(select(mc_all_fitness_sum.df, short_label, geo_mean_all = geom_mean), by = "short_label") ## get geometric mean of when all parameter are varied
## simpler version of long table containing fitness of parasites when various parameter is pertubed
mc_single_fitness.long2 <- mc_single_fitness.df %>%
filter(iter %in% seq(0,1000,1)) %>% ## filter out iter = 1, which does not have variation
distinct(id, iter, .keep_all = T) %>% ## ensure there are not replicates
filter(iter != 1) %>%
dplyr::select(id, max_fitness_rho, max_fitness_beta, max_fitness_psin, max_fitness_psiw, max_fitness_phin, max_fitness_phiw, iter) %>% # keep only fitness and associated labels
tidyr::pivot_longer(-c("id", "iter")) %>% ## make long
mutate(parameter = gsub("max_fitness_", "", name)) %>%
mutate(
parameter_label = case_when( ## recode parameter values
parameter == "rho" ~ "RBC replenishment (ρ)",
parameter == "phin" ~ "Half-life indis (ϕn)",
parameter == "phiw" ~ "Half-life targeted (ϕw)",
parameter == "psin" ~ "Activation indis (ψn)",
parameter == "psiw" ~ "Activation targeted (ψw)",
parameter == "beta" ~ "Burst size (β)",
),
fitness_norm = value/9.883602) %>%  ## normalize fitness value
left_join(ez_label, by = c("id")) %>%
left_join(
rbind(
select(si_opt.df, id, fitness_det = fitness_20) ,## get deterministic fitness (single cue)
dual_cue_f_final.df %>% mutate(id = paste0(id, "-", id_b)) %>% select(id, fitness_det = fitness) ## get deterministic fitness (dual cue)
),
by = "id") %>%
mutate(fitness_det_norm = fitness_det/9.883602) ## normalize deterministic fitness
mc_single_fitness.long2 %>% distinct(id, fitness_det)
## reorder parameter
mc_single_fitness.long2$parameter_label <- factor(mc_single_fitness.long2$parameter_label,
c("Burst size (β)",
"RBC replenishment (ρ)",
"Half-life indis (ϕn)",
"Half-life targeted (ϕw)",
"Activation indis (ψn)",
"Activation targeted (ψw)"))
## get median fitness values (normalized)
mc_single_fitness.sum2 <- mc_single_fitness.long2 %>%
group_by(short_label, id, parameter_label, parameter) %>%
summarize(median = median(fitness_norm),
mean = mean(fitness_norm),
geo_mean = exp(mean(log(fitness_norm))),
fitness_det_norm = unique(fitness_det_norm)) %>%
left_join(select(mc_all_fitness_sum.df, short_label, geo_mean_all = geom_mean), by = "short_label") ## get geometric mean of when all parameter are varied
## get mean and mode in a separate df
mc_all_fitness_sum.df <- mc_all_fitness_rand.df %>%
group_by(short_label) %>%
summarize(mean = mean(fitness_norm),
median = median(fitness_norm),
geom_mean = exp(mean(log(fitness_norm))),
sd = sd(fitness_norm)) %>%
left_join(select(mc_all_fitness_ref.df, short_label, max_fitness), by = "short_label")
## get the rest of the data points (excluding iter == 1) and calculate median and mean
mc_all_fitness_rand.df <- mc_all_fitness.df_p %>%
filter(iter != 1)
## normalize fitness and take only first 1000 measurement (this is done given that subsequent simulations only include 1000 reps!)
mc_all_fitness.df_p <- mc_all_fitness.df %>%
filter(iter %in% seq(1,1000,1)) %>%
mutate(fitness_norm = max_fitness/9.883602,
short_label = gsub("I\\+Ig", "Total I", short_label))
## get the reference fitness (default parameter variation), which is where iter = 1
mc_all_fitness_ref.df <- mc_all_fitness.df_p %>% filter(iter == 1)
## get the rest of the data points (excluding iter == 1) and calculate median and mean
mc_all_fitness_rand.df <- mc_all_fitness.df_p %>%
filter(iter != 1)
## get mean and mode in a separate df
mc_all_fitness_sum.df <- mc_all_fitness_rand.df %>%
group_by(short_label) %>%
summarize(mean = mean(fitness_norm),
median = median(fitness_norm),
geom_mean = exp(mean(log(fitness_norm))),
sd = sd(fitness_norm)) %>%
left_join(select(mc_all_fitness_ref.df, short_label, max_fitness), by = "short_label")
mc_all_fitness_sum.df
## get median fitness values (normalized)
mc_single_fitness.sum2 <- mc_single_fitness.long2 %>%
group_by(short_label, id, parameter_label, parameter) %>%
summarize(median = median(fitness_norm),
mean = mean(fitness_norm),
geo_mean = exp(mean(log(fitness_norm))),
fitness_det_norm = unique(fitness_det_norm)) %>%
left_join(select(mc_all_fitness_sum.df, short_label, geo_mean_all = geom_mean), by = "short_label") ## get geometric mean of when all parameter are varied
# left join geometric fitness to long df for ranking purposes
mc_single_fitness.long2 <- mc_single_fitness.long2 %>%
left_join(select(mc_single_fitness.sum2, id,parameter_label, median, mean, geo_mean), by = c("id", "parameter_label", "short_label"))
mc_single_dyn_cr.sum_fitness <- mc_single_fitness.sum2 %>%
mutate(geo_mean_diff = geo_mean-fitness_det_norm) %>%
left_join(mc_single_dyn_cr.sum, by = c("id", "parameter"))
# relationship between fitness vs robistness
ggplot(mc_single_dyn_cr.sum_fitness, aes(x = fitness_det_norm, y = geo_mean_diff, color = fitness_det_norm)) +
geom_point(size = 2.5, color = "black", shape = 1) +
geom_point(size = 2, alpha=0.8) +
facet_wrap(~parameter_label, scales = "free") +
scale_color_viridis_c() +
labs(x = "Deterministic model fitness", y = "Normalized fitness difference\n(Single-Deterministic)", color = "Deterministic\nmodel fitness") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# relationship between conversion rate difference and difference in fitness
ggplot(mc_single_dyn_cr.sum_fitness, aes(x = median_cr_diff, geo_mean_diff, color = fitness_det_norm)) +
geom_point(size = 2.5, color = "black", shape = 1) +
geom_point(size = 2, alpha=0.8) +
facet_wrap(~parameter_label) +
scale_color_viridis_c() +
ylim(NA, 0.02) +
labs(x = "Median conversion rate difference", y = "Normalized fitness difference\n(Single-Deterministic)", color = "Deterministic\nmodel fitness") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom")
mc_single_dyn_cr.sum_fitness
