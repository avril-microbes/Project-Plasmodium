library(dplyr)
library(ggplot2)
library(here)
library(deSolve)
library(crone)
library(optimParallel)
library(doParallel)
library(doRNG)
library(arrow)
# for single infections
source(here("functions/opt_local.R"))
source(here("functions/chabaudi_si_clean.R"))
source(here("functions/validate_si.R"))
# for co-infections
source(here("functions/co_infection_opt_alt.R"))
source(here("functions/co_infection_opt_do.R"))
source(here("functions/chabaudi_ci_clean.R"))
source(here("functions/validate_ci.R"))
# Import in the list of single infection optimization results
si_opt.df2 <- read.csv(here("data/si_opt.csv"))
# split into individual tables
si_opt.ls <- split(si_opt.df, seq(nrow(si_opt.df)))
# import in all single infection data
si_val.ls <- list.files(path = here("data/si_validation"), pattern = "*.csv", full.names = T)
# get max fitness from simulation. left join with si_opt
si_opt.df <- read.csv(here("data/si_opt.csv"))
# import in ci optimum for same cue and join with cue range
ci_opt.df <- read.csv(here("data/ci_opt.csv"))
cue_range.df <- read.csv(here("data/cue_range_ci.csv"))
# read in the results file
ci_val.ls <- list.files(path = here("data/ci_validation"), pattern = "*.csv", full.names = T)
ci_val.ls2 <- lapply(ci_val.ls, read.csv)
ci_val.df <- do.call(rbind, ci_val.ls2)
# Here, we are competing strain 1 (adopting supposed optimum strategy) with strain 2 adopting a randomized strategy. Hence, we expect fitness difference to be above 1!
ci_val.df %>%
group_by(label) %>%
summarize(min_fitness = min(V1))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# for dual cue
source(here("functions/dual_cue_opt.R"))
here()
# for dual cue
source(here("functions/dual_cue_opt.R"))
library(dplyr)
library(ggplot2)
library(here)
library(deSolve)
library(crone)
library(optimParallel)
library(doParallel)
library(doRNG)
library(arrow)
# for dual cue
source(here("functions/dual_cue_opt.R"))
here()
