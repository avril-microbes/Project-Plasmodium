mc_all_fitness.pl <- ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Median", color = "Median"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Median", color = "Median"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
mc_all_fitness.pl <- ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
mc_all_fitness.pl <- ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3)
mc_all_fitness.pl <- ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
mc_all_fitness.pl <- ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "grey", "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "grey", "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, orange, "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "red", "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
mc_all_fitness.pl <- ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "F8766D", "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "F8766D", "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c(blue, "#F8766D", "black")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = mean)),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = mean)),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
mc_all_fitness.pl <- ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggarrange(mc_all_fitness.pl, mc_partition.pl, align = "h", widths = c(1.3, 2), labels = c("A", "B"))
ggsave(units = "px", dpi = 300, width = 2250, height = 1500, filename = here("code_repository/figures/mc_fitness_partition.tiff"), bg = "white", scale = 1.2)
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3, alpha = 0.6) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3, alpha = 0.6) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3, alpha = 0.6) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3, alpha = 0.7) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3, alpha = 0.7) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3, alpha = 0.7) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
mc_all_fitness.pl <- ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3, alpha = 0.7) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3, alpha = 0.7) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3, alpha = 0.7) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggarrange(mc_all_fitness.pl, mc_partition.pl, align = "h", widths = c(1.3, 2), labels = c("A", "B"))
ggsave(units = "px", dpi = 300, width = 2250, height = 1500, filename = here("code_repository/figures/mc_fitness_partition.tiff"), bg = "white", scale = 1.2)
mc_all_fitness.pl <- ggplot() +
geom_violin(data = mc_all_fitness_rand.df, aes(x = max_fitness, y = fct_reorder(long_label, max_fitness, .fun = function(x){exp(mean(log(x)))})),
fill = "light grey", trim = T) +
geom_point(data = mc_all_fitness_ref.df, aes(x = max_fitness, y = long_label,
shape = "Deterministic", color = "Deterministic"), size = 3, alpha = 0.8) +
geom_point(data = mc_all_fitness_sum.df, aes(x = mean, y = long_label,
shape = "Mean", color = "Mean"), size = 3, alpha = 0.8) +
geom_point(data = mc_all_fitness_sum.df, aes(x = geom_mean, y = long_label,
shape = "Geometric mean", color = "Geometric mean"), size = 3, alpha = 0.8) +
labs(x ="Fitness", y = "Cues", shape = "Legend", color = "Legend") +
scale_color_manual(values = c("black", blue, "#F8766D")) +
theme_classic() +
expand_limits(y = 13.7) +
theme(legend.position = c(0.1,1),
legend.direction = "horizontal",
legend.justification = "top")
ggarrange(mc_all_fitness.pl, mc_partition.pl, align = "h", widths = c(1.3, 2), labels = c("A", "B"))
ggsave(units = "px", dpi = 300, width = 2250, height = 1500, filename = here("code_repository/figures/mc_fitness_partition.tiff"), bg = "white", scale = 1.2)
## calculate summary statistics. this includes median, credible interval (contains 89% data points calculated via Highest Density Interval, which is better for skewed data)
mc_single_fitness.sum <- mc_single_fitness.long_p %>%
group_by(long_label, parameter) %>%
summarise(ci_lower = ci(rel_diff_single, method = "HDI", ci = 0.89)[[2]],
ci_higher = ci(rel_diff_single, method = "HDI", ci = 0.89)[[3]],
quantile_low = quantile(rel_diff_single, 0.025),
quantile_high = quantile(rel_diff_single, 0.975),
median = median(rel_diff_single),
mean = mean(rel_diff_single)) %>%
mutate(parameter_label = case_when( ## recode parameter values
parameter == "rho" ~ "RBC replenishment (ρ)",
parameter == "phin" ~ "Half-life indis (ϕn)",
parameter == "phiw" ~ "Half-life targeted (ϕw)",
parameter == "psin" ~ "Activation indis (ψn)",
parameter == "psiw" ~ "Activation targeted (ψw)",
parameter == "beta" ~ "Burst size (β)",
))
ggplot() +
geom_violin(data = mc_single_fitness.long_p_f, aes(x = rel_diff_single, y = long_label,
fill = log, color = log)) + ## 89% credible interval
geom_point(data = mc_single_fitness.sum, aes(x = mean, y = long_label)) +
geom_vline(xintercept = 0, linetype = "dashed") +
facet_wrap(~parameter_label) +
labs(x = "Relative fitness pertubation", y = "Cues") +
scale_color_manual(values=c("#4575b4", "#fc8d59")) +
scale_fill_manual(values=c("#4575b4", "#fc8d59")) +
scale_shape_manual(values = c(22,23)) +
theme_bw() +
scale_y_discrete(limits=rev) + ## reverse ordering of y-axis so that cues are displayed correctly
theme(legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggplot() +
geom_violin(data = mc_single_fitness.long_p_f, aes(x = rel_diff_single, y = long_label,
fill = log, color = log)) + ## 89% credible interval
geom_point(data = mc_single_fitness.sum, aes(x = median, y = long_label)) +
geom_vline(xintercept = 0, linetype = "dashed") +
facet_wrap(~parameter_label) +
labs(x = "Relative fitness pertubation", y = "Cues") +
scale_color_manual(values=c("#4575b4", "#fc8d59")) +
scale_fill_manual(values=c("#4575b4", "#fc8d59")) +
scale_shape_manual(values = c(22,23)) +
theme_bw() +
scale_y_discrete(limits=rev) + ## reverse ordering of y-axis so that cues are displayed correctly
theme(legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
## calculate summary statistics. this includes median, credible interval (contains 89% data points calculated via Highest Density Interval, which is better for skewed data)
mc_single_fitness.sum <- mc_single_fitness.long_p %>%
group_by(long_label, parameter) %>%
summarise(ci_lower = ci(rel_diff_single, method = "HDI", ci = 0.89)[[2]],
ci_higher = ci(rel_diff_single, method = "HDI", ci = 0.89)[[3]],
quantile_low = quantile(rel_diff_single, 0.025),
quantile_high = quantile(rel_diff_single, 0.975),
median = median(rel_diff_single),
mean = mean(rel_diff_single),
geom_mean = exp(mean(log(rel_diff_single)))) %>%
mutate(parameter_label = case_when( ## recode parameter values
parameter == "rho" ~ "RBC replenishment (ρ)",
parameter == "phin" ~ "Half-life indis (ϕn)",
parameter == "phiw" ~ "Half-life targeted (ϕw)",
parameter == "psin" ~ "Activation indis (ψn)",
parameter == "psiw" ~ "Activation targeted (ψw)",
parameter == "beta" ~ "Burst size (β)",
))
ggplot() +
geom_violin(data = mc_single_fitness.long_p_f, aes(x = rel_diff_single, y = long_label,
fill = log, color = log)) + ## 89% credible interval
geom_point(data = mc_single_fitness.sum, aes(x = median, y = long_label)) +
geom_vline(xintercept = 0, linetype = "dashed") +
facet_wrap(~parameter_label) +
labs(x = "Relative fitness pertubation", y = "Cues") +
scale_color_manual(values=c("#4575b4", "#fc8d59")) +
scale_fill_manual(values=c("#4575b4", "#fc8d59")) +
scale_shape_manual(values = c(22,23)) +
theme_bw() +
scale_y_discrete(limits=rev) + ## reverse ordering of y-axis so that cues are displayed correctly
theme(legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
## get list of files
mc_burst.ls <- list.files(here("code_repository/data/mc_burst_opt/"), pattern = "*.csv", full.names = T)
## read in and bind. Exclude R log + I log due to differences in # of parameters
mc_burst.ls[grepl("R_log_I_log", mc_burst.ls)]
## read in and bind. Exclude R log + I log due to differences in # of parameters
mc_burst.ls[!grepl("R_log_I_log", mc_burst.ls)]
## read in and bind. Exclude R log + I log due to differences in # of parameters
length(mc_burst.ls[!grepl("R_log_I_log", mc_burst.ls)])
11*4*2
df_p <- df %>% select(id, cue, log, beta, fitness, par1, par2, par3, par4, default)
## read in and bind. Exclude R log + I log due to differences in # of parameters
mc_burst_par.df_f <- do.call(rbind, lapply(mc_burst.ls[!grepl("R_log_I_log", mc_burst.ls)], function(x){
df <- read.csv(x)
df_p <- df %>% select(id, cue, log, beta, fitness, par1, par2, par3, par4, default)
return(df_p)}))
mc_burst_par.df_f
## get the top strategy based on fitness
mc_burst_par.df_f %>%
group_by(id, beta) %>%
top_n(1, fitness) %>%
filter(id != "time")
df_p <- df %>% select(id, cue, log, beta, fitness, par1, par2, par3, par4, default)
## read in and bind. Exclude R log + I log due to differences in # of parameters
mc_burst_par.df_raw <- do.call(rbind, lapply(mc_burst.ls[!grepl("R_log_I_log", mc_burst.ls)], function(x){
df <- read.csv(x)
df_p <- df %>% select(id, cue, log, beta, fitness, par1, par2, par3, par4, default)
return(df_p)}))
## get the top strategy based on fitness
mc_burst_par.df_f <- mc_burst_par.df_raw %>%
group_by(id, beta) %>%
top_n(1, fitness) %>%
filter(id != "time") ## get rid of time
mc_burst_par.df_f
## join with si_opt to get cue ranges
mc_burst_par.df_f %>%
left_join(si_opt.df, by = "id")
## join with si_opt to get cue ranges
mc_burst_par.df_f %>%
left_join(si_opt.df, by = c("id", "cue", "log"))
## join with si_opt to get cue ranges
mc_burst_par.df_f %>%
left_join(select(si_opt.df, id, low, high, by, long_label), by = "id")
## join with si_opt to get cue ranges
mc_burst_par.df_fp <- mc_burst_par.df_f %>%
left_join(select(si_opt.df, id, low, high, by, long_label), by = "id")
## get dataframe of reaction norm
df <- mc_burst_par.df_fp[1,]
df
## get dataframe of reaction norm
x <- mc_burst_par.df_fp[1,]
par_to_df(par = c(x$par1, x$par2, x$par3, x$par4), cue_range = seq(x$low, x$high, x$by), max = x$high)
par_to_df(par = c(x$par1, x$par2, x$par3, x$par4), cue_range = seq(x$low, x$high, x$by), max = x$high)
df <- par_to_df(par = c(x$par1, x$par2, x$par3, x$par4), cue_range = seq(x$low, x$high, x$by), max = x$high)
df
